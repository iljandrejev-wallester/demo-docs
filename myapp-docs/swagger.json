{
    "host": "https://api.wallester.eu",
    "basePath": "/",
    "consumes": [
      "application/json",
      "multipart/form-data"
    ],
    "definitions": {
      "ACSLanguageCode": {
        "enum": [
          "ENG"
        ],
        "title": "DEPRECATED. Language code.",
        "type": "string",
        "x-go-package": "github.com/wallester/api/model"
      },
      "APICard3DSecureType": {
        "enum": [
          "SMSOTPAndStaticPassword"
        ],
        "title": "DEPRECATED. Not used, will be removed soon. Card 3D Secure type.",
        "type": "string",
        "x-go-package": "github.com/wallester/api/model"
      },
      "APICardType": {
        "description": "Card type",
        "enum": [
          "ChipAndPin",
          "ChipAndPinAnonymous",
          "Virtual"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/api/model"
      },
      "APIModelCardCloseReason": {
        "description": "APIModelCardCloseReason types",
        "enum": [
          "ClosedByCardholder",
          "ClosedByClient",
          "ClosedByIssuer",
          "ClosedByReplace",
          "ClosedBySystem"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/api/model"
      },
      "APIModelFeeType": {
        "description": "APIModelFeeType types",
        "enum": [
          "AdditionalBINConfigurationFee",
          "AdditionalBINMaintenanceFee",
          "AdditionalVirtualCardsFee",
          "AuthorizationATMBalanceInquiryFixedFee",
          "AuthorizationATMDeclinedFixedFee",
          "AuthorizationATMWithdrawalComplexFee",
          "AuthorizationATMWithdrawalEEAComplexFee",
          "AuthorizationATMWithdrawalFixedFee",
          "AuthorizationATMWithdrawalInternationalComplexFee",
          "AuthorizationATMWithdrawalPercentageFee",
          "AuthorizationDeclinedFixedFee",
          "AuthorizationEEAFixedFee",
          "AuthorizationForeignExchangePercentageFee",
          "AuthorizationInternationalFixedFee",
          "AvailableFundsRefundFee",
          "CardDeliveryFixedFee",
          "CardExpressDeliveryFixedFee",
          "CardIssuanceFixedFee",
          "CardRenewalFixedFee",
          "CardReplacementFixedFee",
          "CardUsageFixedFee",
          "ChargebackProcessingFee",
          "MerchantWhitelistFee",
          "OtherAdministrativeRequestFee",
          "PINChangeFixedFee",
          "PaymentEEAComplexFee",
          "PaymentEEAFixedFee",
          "PaymentInternationalComplexFee",
          "PaymentInternationalFixedFee",
          "PaymentPercentageFee",
          "PricingPlanFee",
          "Remind3DSPasswordFixedFee",
          "RemindPINFixedFee",
          "ZeroAuthorizationEEAFixedFee",
          "ZeroAuthorizationInternationalFixedFee"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/api/model"
      },
      "APIRiskProfile": {
        "description": "__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
        "enum": [
          "High",
          "Low",
          "Medium"
        ],
        "title": "Risk profile.",
        "type": "string",
        "x-go-package": "github.com/wallester/api/model"
      },
      "APIUser": {
        "properties": {
          "id": {
            "description": "API user ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "client_id": {
            "description": "Client ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ClientID"
          },
          "name": {
            "description": "Name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Name"
          },
          "description": {
            "description": "Description",
            "maxLength": 200,
            "type": "string",
            "x-go-name": "Description"
          },
          "public_key": {
            "description": "RSA Public key. Required without shared_key",
            "type": "string",
            "x-go-name": "PublicKey"
          },
          "shared_key": {
            "description": "HS256 Shared key. Required without public_key",
            "type": "string",
            "x-go-name": "SharedKey"
          },
          "status": {
            "$ref": "#/definitions/APIUserStatus"
          },
          "created_at": {
            "description": "Date-time when API user was created\nDate-time in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "updated_at": {
            "description": "Last date-time when API user was updated\nDate-time in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "deleted_at": {
            "description": "Date-time when API user was deleted\nDate-time in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DeletedAt"
          }
        },
        "required": [
          "name"
        ],
        "title": "User represents API user, for example CRM.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "APIUserStatus": {
        "enum": [
          "Active",
          "Deleted"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "Account": {
        "properties": {
          "id": {
            "description": "Account ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "product_id": {
            "description": "Product ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ProductID"
          },
          "person_id": {
            "description": "Account owner ID. Filled when account owner is cardholder, not a company.",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "company_id": {
            "description": "Account owner ID. Filled when account owner is company, not a cardholder.",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "external_id": {
            "description": "ExternalID",
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "name": {
            "description": "A name specified by the user on creation of the Account",
            "type": "string",
            "x-go-name": "Name"
          },
          "currency_code": {
            "description": "Code of the Account’s currency under ISO 4217",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "CurrencyCode"
          },
          "credit_limit": {
            "description": "Credit limit",
            "format": "double",
            "type": "number",
            "x-go-name": "CreditLimit"
          },
          "used_credit": {
            "description": "Used credit",
            "format": "double",
            "type": "number",
            "x-go-name": "UsedCredit"
          },
          "balance": {
            "description": "Account balance",
            "format": "double",
            "type": "number",
            "x-go-name": "Balance"
          },
          "available_amount": {
            "description": "Account balance less blocked amount, i.e. available money that can be spent",
            "format": "double",
            "type": "number",
            "x-go-name": "AvailableAmount"
          },
          "blocked_amount": {
            "description": "Amount blocked by payments and is waiting to be settled",
            "format": "double",
            "type": "number",
            "x-go-name": "BlockedAmount"
          },
          "status": {
            "description": "Statuses of Active, Closing, Closed",
            "enum": [
              "Active",
              "Closing",
              "Closed",
              "Blocked"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "created_at": {
            "description": "Date-time in UTC when the Account was created",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "updated_at": {
            "description": "Date-time in UTC of the last changes in the Account’s object",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "closed_at": {
            "description": "Date-time in UTC, applies if the Account is closed",
            "format": "date-time",
            "type": "string",
            "x-go-name": "ClosedAt"
          },
          "limits": {
            "$ref": "#/definitions/AccountLimits"
          },
          "closed_by": {
            "description": "ID of the user who closed the account",
            "type": "string",
            "x-go-name": "ClosedBy"
          },
          "close_reason": {
            "description": "Close reason",
            "enum": [
              "ClosedByIssuer",
              "ClosedByClient",
              "ClosedBySystem",
              "ClosedByCardholder"
            ],
            "type": "string",
            "x-go-name": "CloseReason"
          },
          "is_main": {
            "description": "Indication if the Account is the main for the Company (field available only for Wallester Business product)",
            "type": "boolean",
            "x-go-name": "IsMain"
          },
          "cards_count": {
            "description": "Number of Cards linked to the Account",
            "format": "int64",
            "type": "integer",
            "x-go-name": "CardsCount"
          },
          "viban": {
            "description": "Feature for this field is coming soon",
            "type": "string",
            "x-go-name": "Viban"
          },
          "top_up_details": {
            "$ref": "#/definitions/AccountTopUpDetails"
          },
          "reference_number": {
            "description": "Reference number for top-upping (applicable only for active accounts)",
            "type": "string",
            "x-go-name": "ReferenceNumber"
          }
        },
        "title": "Account represents a person account.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AccountAdjustment": {
        "properties": {
          "id": {
            "description": "Account adjustment ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "account_id": {
            "description": "Account ID to which this adjustment belongs",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "external_id": {
            "description": "External ID",
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "amount": {
            "description": "Account adjustment amount",
            "format": "double",
            "type": "number",
            "x-go-name": "Amount"
          },
          "description": {
            "description": "Account adjustment description",
            "type": "string",
            "x-go-name": "Description"
          },
          "sender_name": {
            "description": "Account adjustment sender name",
            "type": "string",
            "x-go-name": "SenderName"
          },
          "created_at": {
            "description": "Date-time the account adjustment was created at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "type": {
            "description": "Adjustment type",
            "enum": [
              "Adjustment",
              "Cashback",
              "IncomingSEPAPayment",
              "SendEmployeeTransfer",
              "ReceiveEmployeeTransfer",
              "SendMobileTransfer",
              "ReceiveMobileTransfer",
              "AccountToAccountTransfer",
              "CardTopUp"
            ],
            "type": "string",
            "x-go-name": "Type"
          },
          "icon_url": {
            "description": "Icon URL",
            "type": "string",
            "x-go-name": "IconURL"
          },
          "updated_at": {
            "description": "Updated at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "description": "Updated by",
            "type": "string",
            "x-go-name": "UpdatedBy"
          }
        },
        "title": "AccountAdjustment represents an account adjustment.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AccountAdjustmentNotification": {
        "properties": {
          "data": {
            "$ref": "#/definitions/EventAccountAdjustment"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "account_adjustment"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "account_adjustment",
              "incoming_payment",
              "cashback"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "AccountLimits": {
        "properties": {
          "daily_purchase": {
            "description": "Daily purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyPurchase"
          },
          "daily_withdrawal": {
            "description": "Daily withdrawal amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyWithdrawal"
          },
          "daily_internet_purchase": {
            "description": "Daily internet purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyInternetPurchase"
          },
          "daily_contactless_purchase": {
            "description": "Daily contactless purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyContactlessPurchase"
          },
          "weekly_purchase": {
            "description": "Weekly purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyPurchase"
          },
          "weekly_withdrawal": {
            "description": "Weekly withdrawal amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyWithdrawal"
          },
          "weekly_internet_purchase": {
            "description": "Weekly internet purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyInternetPurchase"
          },
          "weekly_contactless_purchase": {
            "description": "Weekly contactless purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyContactlessPurchase"
          },
          "monthly_purchase": {
            "description": "Monthly purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyPurchase"
          },
          "monthly_withdrawal": {
            "description": "Monthly withdrawal amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyWithdrawal"
          },
          "monthly_internet_purchase": {
            "description": "Monthly internet purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyInternetPurchase"
          },
          "monthly_contactless_purchase": {
            "description": "Monthly contactless purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyContactlessPurchase"
          }
        },
        "title": "AccountLimits represents daily, weekly and monthly limits.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AccountLimitsByProductIDResponse": {
        "properties": {
          "credit_limit_max_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "CreditLimitMaxAmount"
          },
          "default_account_daily_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountDailyContactlessPurchaseLimit"
          },
          "default_account_daily_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountDailyInternetPurchaseLimit"
          },
          "default_account_daily_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountDailyPurchaseLimit"
          },
          "default_account_daily_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountDailyWithdrawalLimit"
          },
          "default_account_weekly_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountWeeklyContactlessPurchaseLimit"
          },
          "default_account_weekly_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountWeeklyInternetPurchaseLimit"
          },
          "default_account_weekly_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountWeeklyPurchaseLimit"
          },
          "default_account_weekly_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountWeeklyWithdrawalLimit"
          },
          "default_account_monthly_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountMonthlyContactlessPurchaseLimit"
          },
          "default_account_monthly_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountMonthlyInternetPurchaseLimit"
          },
          "default_account_monthly_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountMonthlyPurchaseLimit"
          },
          "default_account_monthly_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultAccountMonthlyWithdrawalLimit"
          },
          "max_account_daily_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountDailyContactlessPurchaseLimit"
          },
          "max_account_daily_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountDailyInternetPurchaseLimit"
          },
          "max_account_daily_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountDailyPurchaseLimit"
          },
          "max_account_daily_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountDailyWithdrawalLimit"
          },
          "max_account_weekly_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountWeeklyContactlessPurchaseLimit"
          },
          "max_account_weekly_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountWeeklyInternetPurchaseLimit"
          },
          "max_account_weekly_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountWeeklyPurchaseLimit"
          },
          "max_account_weekly_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountWeeklyWithdrawalLimit"
          },
          "max_account_monthly_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountMonthlyContactlessPurchaseLimit"
          },
          "max_account_monthly_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountMonthlyInternetPurchaseLimit"
          },
          "max_account_monthly_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountMonthlyPurchaseLimit"
          },
          "max_account_monthly_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxAccountMonthlyWithdrawalLimit"
          },
          "program_type": {
            "type": "string",
            "x-go-name": "ProgramType"
          },
          "weekly_limits_enabled": {
            "type": "boolean",
            "x-go-name": "WeeklyLimitsEnabled"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AccountLimitsUsage": {
        "properties": {
          "daily": {
            "format": "double",
            "type": "number",
            "x-go-name": "Daily"
          },
          "weekly": {
            "format": "double",
            "type": "number",
            "x-go-name": "Weekly"
          },
          "monthly": {
            "format": "double",
            "type": "number",
            "x-go-name": "Monthly"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AccountStatementRecord": {
        "properties": {
          "id": {
            "description": "Record ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "card_id": {
            "description": "Card ID to which this record belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "type": {
            "description": "Record type",
            "enum": [
              "AccountAdjustment",
              "Authorization",
              "Transaction",
              "Fee"
            ],
            "type": "string",
            "x-go-name": "Type"
          },
          "group": {
            "description": "Group of the record",
            "enum": [
              "Withdraw",
              "Deposit",
              "Purchase",
              "InternetPurchase",
              "Other",
              "PINManagement",
              "Refund",
              "AuthorizationATMBalanceInquiryFixedFee",
              "AuthorizationATMWithdrawalFixedFee",
              "AuthorizationATMDeclinedFixedFee",
              "AuthorizationDeclinedFixedFee",
              "AuthorizationForeignExchangePercentageFee",
              "AuthorizationATMWithdrawalPercentageFee",
              "CardReplacementFixedFee",
              "PINChangeFixedFee",
              "AuthorizationATMWithdrawalComplexFee",
              "CardUsageFixedFee",
              "CardIssuanceFixedFee",
              "PaymentPercentageFee",
              "AuthorizationATMWithdrawalEEAComplexFee",
              "AuthorizationATMWithdrawalInternationalComplexFee",
              "PaymentEEAComplexFee",
              "PaymentInternationalComplexFee",
              "PaymentInternationalFixedFee",
              "PaymentEEAFixedFee",
              "PricingPlanFee",
              "AdditionalVirtualCardsFee",
              "AuthorizationEEAFixedFee",
              "AuthorizationInternationalFixedFee",
              "AccountTransferFee",
              "ZeroAuthorizationEEAFixedFee",
              "ZeroAuthorizationInternationalFixedFee",
              "Remind3DSPasswordFixedFee",
              "RemindPINFixedFee",
              "CardExpressDeliveryFixedFee",
              "CardDeliveryFixedFee",
              "AvailableFundsRefundFee",
              "ChargebackProcessingFee",
              "OtherAdministrativeRequestFee",
              "IncomingSEPAPaymentPercentageFee",
              "MerchantWhitelistFee",
              "AdditionalBINConfigurationFee",
              "AdditionalBINMaintenanceFee",
              "IndustryFee",
              "NewEmployeeAdditionFee",
              "MonthlyFeePerEmployee",
              "MonthlyServiceFee",
              "ExclusiveBINFee",
              "ExclusiveSharedBINFee",
              "DedicatedBINRangeFee",
              "SharedBINRangeFee",
              "IncomingSEPAPaymentFixedFee",
              "CardRenewalFixedFee",
              "AccountClosureFee",
              "CardTopUpPercentageFee",
              "Card3DSecureAttemptFixedFee"
            ],
            "type": "string",
            "x-go-name": "Group"
          },
          "date": {
            "description": "Date-time the record was made",
            "format": "date-time",
            "type": "string",
            "x-go-name": "Date"
          },
          "transaction_amount": {
            "description": "Transaction amount",
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionAmount"
          },
          "transaction_currency_code": {
            "description": "Transaction currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "TransactionCurrencyCode"
          },
          "account_amount": {
            "description": "Account amount",
            "format": "double",
            "type": "number",
            "x-go-name": "AccountAmount"
          },
          "account_currency_code": {
            "description": "Account currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "AccountCurrencyCode"
          },
          "merchant_category_code": {
            "$ref": "#/definitions/MerchantCategoryCode"
          },
          "merchant_id": {
            "description": "Merchant ID",
            "type": "string",
            "x-go-name": "MerchantID"
          },
          "terminal_id": {
            "description": "Terminal ID",
            "type": "string",
            "x-go-name": "TerminalID"
          },
          "merchant_name": {
            "description": "Merchant name",
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "merchant_city": {
            "description": "Merchant city",
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_country_code": {
            "description": "Merchant country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "description": {
            "description": "Description (used for account adjustments)",
            "type": "string",
            "x-go-name": "Description"
          },
          "original_authorization_id": {
            "description": "Authorization ID (used for transactions and authorization reversals to link with original authorization)",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "OriginalAuthorizationID"
          },
          "is_reversal": {
            "description": "Shows whether this is reversal authorization or not",
            "type": "boolean",
            "x-go-name": "IsReversal"
          },
          "is_declined": {
            "description": "Shows whether this is declined authorization or not",
            "type": "boolean",
            "x-go-name": "IsDeclined"
          },
          "is_cleared": {
            "description": "Shows whether this is cleared authorization or not",
            "type": "boolean",
            "x-go-name": "IsCleared"
          },
          "marked_for_dispute_at": {
            "description": "Date-time the transaction was marked for dispute",
            "format": "date-time",
            "type": "string",
            "x-go-name": "MarkedForDisputeAt"
          },
          "marked_for_dispute_by": {
            "description": "Marked for dispute by",
            "type": "string",
            "x-go-name": "MarkedForDisputeBy"
          },
          "status": {
            "description": "Status",
            "enum": [
              "Completed",
              "Pending",
              "Canceled"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "response": {
            "description": "Response",
            "enum": [
              "Approved",
              "Declined"
            ],
            "type": "string",
            "x-go-name": "Response"
          },
          "response_code": {
            "description": "Response Code",
            "type": "string",
            "x-go-name": "ResponseCode"
          },
          "account_external_id": {
            "description": "Account external ID",
            "type": "string",
            "x-go-name": "AccountExternalID"
          },
          "masked_card_number": {
            "description": "Masked card number",
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "has_payment_document_files": {
            "description": "Shows whether this record has payment document files",
            "type": "boolean",
            "x-go-name": "HasPaymentDocumentFiles"
          },
          "has_payment_notes": {
            "description": "Shows whether this record has payment notes",
            "type": "boolean",
            "x-go-name": "HasPaymentNotes"
          },
          "card_name": {
            "description": "Card name",
            "type": "string",
            "x-go-name": "CardName"
          },
          "embossing_name": {
            "description": "Card embossing name",
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "embossing_first_name": {
            "description": "Card embossing first name",
            "type": "string",
            "x-go-name": "EmbossingFirstName"
          },
          "embossing_last_name": {
            "description": "Card embossing last name",
            "type": "string",
            "x-go-name": "EmbossingLastName"
          },
          "embossing_company_name": {
            "description": "Card embossing company name",
            "type": "string",
            "x-go-name": "EmbossingCompanyName"
          },
          "sub_type": {
            "description": "Sub type",
            "type": "string",
            "x-go-name": "SubType"
          },
          "purchase_date": {
            "description": "Date-time the payment was done",
            "format": "date-time",
            "type": "string",
            "x-go-name": "PurchaseDate"
          },
          "exchange_rate": {
            "description": "Exchange rate",
            "format": "double",
            "type": "number",
            "x-go-name": "ExchangeRate"
          },
          "enriched_merchant_data": {
            "$ref": "#/definitions/EnrichedMerchantData"
          },
          "total_amount": {
            "description": "Total amount (account amount + foreign exchange fee)",
            "format": "double",
            "type": "number",
            "x-go-name": "TotalAmount"
          }
        },
        "title": "AccountStatementRecord represents an account statement record.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AccountToAccountTransferNotification": {
        "properties": {
          "data": {
            "$ref": "#/definitions/EventAccountToAccountTransfer"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "account_adjustment"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "account_to_account_payment",
              "mobile_payment"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "AccountTopUpDetails": {
        "properties": {
          "iban": {
            "description": "Account bank IBAN",
            "maxLength": 35,
            "type": "string",
            "x-go-name": "IBAN"
          },
          "swift_code": {
            "description": "Account bank swift code",
            "maxLength": 11,
            "type": "string",
            "x-go-name": "SwiftCode"
          },
          "receiver_name": {
            "description": "Account payment receiver name",
            "maxLength": 200,
            "type": "string",
            "x-go-name": "ReceiverName"
          },
          "payment_details": {
            "description": "Account payment details",
            "maxLength": 200,
            "type": "string",
            "x-go-name": "PaymentDetails"
          },
          "bank_name": {
            "description": "Account bank name",
            "maxLength": 200,
            "type": "string",
            "x-go-name": "BankName"
          },
          "bank_address": {
            "description": "Account bank address",
            "maxLength": 200,
            "type": "string",
            "x-go-name": "BankAddress"
          },
          "registration_number": {
            "description": "Account bank registration number",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "RegistrationNumber"
          }
        },
        "required": [
          "iban",
          "swift_code",
          "receiver_name",
          "bank_name",
          "bank_address",
          "registration_number"
        ],
        "title": "AccountTopUpDetails represents account top up details as IBAN, swift code, etc...",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ActivateCardByCVVRequest": {
        "properties": {
          "cvv": {
            "description": "Card CVV. Must be RSA encrypted and base64 encoded.",
            "type": "string",
            "x-go-name": "CVV"
          }
        },
        "required": [
          "cvv"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ActivateCardByCVVResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "ActivateCardByCVVResponse is the response to the request to activate a card by CVV.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ActivateCardByLastFourDigitsRequest": {
        "properties": {
          "last_four_digits": {
            "description": "Last four digits",
            "type": "string",
            "x-go-name": "LastFourDigits"
          }
        },
        "required": [
          "last_four_digits"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ActivateCardByLastFourDigitsResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ActivateCardEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/ActivateCardEventView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "activate"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "card"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ActivateCardEventView": {
        "properties": {
          "3d_secure_settings": {
            "$ref": "#/definitions/CardEventCard3DSecureSettings"
          },
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_metadata_profile_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "card_processor_card_id": {
            "type": "string",
            "x-go-name": "CardProcessorCardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "delivery_address": {
            "$ref": "#/definitions/CardEventDeliveryAddress"
          },
          "embossing_name": {
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "expiry_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_disposable": {
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "is_paid": {
            "type": "boolean",
            "x-go-name": "IsPaid"
          },
          "limits": {
            "$ref": "#/definitions/CardEventLimits"
          },
          "masked_card_number": {
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "personalization_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "predecessor_card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "renew_automatically": {
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "security": {
            "$ref": "#/definitions/CardEventSecurity"
          },
          "status": {
            "enum": [
              "Active"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "type": {
            "enum": [
              "ChipAndPin",
              "ChipAndPinAnonymous",
              "Sticker",
              "Virtual"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "is_paid",
          "created_at",
          "created_by",
          "expiry_date",
          "is_disposable",
          "masked_card_number",
          "renew_automatically",
          "personalization_product_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ActivateCardResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "ActivateCardResponse is the response to the request to activate a card.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ActivatePersonResponse": {
        "properties": {
          "person": {
            "$ref": "#/definitions/Person"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ActivateTokenRequest": {
        "properties": {
          "reason": {
            "description": "Activate reason.",
            "maxLength": 254,
            "type": "string",
            "x-go-name": "Reason"
          }
        },
        "required": [
          "reason"
        ],
        "title": "ActivateTokenRequest represents activate token request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ActivateTokenResponse": {
        "properties": {
          "token": {
            "$ref": "#/definitions/Token"
          }
        },
        "title": "ActivateTokenResponse returns related token.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ActivityType": {
        "enum": [
          "ActivitiesOfExtraterritorialOrganizationsAndBodies",
          "AdultEntertainment",
          "AdvertisingMarketing",
          "AgricultureForestryFisheries",
          "AlcoholicBeveragesAndTobacco",
          "AlimentaryProducts",
          "ArchitectureEngineeringAndTechnicalConsultingInTheseAreas",
          "ArtworksCollectionItemsAntiques",
          "BeverageService",
          "BuildingAndTerritoryMaintenance",
          "Charity",
          "CinemaVideoFilmsAndTvProgramsSoundRecordingAndRecordedMusic",
          "ClothingAndFootwear",
          "ComputerProgrammingConsultingAndOtherRelatedServices",
          "ConstructionActivities",
          "CreativeWorkAndArt",
          "CreditsOrMonetaryIntermediation",
          "Crowdfunding",
          "Cryptocurrencies",
          "DataProcessingWebPortals",
          "Design",
          "DomesticAppliancesAndElectronics",
          "Education",
          "EmbassiesConsulates",
          "Energy",
          "EngineeringTests",
          "EventManagement",
          "FoodDelivery",
          "FuelAndGas",
          "FundManagement",
          "GamblingGamesAndBetting",
          "HealthCareAndSocialServices",
          "HighValueGoods",
          "HoldingCompaniesAndPropertyManagement",
          "HotelsAndRelatedAccommodation",
          "HrAgencies",
          "InformationAndReferenceServices",
          "Insurance",
          "InvestmentActivities",
          "LandscapeDesign",
          "LegalServicesAndAccounting",
          "LibrariesArchivesMuseums",
          "LodgingAndCateringServices",
          "ManagementConsulting",
          "Manufacturing",
          "MedicationAndPharmaceuticals",
          "MiningIndustry",
          "MotorVehicles",
          "NonProfitOrganizationFoundations",
          "NonProfitOrganizationOther",
          "OffshoreServices",
          "OtherAccommodationTypes",
          "OtherAdministrativeActivities",
          "OtherFinancialServicesExcludingInsuranceAndPensionFundServices",
          "OtherGoods",
          "OtherInformationServices",
          "OtherProfessionalScientificAndTechnicalActivities",
          "OtherServices",
          "PensionFunds",
          "Photography",
          "PoliticalOrganization",
          "PrivateBanking",
          "ProfessionalMembershipOrganization",
          "PublicAdministrationAndDefense",
          "PublishingActivities",
          "RadioBroadcasting",
          "RealEstateActivities",
          "RealEstateLeasingAndManagement",
          "RealEstatePurchaseAndSale",
          "RecreationAndEntertainment",
          "ReligiousOrganization",
          "RentingLeasing",
          "RepairingServices",
          "Restaurants",
          "ScientificResearchAndDevelopment",
          "SecurityAndInvestigation",
          "ShortTermAccommodationServices",
          "Software",
          "Sport",
          "SupportingActivitiesRelatedToFinancialServices",
          "Telecommunications",
          "TourOperatorTravelAgent",
          "TouristCampsRecreationAndEntertainmentParks",
          "TradeUnion",
          "TranslationServices",
          "TransportationAndStorage",
          "TrustsFundsAndOtherRelatedFinancialFacilities",
          "ValuablesJewelry",
          "WaterSupplySewerageWasteCollectionAndDistribution"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "AddCompanyCorporateDocumentRequest": {
        "properties": {
          "type": {
            "description": "Document type",
            "enum": [
              "RegistrationIncorporationCertificate",
              "BeneficialOwnersCertificate"
            ],
            "type": "string",
            "x-go-name": "Type"
          },
          "file": {
            "$ref": "#/definitions/CorporateDocumentFile"
          }
        },
        "required": [
          "type",
          "file"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AddCompanyCorporateDocumentResponse": {
        "properties": {
          "corporate_document": {
            "$ref": "#/definitions/CompanyCorporateDocument"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AddPaymentDocumentsResponse": {
        "properties": {
          "payment_documents": {
            "items": {
              "$ref": "#/definitions/PaymentDocument"
            },
            "type": "array",
            "x-go-name": "PaymentDocuments"
          }
        },
        "title": "AddPaymentDocumentsResponse is the response to the request to add a new payment documents.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AddPaymentMetadata": {
        "properties": {
          "key": {
            "enum": [
              "note"
            ],
            "type": "string",
            "x-go-name": "Key"
          },
          "value": {
            "maxLength": 300,
            "type": "string",
            "x-go-name": "Value"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AddPaymentMetadataRequest": {
        "properties": {
          "payment_id": {
            "description": "Payment ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PaymentID"
          },
          "payment_type": {
            "$ref": "#/definitions/PaymentType"
          },
          "metadata": {
            "description": "Payment metadata",
            "items": {
              "$ref": "#/definitions/AddPaymentMetadata"
            },
            "minimum": 1,
            "type": "array",
            "x-go-name": "PaymentMetadata"
          }
        },
        "required": [
          "payment_id",
          "payment_type",
          "metadata"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AddPaymentMetadataResponse": {
        "properties": {
          "payment": {
            "$ref": "#/definitions/Payment"
          }
        },
        "title": "AddPaymentMetadataResponse is the response to the request to add a new payment metadata.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AddRepresentative": {
        "allOf": [
          {
            "properties": {
              "birth_date": {
                "description": "Birthdate. Must be in 2006-01-02 format. Must be at least 16 years old.",
                "format": "date",
                "type": "string",
                "x-go-name": "BirthDate"
              },
              "email": {
                "description": "Email.",
                "maxLength": 255,
                "type": "string",
                "x-go-name": "Email"
              },
              "first_name": {
                "description": "Representative first name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "FirstName"
              },
              "is_adverse_media_involved": {
                "description": "Is Adverse Media Involved. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsAdverseMediaInvolved"
              },
              "is_member_of_the_board": {
                "description": "Is member of the board?",
                "type": "boolean",
                "x-go-name": "IsMemberOfTheBoard"
              },
              "is_politically_exposed": {
                "description": "Is Politically Exposed. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsPoliticallyExposed"
              },
              "is_representative": {
                "description": "Is representative?",
                "type": "boolean",
                "x-go-name": "IsRepresentative"
              },
              "is_sanctions_related": {
                "description": "Is Sanctions Related. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsSanctionsRelated"
              },
              "is_shareholder": {
                "description": "Is shareholder",
                "type": "boolean",
                "x-go-name": "IsShareholder"
              },
              "is_ultimate_beneficial_owner": {
                "description": "Is ultimate beneficial owner?",
                "type": "boolean",
                "x-go-name": "IsUltimateBeneficialOwner"
              },
              "last_name": {
                "description": "Representative last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "LastName"
              },
              "middle_name": {
                "description": "Representative middle name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "MiddleName"
              },
              "mobile": {
                "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
                "type": "string",
                "x-go-name": "Mobile"
              },
              "percentage_owned": {
                "description": "Percentage owned. \u003cbr\u003e\n__If representative is shareholder, minimum value is 1.__",
                "format": "float",
                "maximum": 100,
                "minimum": 0,
                "type": "number",
                "x-go-name": "PercentageOwned"
              },
              "position": {
                "description": "Representative position. \u003cbr\u003e\n__Field is required for NonRegulated WhiteLabel partners.__",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "Position"
              },
              "residence_country_code": {
                "description": "Residence country code. Must be in ISO 3166-1 Alpha-3 code standard",
                "enum": [
                  "AFG",
                  "ALA",
                  "ALB",
                  "DZA",
                  "ASM",
                  "AND",
                  "AGO",
                  "AIA",
                  "ATA",
                  "ATG",
                  "ARG",
                  "ARM",
                  "ABW",
                  "AUS",
                  "AUT",
                  "AZE",
                  "BHS",
                  "BHR",
                  "BGD",
                  "BRB",
                  "BLR",
                  "BEL",
                  "BLZ",
                  "BEN",
                  "BMU",
                  "BTN",
                  "BOL",
                  "BES",
                  "BIH",
                  "BWA",
                  "BVT",
                  "BRA",
                  "IOT",
                  "BRN",
                  "BGR",
                  "BFA",
                  "BDI",
                  "CPV",
                  "KHM",
                  "CMR",
                  "CAN",
                  "CYM",
                  "CAF",
                  "TCD",
                  "CHL",
                  "CHN",
                  "CXR",
                  "CCK",
                  "COL",
                  "COM",
                  "COG",
                  "COD",
                  "COK",
                  "CRI",
                  "CIV",
                  "HRV",
                  "CUB",
                  "CUW",
                  "CYP",
                  "CZE",
                  "DNK",
                  "DJI",
                  "DMA",
                  "DOM",
                  "ECU",
                  "EGY",
                  "SLV",
                  "GNQ",
                  "ERI",
                  "EST",
                  "ETH",
                  "FLK",
                  "FRO",
                  "FJI",
                  "FIN",
                  "FRA",
                  "GUF",
                  "PYF",
                  "ATF",
                  "GAB",
                  "GMB",
                  "GEO",
                  "DEU",
                  "GHA",
                  "GIB",
                  "GRC",
                  "GRL",
                  "GRD",
                  "GLP",
                  "GUM",
                  "GTM",
                  "GGY",
                  "GIN",
                  "GNB",
                  "GUY",
                  "HTI",
                  "HMD",
                  "VAT",
                  "HND",
                  "HKG",
                  "HUN",
                  "ISL",
                  "IND",
                  "IDN",
                  "IRN",
                  "IRQ",
                  "IRL",
                  "IMN",
                  "ISR",
                  "ITA",
                  "JAM",
                  "JPN",
                  "JEY",
                  "JOR",
                  "KAZ",
                  "KEN",
                  "KIR",
                  "PRK",
                  "KOR",
                  "KWT",
                  "KGZ",
                  "LAO",
                  "LVA",
                  "LBN",
                  "LSO",
                  "LBR",
                  "LBY",
                  "LIE",
                  "LTU",
                  "LUX",
                  "MAC",
                  "MKD",
                  "MDG",
                  "MWI",
                  "MYS",
                  "MDV",
                  "MLI",
                  "MLT",
                  "MHL",
                  "MTQ",
                  "MRT",
                  "MUS",
                  "MYT",
                  "MEX",
                  "FSM",
                  "MDA",
                  "MCO",
                  "MNG",
                  "MNE",
                  "MSR",
                  "MAR",
                  "MOZ",
                  "MMR",
                  "NAM",
                  "NRU",
                  "NPL",
                  "NLD",
                  "NCL",
                  "NZL",
                  "NIC",
                  "NER",
                  "NGA",
                  "NIU",
                  "NFK",
                  "MNP",
                  "NOR",
                  "OMN",
                  "PAK",
                  "PLW",
                  "PSE",
                  "PAN",
                  "PNG",
                  "PRY",
                  "PER",
                  "PHL",
                  "PCN",
                  "POL",
                  "PRT",
                  "PRI",
                  "QAT",
                  "REU",
                  "ROU",
                  "RUS",
                  "RWA",
                  "BLM",
                  "SHN",
                  "KNA",
                  "LCA",
                  "MAF",
                  "SPM",
                  "VCT",
                  "WSM",
                  "SMR",
                  "STP",
                  "SAU",
                  "SEN",
                  "SRB",
                  "SYC",
                  "SLE",
                  "SGP",
                  "SXM",
                  "SVK",
                  "SVN",
                  "SLB",
                  "SOM",
                  "ZAF",
                  "SGS",
                  "SSD",
                  "ESP",
                  "LKA",
                  "SDN",
                  "SUR",
                  "SJM",
                  "SWZ",
                  "SWE",
                  "CHE",
                  "SYR",
                  "TWN",
                  "TJK",
                  "TZA",
                  "THA",
                  "TLS",
                  "TGO",
                  "TKL",
                  "TON",
                  "TTO",
                  "TUN",
                  "TUR",
                  "TKM",
                  "TCA",
                  "TUV",
                  "UGA",
                  "UKR",
                  "ARE",
                  "GBR",
                  "USA",
                  "UMI",
                  "URY",
                  "UZB",
                  "VUT",
                  "VEN",
                  "VNM",
                  "VGB",
                  "VIR",
                  "WLF",
                  "ESH",
                  "YEM",
                  "ZMB",
                  "ZWE",
                  "UNK",
                  "XKX",
                  "ANT"
                ],
                "maxLength": 3,
                "type": "string",
                "x-go-name": "ResidenceCountryCode"
              },
              "title": {
                "description": "Representative title. \u003cbr\u003e\n__Field is required for NonRegulated WhiteLabel partners.__",
                "enum": [
                  "Mr.",
                  "Ms.",
                  "Mrs.",
                  "Miss"
                ],
                "maxLength": 4,
                "type": "string",
                "x-go-name": "Title"
              }
            },
            "required": [
              "first_name",
              "last_name",
              "birth_date",
              "residence_country_code"
            ],
            "type": "object"
          }
        ],
        "x-go-package": "github.com/wallester/api/model"
      },
      "AddRepresentativeSwaggerModel": {
        "allOf": [
          {
            "properties": {
              "birth_date": {
                "description": "Birthdate. Must be in 2006-01-02 format. Must be at least 16 years old.",
                "format": "date",
                "type": "string",
                "x-go-name": "BirthDate"
              },
              "email": {
                "description": "Email.",
                "maxLength": 255,
                "type": "string",
                "x-go-name": "Email"
              },
              "first_name": {
                "description": "Representative first name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "FirstName"
              },
              "is_adverse_media_involved": {
                "description": "Is Adverse Media Involved. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsAdverseMediaInvolved"
              },
              "is_member_of_the_board": {
                "description": "Is member of the board?",
                "type": "boolean",
                "x-go-name": "IsMemberOfTheBoard"
              },
              "is_politically_exposed": {
                "description": "Is Politically Exposed. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsPoliticallyExposed"
              },
              "is_representative": {
                "description": "Is representative?",
                "type": "boolean",
                "x-go-name": "IsRepresentative"
              },
              "is_sanctions_related": {
                "description": "Is Sanctions Related. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsSanctionsRelated"
              },
              "is_shareholder": {
                "description": "Is shareholder",
                "type": "boolean",
                "x-go-name": "IsShareholder"
              },
              "is_ultimate_beneficial_owner": {
                "description": "Is ultimate beneficial owner?",
                "type": "boolean",
                "x-go-name": "IsUltimateBeneficialOwner"
              },
              "last_name": {
                "description": "Representative last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "LastName"
              },
              "middle_name": {
                "description": "Representative middle name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "MiddleName"
              },
              "mobile": {
                "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
                "type": "string",
                "x-go-name": "Mobile"
              },
              "percentage_owned": {
                "description": "Percentage owned. \u003cbr\u003e\n__If representative is shareholder, minimum value is 1.__",
                "format": "float",
                "maximum": 100,
                "minimum": 0,
                "type": "number",
                "x-go-name": "PercentageOwned"
              },
              "position": {
                "description": "Representative position. \u003cbr\u003e\n__Field is required for NonRegulated WhiteLabel partners.__",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "Position"
              },
              "residence_country_code": {
                "description": "Residence country code. Must be in ISO 3166-1 Alpha-3 code standard",
                "enum": [
                  "AFG",
                  "ALA",
                  "ALB",
                  "DZA",
                  "ASM",
                  "AND",
                  "AGO",
                  "AIA",
                  "ATA",
                  "ATG",
                  "ARG",
                  "ARM",
                  "ABW",
                  "AUS",
                  "AUT",
                  "AZE",
                  "BHS",
                  "BHR",
                  "BGD",
                  "BRB",
                  "BLR",
                  "BEL",
                  "BLZ",
                  "BEN",
                  "BMU",
                  "BTN",
                  "BOL",
                  "BES",
                  "BIH",
                  "BWA",
                  "BVT",
                  "BRA",
                  "IOT",
                  "BRN",
                  "BGR",
                  "BFA",
                  "BDI",
                  "CPV",
                  "KHM",
                  "CMR",
                  "CAN",
                  "CYM",
                  "CAF",
                  "TCD",
                  "CHL",
                  "CHN",
                  "CXR",
                  "CCK",
                  "COL",
                  "COM",
                  "COG",
                  "COD",
                  "COK",
                  "CRI",
                  "CIV",
                  "HRV",
                  "CUB",
                  "CUW",
                  "CYP",
                  "CZE",
                  "DNK",
                  "DJI",
                  "DMA",
                  "DOM",
                  "ECU",
                  "EGY",
                  "SLV",
                  "GNQ",
                  "ERI",
                  "EST",
                  "ETH",
                  "FLK",
                  "FRO",
                  "FJI",
                  "FIN",
                  "FRA",
                  "GUF",
                  "PYF",
                  "ATF",
                  "GAB",
                  "GMB",
                  "GEO",
                  "DEU",
                  "GHA",
                  "GIB",
                  "GRC",
                  "GRL",
                  "GRD",
                  "GLP",
                  "GUM",
                  "GTM",
                  "GGY",
                  "GIN",
                  "GNB",
                  "GUY",
                  "HTI",
                  "HMD",
                  "VAT",
                  "HND",
                  "HKG",
                  "HUN",
                  "ISL",
                  "IND",
                  "IDN",
                  "IRN",
                  "IRQ",
                  "IRL",
                  "IMN",
                  "ISR",
                  "ITA",
                  "JAM",
                  "JPN",
                  "JEY",
                  "JOR",
                  "KAZ",
                  "KEN",
                  "KIR",
                  "PRK",
                  "KOR",
                  "KWT",
                  "KGZ",
                  "LAO",
                  "LVA",
                  "LBN",
                  "LSO",
                  "LBR",
                  "LBY",
                  "LIE",
                  "LTU",
                  "LUX",
                  "MAC",
                  "MKD",
                  "MDG",
                  "MWI",
                  "MYS",
                  "MDV",
                  "MLI",
                  "MLT",
                  "MHL",
                  "MTQ",
                  "MRT",
                  "MUS",
                  "MYT",
                  "MEX",
                  "FSM",
                  "MDA",
                  "MCO",
                  "MNG",
                  "MNE",
                  "MSR",
                  "MAR",
                  "MOZ",
                  "MMR",
                  "NAM",
                  "NRU",
                  "NPL",
                  "NLD",
                  "NCL",
                  "NZL",
                  "NIC",
                  "NER",
                  "NGA",
                  "NIU",
                  "NFK",
                  "MNP",
                  "NOR",
                  "OMN",
                  "PAK",
                  "PLW",
                  "PSE",
                  "PAN",
                  "PNG",
                  "PRY",
                  "PER",
                  "PHL",
                  "PCN",
                  "POL",
                  "PRT",
                  "PRI",
                  "QAT",
                  "REU",
                  "ROU",
                  "RUS",
                  "RWA",
                  "BLM",
                  "SHN",
                  "KNA",
                  "LCA",
                  "MAF",
                  "SPM",
                  "VCT",
                  "WSM",
                  "SMR",
                  "STP",
                  "SAU",
                  "SEN",
                  "SRB",
                  "SYC",
                  "SLE",
                  "SGP",
                  "SXM",
                  "SVK",
                  "SVN",
                  "SLB",
                  "SOM",
                  "ZAF",
                  "SGS",
                  "SSD",
                  "ESP",
                  "LKA",
                  "SDN",
                  "SUR",
                  "SJM",
                  "SWZ",
                  "SWE",
                  "CHE",
                  "SYR",
                  "TWN",
                  "TJK",
                  "TZA",
                  "THA",
                  "TLS",
                  "TGO",
                  "TKL",
                  "TON",
                  "TTO",
                  "TUN",
                  "TUR",
                  "TKM",
                  "TCA",
                  "TUV",
                  "UGA",
                  "UKR",
                  "ARE",
                  "GBR",
                  "USA",
                  "UMI",
                  "URY",
                  "UZB",
                  "VUT",
                  "VEN",
                  "VNM",
                  "VGB",
                  "VIR",
                  "WLF",
                  "ESH",
                  "YEM",
                  "ZMB",
                  "ZWE",
                  "UNK",
                  "XKX",
                  "ANT"
                ],
                "maxLength": 3,
                "type": "string",
                "x-go-name": "ResidenceCountryCode"
              },
              "title": {
                "description": "Representative title. \u003cbr\u003e\n__Field is required for NonRegulated WhiteLabel partners.__",
                "enum": [
                  "Mr.",
                  "Ms.",
                  "Mrs.",
                  "Miss"
                ],
                "maxLength": 4,
                "type": "string",
                "x-go-name": "Title"
              }
            },
            "required": [
              "first_name",
              "last_name",
              "birth_date",
              "residence_country_code"
            ],
            "type": "object"
          }
        ],
        "x-go-package": "github.com/wallester/api/model"
      },
      "AddRepresentativesRequest": {
        "properties": {
          "representatives": {
            "description": "Representatives to be added. At least 1 representative is always required for the company.",
            "items": {
              "$ref": "#/definitions/AddRepresentative"
            },
            "type": "array",
            "x-go-name": "Representatives"
          }
        },
        "required": [
          "representatives"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AddRepresentativesResponse": {
        "properties": {
          "representatives": {
            "items": {
              "$ref": "#/definitions/Representative"
            },
            "type": "array",
            "x-go-name": "Representatives"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AddRepresentativesSwaggerRequest": {
        "properties": {
          "representatives": {
            "description": "Representatives to be added. \u003cbr\u003e\nAt least 1 representative is always required for the company.",
            "items": {
              "$ref": "#/definitions/AddRepresentativeSwaggerModel"
            },
            "type": "array",
            "x-go-name": "Representatives"
          }
        },
        "required": [
          "representatives"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Address": {
        "description": "Address",
        "properties": {
          "country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "CountryCode"
          },
          "address1": {
            "description": "Address",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "description": "Address 2",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address2"
          },
          "city": {
            "description": "City",
            "maxLength": 35,
            "type": "string",
            "x-go-name": "City"
          },
          "postal_code": {
            "description": "Postal code",
            "maxLength": 10,
            "type": "string",
            "x-go-name": "PostalCode"
          }
        },
        "required": [
          "country_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AdjustAccountBalanceRequest": {
        "properties": {
          "external_id": {
            "description": "External ID. Must be unique.",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "amount": {
            "description": "Amount to be added to or subtracted from account balance.\nAmount cannot be equal to 0. Resulting account balance cannot exceed credit limit of account or be negative.",
            "format": "double",
            "maximum": 999000000,
            "minimum": -999000000,
            "type": "number",
            "x-go-name": "Amount"
          },
          "description": {
            "description": "Description, change reason, etc.",
            "maxLength": 256,
            "type": "string",
            "x-go-name": "Description"
          },
          "sender_name": {
            "description": "Sender name",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "SenderName"
          },
          "allow_negative_balance": {
            "description": "Allow negative balance",
            "type": "boolean",
            "x-go-name": "AllowNegativeBalance"
          }
        },
        "required": [
          "amount",
          "description"
        ],
        "title": "AdjustAccountBalanceRequest represents adjust account balance request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AdjustAccountBalanceResponse": {
        "properties": {
          "account": {
            "$ref": "#/definitions/Account"
          }
        },
        "title": "AdjustAccountBalanceResponse represents adjust account balance response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AdjustAccountBalanceWithAdjustmentRequest": {
        "properties": {
          "account_id": {
            "description": "Account ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "external_id": {
            "description": "External ID",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "amount": {
            "description": "Amount to be added or subtracted to/from account balance. Amount cannot be equal to 0.",
            "format": "double",
            "maximum": 999000000,
            "minimum": -999000000,
            "type": "number",
            "x-go-name": "Amount"
          },
          "description": {
            "description": "Description, change reason, etc.",
            "maxLength": 256,
            "type": "string",
            "x-go-name": "Description"
          },
          "sender_name": {
            "description": "Sender name",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "SenderName"
          },
          "allow_negative_balance": {
            "description": "Allow negative balance",
            "type": "boolean",
            "x-go-name": "AllowNegativeBalance"
          }
        },
        "required": [
          "account_id",
          "amount",
          "description"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AdjustAccountBalanceWithAdjustmentResponse": {
        "properties": {
          "account_adjustment": {
            "$ref": "#/definitions/AccountAdjustment"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AllowedCardDeliveryCountryCodesByProductIDResponse": {
        "properties": {
          "country_codes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "CountryCodes"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ApplePayIncentiveNotificationIncompleteProvisioning": {
        "properties": {
          "data": {
            "$ref": "#/definitions/IncentiveNotification"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "incentive_notification"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "incomplete_provisioning"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ApplePayIncentiveNotificationSuccessfulTransaction": {
        "properties": {
          "data": {
            "$ref": "#/definitions/IncentiveNotification"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "incentive_notification"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "successful_transaction"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ApplePayOrangeFlow": {
        "properties": {
          "data": {
            "$ref": "#/definitions/ApplePayToken"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "apple_pay_orange_flow"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "token"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ApplePayPushProvisioningRequest": {
        "properties": {
          "certificates": {
            "description": "Certificates is an array of certificates. Each element should contain the bytes of a DER encoded X.509 certificate.",
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "Certificates"
          },
          "nonce": {
            "description": "Nonce is a one time use nonce generated by Apple Servers. Base64 encoded.",
            "maxLength": 64,
            "type": "string",
            "x-go-name": "Nonce"
          },
          "nonce_signature": {
            "description": "NonceSignature is a device and account specific signature of the nonce. Base64 encoded.",
            "maxLength": 128,
            "type": "string",
            "x-go-name": "NonceSignature"
          }
        },
        "required": [
          "certificates",
          "nonce",
          "nonce_signature"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ApplePayPushProvisioningResponse": {
        "properties": {
          "encrypted_data": {
            "type": "string",
            "x-go-name": "EncryptedData"
          },
          "activation_data": {
            "type": "string",
            "x-go-name": "ActivationData"
          },
          "ephemeral_public_key": {
            "type": "string",
            "x-go-name": "EphemeralPublicKey"
          }
        },
        "title": "ApplePayPushProvisioningResponse returns encrypted payload, ephemeral public key and cryptographic OTP for the Wallet.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ApplePayToken": {
        "properties": {
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          }
        },
        "required": [
          "id",
          "card_id"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "AssignedTo": {
        "properties": {
          "id": {
            "description": "Admin user ID number",
            "format": "int64",
            "type": "integer",
            "x-go-name": "ID"
          },
          "uuid": {
            "description": "User ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "UUID"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Authorization": {
        "properties": {
          "id": {
            "description": "ID of the authorization",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "card_id": {
            "description": "ID of the card by which the payment authorization is effected",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "date": {
            "description": "Date-time in UTC when the payment authorization was effected",
            "format": "date-time",
            "type": "string",
            "x-go-name": "Date"
          },
          "expiration_date": {
            "description": "Latest date by which the payment authorization must be cleared. If not cleared, the blocked amount for this payment authorization will be released",
            "format": "date-time",
            "type": "string",
            "x-go-name": "ExpirationDate"
          },
          "type": {
            "description": "Type of payment under the Visa classification",
            "enum": [
              "Unknown",
              "payWaveLowValuePurchase",
              "payWaveHighValuePurchase",
              "eCommercePurchase",
              "AccountVerification",
              "UnattendedCardholderActivatedTerminal",
              "AutomatedFuelDispenser",
              "AutomatedFuelDispenserConfirmation",
              "ATMWithdrawal",
              "ATMBalanceInquiry",
              "MOTOPurchase",
              "RecurringPayment",
              "StatusCheck",
              "POSPurchase",
              "ManualCashPurchase",
              "PurchaseWithCashback",
              "QuasiCashPurchase",
              "PINChange",
              "PINUnblock",
              "CreditVoucherAndMerchandiseReturn",
              "CardToCardPaymentCredit",
              "CardToCardPaymentDebit"
            ],
            "type": "string",
            "x-go-name": "Type"
          },
          "transaction_amount": {
            "description": "Original payment authorization amount at the point of sale",
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionAmount"
          },
          "transaction_currency_code": {
            "description": "Currency code in ISO-4217 format, original payment authorization currency at the point of sale",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "TransactionCurrencyCode"
          },
          "account_amount": {
            "description": "Payment authorization amount converted to the Account currency for final settlement of the Account balance",
            "format": "double",
            "type": "number",
            "x-go-name": "AccountAmount"
          },
          "account_currency_code": {
            "description": "Currency code in ISO-4217 format, currency of the Account to which the card that is the source of the payment authorization is linked",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "AccountCurrencyCode"
          },
          "merchant_category_code": {
            "description": "Merchant Category Code (MCC)",
            "type": "string",
            "x-go-name": "MerchantCategoryCode"
          },
          "merchant_id": {
            "description": "ID of the merchant",
            "type": "string",
            "x-go-name": "MerchantID"
          },
          "terminal_id": {
            "description": "Point of Sale (POS) terminal ID",
            "type": "string",
            "x-go-name": "TerminalID"
          },
          "merchant_name": {
            "description": "Merchant’s name identified in Visa system (can be different from the legal name)",
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "merchant_city": {
            "description": "Merchant’s city name",
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_country_code": {
            "description": "Merchant's Country in ISO 3166-1 Alpha-3 format",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "response_code": {
            "description": "Approval or any other responses given by Wallester as the result of authorization attempt",
            "type": "string",
            "x-go-name": "ResponseCode"
          },
          "created_at": {
            "description": "Date-time in UTC when the payment authorization object was created at Wallester system",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "approved_amount": {
            "description": "Is used in case the partial payment authorisation is required, e.g. on automatic tank stations",
            "format": "double",
            "type": "number",
            "x-go-name": "ApprovedAmount"
          },
          "approval_code": {
            "description": "The code that links the transaction to the partial payment authorization",
            "type": "string",
            "x-go-name": "ApprovalCode"
          },
          "reserved_amount": {
            "description": "Original payment authorization amount at the point of sale in case the authorization was reverted by the merchant",
            "format": "double",
            "type": "number",
            "x-go-name": "ReservedAmount"
          },
          "threshold_amount": {
            "description": "Foreign exchange reserve to cover the difference between the rate at the time of authorization of payment and at clearance of the transaction",
            "format": "double",
            "type": "number",
            "x-go-name": "ThresholdAmount"
          },
          "reversed_amount": {
            "description": "Reversed amount",
            "format": "double",
            "type": "number",
            "x-go-name": "ReversedAmount"
          },
          "cleared_amount": {
            "description": "Original payment authorization amount indicated in the Visa clearance report",
            "format": "double",
            "type": "number",
            "x-go-name": "ClearedAmount"
          },
          "balance": {
            "description": "Balancing amount after clearing of the partial payment authorization (Balance = Approved amount - Reversed amount - Cleared amount)",
            "format": "double",
            "type": "number",
            "x-go-name": "Balance"
          },
          "group": {
            "description": "Authorization group",
            "enum": [
              "Withdraw",
              "Deposit",
              "Purchase",
              "InternetPurchase",
              "Other",
              "PINManagement",
              "Refund"
            ],
            "type": "string",
            "x-go-name": "Group"
          },
          "original_authorization_id": {
            "description": "Payment authorization ID assigned by Visa",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "OriginalAuthorizationID"
          },
          "retrieval_reference_number": {
            "description": "VISA payment authorization reference number",
            "type": "string",
            "x-go-name": "RetrievalReferenceNumber"
          },
          "marked_for_dispute_at": {
            "description": "Date-time in UTC when the authorization is accepted for dispute by Wallester",
            "format": "date-time",
            "type": "string",
            "x-go-name": "MarkedForDisputeAt"
          },
          "marked_for_dispute_by": {
            "description": "Reference ID who marked authorization for dispute",
            "type": "string",
            "x-go-name": "MarkedForDisputeBy"
          },
          "released_at": {
            "description": "Date-time in UTC when the blocked amount based on the payment authorization is released due to payment authorization was not cleared for transaction or by any other reason",
            "format": "date-time",
            "type": "string",
            "x-go-name": "ReleasedAt"
          },
          "is_ready_for_manual_release": {
            "description": "True means the payment authorization that was not cleared for the Transaction was manually released by the authorized Wallester officer",
            "type": "boolean",
            "x-go-name": "IsReadyForManualRelease"
          },
          "release_reason": {
            "description": "System information on the details of the release of the blocked amount",
            "type": "string",
            "x-go-name": "ReleaseReason"
          },
          "is_reversal": {
            "description": "True means the payment authorization was reverted (i.e. no cash out is expected), e.g. as the result of the return of purchases to the merchant",
            "type": "boolean",
            "x-go-name": "IsReversal"
          },
          "is_declined": {
            "description": "Indication of if the payment authorization is declined",
            "type": "boolean",
            "x-go-name": "IsDeclined"
          },
          "is_contactless": {
            "description": "Indication of if the payment authorization is effected as a result of contactless payment by the card",
            "type": "boolean",
            "x-go-name": "IsContactless"
          },
          "is_mass_transit": {
            "description": "True indicates that the payment authorization is effected in the public transportation and requires special handling",
            "type": "boolean",
            "x-go-name": "IsMassTransit"
          },
          "token_id": {
            "description": "Apple Pay or Google Pay token if the authorization is effected via a payment system",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "TokenID"
          },
          "is_3d_secure_used": {
            "description": "Indication of if the payment authorization is confirmed by 3D-secure",
            "type": "boolean",
            "x-go-name": "Is3DSecureUsed"
          },
          "is_pin_used": {
            "description": "Indication of if the payment authorizations confirmed by the use of the card PIN",
            "type": "boolean",
            "x-go-name": "IsPINUsed"
          },
          "fraud_result": {
            "$ref": "#/definitions/AuthorizationFraudResult"
          },
          "exchange_rate": {
            "description": "Exchange rate",
            "format": "double",
            "type": "number",
            "x-go-name": "ExchangeRate"
          },
          "has_payment_document_files": {
            "description": "Shows whether this authorization has payment document files attached to it",
            "type": "boolean",
            "x-go-name": "HasPaymentDocumentFiles"
          },
          "has_payment_notes": {
            "description": "Shows whether this record has payment notes",
            "type": "boolean",
            "x-go-name": "HasPaymentNotes"
          },
          "total_amount": {
            "description": "Total amount",
            "format": "double",
            "type": "number",
            "x-go-name": "TotalAmount"
          }
        },
        "title": "Authorization represents an authorization data for a card.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AuthorizationAdditionalInfo": {
        "properties": {
          "card_presence": {
            "type": "string",
            "x-go-name": "CardPresence"
          },
          "card_read_method": {
            "type": "string",
            "x-go-name": "CardReadMethod"
          },
          "cardholder_presence": {
            "type": "string",
            "x-go-name": "CardholderPresence"
          },
          "cardholder_verification_method": {
            "type": "string",
            "x-go-name": "CardholderVerificationMethod"
          },
          "terminal_card_capture_capability": {
            "type": "string",
            "x-go-name": "TerminalCardCaptureCapability"
          },
          "terminal_operating_environment": {
            "type": "string",
            "x-go-name": "TerminalOperatingEnvironment"
          },
          "terminal_primary_authentication_method": {
            "type": "string",
            "x-go-name": "TerminalPrimaryAuthenticationMethod"
          },
          "terminal_primary_card_read_method": {
            "type": "string",
            "x-go-name": "TerminalPrimaryCardReadMethod"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AuthorizationCard": {
        "properties": {
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "AuthorizationFraudResult": {
        "description": "AuthorizationFraudResult",
        "properties": {
          "risk_status": {
            "$ref": "#/definitions/FraudRiskStatus"
          },
          "risk_score": {
            "description": "RiskScore",
            "format": "int64",
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "x-go-name": "RiskScore"
          },
          "risk_zone": {
            "$ref": "#/definitions/FraudRiskZone"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "AuthorizationView": {
        "properties": {
          "data": {
            "$ref": "#/definitions/EventAuthorization"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "notification"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "authorization"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "AuthorizationWithEnrichedMerchant": {
        "allOf": [
          {
            "$ref": "#/definitions/Authorization"
          },
          {
            "properties": {
              "enriched_merchant_data": {
                "$ref": "#/definitions/EnrichedMerchantData"
              }
            },
            "type": "object"
          }
        ],
        "x-go-package": "github.com/wallester/api/model"
      },
      "BadRequest": {
        "properties": {
          "body": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Body is a collection of validation errors related to request body.",
            "type": "object",
            "x-go-name": "Body"
          },
          "header": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Header is a collection of validation errors related to request header.",
            "type": "object",
            "x-go-name": "Header"
          },
          "path": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Path is a collection of validation errors related to request path (URL).",
            "type": "object",
            "x-go-name": "Path"
          }
        },
        "title": "BadRequest maps to HTTP status bad request.",
        "type": "object",
        "x-go-package": "github.com/wallester/common/http"
      },
      "BatchDeliveryAddress": {
        "properties": {
          "first_name": {
            "description": "First name",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "last_name": {
            "description": "Last name",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "LastName"
          },
          "company_name": {
            "description": "Company name",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "CompanyName"
          },
          "address1": {
            "description": "Address",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "description": "Address #2",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address2"
          },
          "postal_code": {
            "description": "Postal code",
            "maxLength": 10,
            "type": "string",
            "x-go-name": "PostalCode"
          },
          "city": {
            "description": "City",
            "maxLength": 35,
            "type": "string",
            "x-go-name": "City"
          },
          "country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "CountryCode"
          },
          "dispatch_method": {
            "$ref": "#/definitions/BatchDispatchMethod"
          },
          "phone": {
            "description": "Phone number",
            "type": "string",
            "x-go-name": "Phone"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "address1",
          "postal_code",
          "city",
          "country_code"
        ],
        "title": "Card batch delivery address (required for physical cards).",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "BatchDispatchMethod": {
        "enum": [
          "BatchEconomy"
        ],
        "title": "Card batch dispatch method.",
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "BlockCardEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/BlockCardEventView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "block"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "card"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "BlockCardEventView": {
        "properties": {
          "3d_secure_settings": {
            "$ref": "#/definitions/CardEventCard3DSecureSettings"
          },
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_metadata_profile_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "card_processor_card_id": {
            "type": "string",
            "x-go-name": "CardProcessorCardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "delivery_address": {
            "$ref": "#/definitions/CardEventDeliveryAddress"
          },
          "embossing_name": {
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "expiry_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_disposable": {
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "is_paid": {
            "type": "boolean",
            "x-go-name": "IsPaid"
          },
          "limits": {
            "$ref": "#/definitions/CardEventLimits"
          },
          "masked_card_number": {
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "personalization_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "predecessor_card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "renew_automatically": {
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "security": {
            "$ref": "#/definitions/CardEventSecurity"
          },
          "status": {
            "enum": [
              "Blocked"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "type": {
            "enum": [
              "ChipAndPin",
              "ChipAndPinAnonymous",
              "Sticker",
              "Virtual"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "is_paid",
          "created_at",
          "created_by",
          "expiry_date",
          "is_disposable",
          "masked_card_number",
          "renew_automatically",
          "personalization_product_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "BlockCardRequest": {
        "properties": {
          "block_type": {
            "description": "Block type",
            "enum": [
              "BlockedByCardholder",
              "BlockedByCardholderViaPhone",
              "BlockedByCardUser",
              "BlockedByClient",
              "BlockedByIssuer",
              "Counterfeit",
              "Fraudulent",
              "Lost",
              "Stolen"
            ],
            "type": "string",
            "x-go-name": "APIBlockType"
          }
        },
        "required": [
          "block_type"
        ],
        "title": "BlockCardRequest is a request to block credit card.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "BlockCardResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "BlockCardResponse is the response to the request to block a credit card.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "BlockCardsBatchRequest": {
        "properties": {
          "card_ids": {
            "description": "Card IDs",
            "items": {
              "format": "uuid4",
              "type": "string"
            },
            "type": "array",
            "x-go-name": "CardIDs"
          },
          "block_type": {
            "description": "Block type",
            "enum": [
              "BlockedByCardholder",
              "BlockedByCardholderViaPhone",
              "BlockedByCardUser",
              "BlockedByClient",
              "BlockedByIssuer",
              "Counterfeit",
              "Fraudulent",
              "Lost",
              "Stolen"
            ],
            "type": "string",
            "x-go-name": "APIBlockType"
          }
        },
        "required": [
          "card_ids",
          "block_type"
        ],
        "title": "BlockCardsBatchRequest is a request to block a batch of credit cards.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "BlockCardsBatchResponse": {
        "properties": {
          "cards": {
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          }
        },
        "title": "BlockCardsBatchResponse is the response to the request to block a batch of credit cards.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CVV2Result": {
        "enum": [
          "M",
          "N",
          "P"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "CancelFee": {
        "properties": {
          "data": {
            "$ref": "#/definitions/CancelFeeView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "cancel"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "fee"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "CancelFeeView": {
        "properties": {
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "amount": {
            "format": "double",
            "maximum": 0,
            "type": "number",
            "x-go-name": "Amount"
          },
          "authorization_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AuthorizationID"
          },
          "canceled_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CanceledAt"
          },
          "canceled_reason": {
            "type": "string",
            "x-go-name": "CanceledReason"
          },
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "completed_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CompletedAt"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "CurrencyCode"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "status": {
            "enum": [
              "Canceled"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "transaction_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "TransactionID"
          },
          "type": {
            "$ref": "#/definitions/FeeType"
          },
          "updated_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "UpdatedAt"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "amount",
          "currency_code",
          "account_id",
          "created_at"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "Card": {
        "properties": {
          "id": {
            "description": "Card ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "predecessor_card_id": {
            "description": "ID of the old card that has been replaced by this card",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "account_id": {
            "description": "ID of the Account where the card is linked to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "person_id": {
            "description": "ID of the Person who owns the card",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "external_id": {
            "description": "External ID",
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "type": {
            "$ref": "#/definitions/APICardType"
          },
          "name": {
            "description": "Non-unique name of the card assigned to it by the user for easier reference",
            "type": "string",
            "x-go-name": "Name"
          },
          "masked_card_number": {
            "description": "Truncated card number, e.g. 416548******0998",
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "reference_number": {
            "description": "Reserved for physical cards batch orders single reference for the order",
            "type": "string",
            "x-go-name": "ReferenceNumber"
          },
          "expiry_date": {
            "description": "Date-time in UTC when the card will expire.",
            "format": "date-time",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "block_type": {
            "description": "Indicates if the block is temporary or permanent. \"BlockedByCardUser\" is a temporary block that allows the user to unblock the card by any time",
            "enum": [
              "BlockedByCardholder",
              "BlockedByCardholderViaPhone",
              "BlockedByCardUser",
              "BlockedByClient",
              "BlockedByIssuer",
              "MaxInvalidTriesCVV2",
              "MaxInvalidTriesPIN",
              "Frozen",
              "NotDelivered",
              "Counterfeit",
              "Fraudulent",
              "Lost",
              "Stolen"
            ],
            "type": "string",
            "x-go-name": "BlockType"
          },
          "blocked_at": {
            "description": "Indicates the date starting from which the card is blocked for any reason. Apply if the card is currently blocked",
            "format": "date-time",
            "type": "string",
            "x-go-name": "BlockedAt"
          },
          "blocked_by": {
            "description": "System information on the details of the card block",
            "type": "string",
            "x-go-name": "BlockedBy"
          },
          "status": {
            "description": "Card status",
            "enum": [
              "Created",
              "Ordered",
              "Personalized",
              "Dispatched",
              "Active",
              "Blocked",
              "Closing",
              "Closed",
              "Expired",
              "AwaitingRenewal"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "embossing_name": {
            "description": "Used if there is no EmbossingFirstName and EmbossingLastName. Any name of the card holder imprinted (embossed) on the card if any",
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "embossing_first_name": {
            "description": "Any first name of the card holder imprinted (embossed) on the card if any",
            "type": "string",
            "x-go-name": "EmbossingFirstName"
          },
          "embossing_last_name": {
            "description": "Any last name of the card holder imprinted (embossed) on the card if any",
            "type": "string",
            "x-go-name": "EmbossingLastName"
          },
          "embossing_company_name": {
            "description": "Any corporate name imprinted (embossed) on the card if any",
            "type": "string",
            "x-go-name": "EmbossingCompanyName"
          },
          "limits": {
            "$ref": "#/definitions/CardLimitsWithUsage"
          },
          "3d_secure_settings": {
            "$ref": "#/definitions/Card3DSecureSettings"
          },
          "delivery_address": {
            "$ref": "#/definitions/DeliveryAddress"
          },
          "is_enrolled_for_3d_secure": {
            "description": "DEPRECATED\nStates if 3D-secure identification should be used on the card transactions. By default, it is true",
            "type": "boolean",
            "x-go-name": "IsEnrolledFor3DSecure"
          },
          "is_card_3d_secure_activated": {
            "description": "DEPRECATED\nIs false only if the 3D-secure on the card is switched-off",
            "type": "boolean",
            "x-go-name": "IsCard3DSecureActivated"
          },
          "renew_automatically": {
            "description": "States if the card should be renewed after the expiration",
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "is_disposable": {
            "description": "If the is_disposable is true, the card is automatically closed after a single transaction irrespective of its amount",
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "security": {
            "$ref": "#/definitions/CardSecurity"
          },
          "personalization_product_code": {
            "description": "Reference to the prototype of the card design",
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "carrier_type": {
            "$ref": "#/definitions/CarrierType"
          },
          "card_metadata_profile_id": {
            "description": "Cards metadata of card tokens provided to mobile payment systems",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "activated_at": {
            "description": "Date-time in UTC when the transactions can be effected using the card. The card can be activated any time after it is created, irrespective of the delivery",
            "format": "date-time",
            "type": "string",
            "x-go-name": "ActivatedAt"
          },
          "created_at": {
            "description": "Date-time in UTC when the card object was created",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "updated_at": {
            "description": "Date-time in UTC when the information on the card object was last updated",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "closed_at": {
            "description": "Date-time in UTC when the card was closed",
            "format": "date-time",
            "type": "string",
            "x-go-name": "ClosedAt"
          },
          "closed_by": {
            "description": "ID of the user who closed the card",
            "type": "string",
            "x-go-name": "ClosedBy"
          },
          "close_reason": {
            "description": "System information on the reason of why the card was closed",
            "enum": [
              "ClosedByIssuer",
              "ClosedByClient",
              "ClosedBySystem",
              "ClosedByCardholder",
              "ClosedByReplace",
              "ClosedByRenewal"
            ],
            "type": "string",
            "x-go-name": "CloseReason"
          },
          "company_id": {
            "description": "ID of the Company where the card is linked to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "dispatched_at": {
            "description": "Date-time when the card was dispatched",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DispatchedAt"
          },
          "card_notification_settings": {
            "$ref": "#/definitions/CardNotificationSettings"
          }
        },
        "title": "Card represents a card in the system.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Card3DSecureSettings": {
        "description": "At least one of the fields is required: mobile, email or out_of_band_enabled with `true` value.",
        "properties": {
          "type": {
            "$ref": "#/definitions/APICard3DSecureType"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "type": "string",
            "x-go-name": "Mobile"
          },
          "language_code": {
            "$ref": "#/definitions/ACSLanguageCode"
          },
          "password": {
            "description": "Password.  Masked value returned if password is set. \u003cbr\u003e\nAllowed to use characters: A-Z a-z 0-9 ! \" # ; : ? \u0026 * ( ) + = / \\ , . [ ] { }.",
            "maxLength": 36,
            "minLength": 8,
            "type": "string",
            "x-go-name": "Password"
          },
          "email": {
            "description": "Email",
            "format": "email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "out_of_band_enabled": {
            "description": "Out of Band enabled",
            "type": "boolean",
            "x-go-name": "OutOfBandEnabled"
          },
          "out_of_band_id": {
            "description": "Out of Band ID. Which basically is ID of User.",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "OutOfBandID"
          }
        },
        "title": "Card 3D Secure settings. Required for card activation and enabling of internet purchases in case product has 3D Secure enabled.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardDesign": {
        "properties": {
          "personalization_product_code": {
            "description": "Personalization product code",
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "image": {
            "description": "Base64 encoded image",
            "type": "string",
            "x-go-name": "Image"
          },
          "color_code": {
            "description": "Color code in hex",
            "type": "string",
            "x-go-name": "ColorCode"
          },
          "created_at": {
            "description": "Date-time when card design was created",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "Who created card design",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "updated_at": {
            "description": "Date-time when card design was updated",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "description": "Who updated card design",
            "type": "string",
            "x-go-name": "UpdatedBy"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardDesignUpdateInfo": {
        "properties": {
          "personalization_product_code": {
            "description": "Personalization product code",
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "created_at": {
            "description": "Date-time when card design was created",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "updated_at": {
            "description": "Date-time when card design was updated",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardEventCard3DSecureSettings": {
        "properties": {
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "type": "string",
            "x-go-name": "Mobile"
          },
          "password": {
            "type": "string",
            "x-go-name": "Password"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "CardEventDeliveryAddress": {
        "properties": {
          "address1": {
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "type": "string",
            "x-go-name": "Address2"
          },
          "city": {
            "type": "string",
            "x-go-name": "City"
          },
          "company_name": {
            "type": "string",
            "x-go-name": "CompanyName"
          },
          "country_code": {
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "CountryCode"
          },
          "dispatch_method": {
            "$ref": "#/definitions/DispatchMethod"
          },
          "first_name": {
            "type": "string",
            "x-go-name": "FirstName"
          },
          "last_name": {
            "type": "string",
            "x-go-name": "LastName"
          },
          "phone": {
            "type": "string",
            "x-go-name": "Phone"
          },
          "postal_code": {
            "type": "string",
            "x-go-name": "PostalCode"
          },
          "tracking_number": {
            "type": "string",
            "x-go-name": "TrackingNumber"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "address1",
          "city",
          "postal_code",
          "country_code",
          "dispatch_method"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "CardEventLimits": {
        "properties": {
          "daily_contactless_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "DailyContactlessPurchase"
          },
          "daily_internet_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "DailyInternetPurchase"
          },
          "daily_overall_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "DailyOverallPurchase"
          },
          "daily_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "DailyPurchase"
          },
          "daily_withdrawal": {
            "format": "double",
            "type": "number",
            "x-go-name": "DailyWithdrawal"
          },
          "monthly_contactless_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "MonthlyContactlessPurchase"
          },
          "monthly_internet_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "MonthlyInternetPurchase"
          },
          "monthly_overall_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "MonthlyOverallPurchase"
          },
          "monthly_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "MonthlyPurchase"
          },
          "monthly_withdrawal": {
            "format": "double",
            "type": "number",
            "x-go-name": "MonthlyWithdrawal"
          },
          "transaction_contactless_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionContactlessPurchase"
          },
          "transaction_internet_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionInternetPurchase"
          },
          "transaction_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionPurchase"
          },
          "transaction_withdrawal": {
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionWithdrawal"
          },
          "weekly_contactless_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "WeeklyContactlessPurchase"
          },
          "weekly_internet_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "WeeklyInternetPurchase"
          },
          "weekly_overall_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "WeeklyOverallPurchase"
          },
          "weekly_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "WeeklyPurchase"
          },
          "weekly_withdrawal": {
            "format": "double",
            "type": "number",
            "x-go-name": "WeeklyWithdrawal"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "CardEventSecurity": {
        "properties": {
          "contactless_enabled": {
            "type": "boolean",
            "x-go-name": "ContactlessEnabled"
          },
          "internet_purchase_enabled": {
            "type": "boolean",
            "x-go-name": "InternetPurchaseEnabled"
          },
          "overall_limits_enabled": {
            "type": "boolean",
            "x-go-name": "OverallLimitsEnabled"
          },
          "withdrawal_enabled": {
            "type": "boolean",
            "x-go-name": "WithdrawalEnabled"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "CardFee": {
        "properties": {
          "type": {
            "$ref": "#/definitions/FeeType"
          },
          "percentage_part": {
            "description": "Percentage part",
            "format": "double",
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "x-go-name": "PercentagePart"
          },
          "fixed_part": {
            "description": "Fixed part",
            "format": "double",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "x-go-name": "FixedPart"
          },
          "min_amount": {
            "description": "Min amount",
            "format": "double",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MinAmount"
          }
        },
        "required": [
          "type"
        ],
        "title": "CardFee represents card fee.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardFeeWaiver": {
        "properties": {
          "id": {
            "description": "Waiver ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "card_id": {
            "description": "Card ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "limit_value": {
            "description": "Limit amount",
            "format": "double",
            "type": "number",
            "x-go-name": "LimitValue"
          },
          "limit_value_used": {
            "description": "Limit amount used",
            "format": "double",
            "type": "number",
            "x-go-name": "LimitValueUsed"
          },
          "limit_value_available": {
            "description": "Limit amount available",
            "format": "double",
            "type": "number",
            "x-go-name": "LimitValueAvailable"
          },
          "waiver_type": {
            "$ref": "#/definitions/FeeWaiverType"
          },
          "authorization_type": {
            "description": "Authorization type",
            "enum": [
              "Unknown",
              "payWaveLowValuePurchase",
              "payWaveHighValuePurchase",
              "eCommercePurchase",
              "AccountVerification",
              "UnattendedCardholderActivatedTerminal",
              "AutomatedFuelDispenser",
              "AutomatedFuelDispenserConfirmation",
              "ATMWithdrawal",
              "ATMBalanceInquiry",
              "MOTOPurchase",
              "RecurringPayment",
              "StatusCheck",
              "POSPurchase",
              "ManualCashPurchase",
              "PurchaseWithCashback",
              "QuasiCashPurchase",
              "PINChange",
              "PINUnblock",
              "CreditVoucherAndMerchandiseReturn",
              "CardToCardPaymentCredit",
              "CardToCardPaymentDebit"
            ],
            "type": "string",
            "x-go-name": "AuthorizationType"
          },
          "last_used_at": {
            "description": "Last used at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "LastUsedAt"
          },
          "created_at": {
            "description": "Created at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "Created by",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "updated_at": {
            "description": "Updated at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "description": "Updated by",
            "type": "string",
            "x-go-name": "UpdatedBy"
          },
          "deleted_at": {
            "description": "Deleted at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DeletedAt"
          },
          "deleted_by": {
            "description": "Deleted by",
            "type": "string",
            "x-go-name": "DeletedBy"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardFeesBatch": {
        "properties": {
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "card_fees": {
            "items": {
              "$ref": "#/definitions/RequestCardFee"
            },
            "type": "array",
            "x-go-name": "CardFees"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardLimitUsage": {
        "properties": {
          "total": {
            "format": "double",
            "type": "number",
            "x-go-name": "Total"
          },
          "used": {
            "format": "double",
            "type": "number",
            "x-go-name": "Used"
          },
          "available": {
            "format": "double",
            "type": "number",
            "x-go-name": "Available"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardLimits": {
        "properties": {
          "daily_purchase": {
            "description": "Daily purchase amount. Cannot exceed both MonthlyPurchase and product setting MaxCardDailyPurchaseLimit.\nWhen product setting WeeklyLimitsEnabled is true, then DailyPurchase cannot exceed WeeklyPurchase.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyPurchase"
          },
          "daily_withdrawal": {
            "description": "Daily withdrawal amount. Cannot exceed both MonthlyWithdrawal and product setting MaxCardDailyWithdrawalLimit.\nWhen product setting WeeklyLimitsEnabled is true, then DailyWithdrawal cannot exceed WeeklyWithdrawal.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyWithdrawal"
          },
          "daily_internet_purchase": {
            "description": "Daily internet purchase amount. Cannot exceed both MonthlyInternetPurchase and product setting MaxCardDailyInternetPurchaseLimit.\nWhen product setting WeeklyLimitsEnabled is true, then DailyInternetPurchase cannot exceed WeeklyInternetPurchase.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyInternetPurchase"
          },
          "daily_contactless_purchase": {
            "description": "Daily contactless purchase amount. Cannot exceed both MonthlyContactlessPurchase and product setting MaxCardDailyContactlessPurchaseLimit.\nWhen product setting WeeklyLimitsEnabled is true, then DailyContactlessPurchase cannot exceed WeeklyContactlessPurchase.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyContactlessPurchase"
          },
          "weekly_purchase": {
            "description": "Weekly purchase amount. Enabled when product setting WeeklyLimitsEnabled is true. Cannot exceed both MonthlyPurchase and product setting MaxCardWeeklyPurchaseLimit.\nWhen product setting WeeklyLimitsEnabled is false, then WeeklyPurchase becomes equal to MonthlyPurchase.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyPurchase"
          },
          "weekly_withdrawal": {
            "description": "Weekly withdrawal amount. Enabled when product setting WeeklyLimitsEnabled is true. Cannot exceed both MonthlyWithdrawal and product setting MaxCardWeeklyWithdrawalLimit.\nWhen product setting WeeklyLimitsEnabled is false, then WeeklyWithdrawal becomes equal to MonthlyWithdrawal.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyWithdrawal"
          },
          "weekly_internet_purchase": {
            "description": "Weekly internet purchase amount. Enabled when product setting WeeklyLimitsEnabled is true. Cannot exceed both MonthlyInternetPurchase and product setting MaxCardWeeklyInternetPurchaseLimit.\nWhen product setting WeeklyLimitsEnabled is false, then WeeklyInternetPurchase becomes equal to MonthlyInternetPurchase.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyInternetPurchase"
          },
          "weekly_contactless_purchase": {
            "description": "Weekly contactless purchase amount. Enabled when product setting WeeklyLimitsEnabled is true. Cannot exceed both MonthlyContactlessPurchase and product setting MaxCardWeeklyContactlessPurchaseLimit.\nWhen product setting WeeklyLimitsEnabled is false, then WeeklyContactlessPurchase becomes equal to MonthlyContactlessPurchase.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyContactlessPurchase"
          },
          "monthly_purchase": {
            "description": "Monthly purchase amount. Cannot exceed product setting MaxCardMonthlyPurchaseLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyPurchase"
          },
          "monthly_withdrawal": {
            "description": "Monthly withdrawal amount. Cannot exceed product setting MaxCardMonthlyWithdrawalLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyWithdrawal"
          },
          "monthly_internet_purchase": {
            "description": "Monthly internet purchase amount. Cannot exceed product setting MaxCardMonthlyInternetPurchaseLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyInternetPurchase"
          },
          "monthly_contactless_purchase": {
            "description": "Monthly contactless purchase amount. Cannot exceed product setting MaxCardMonthlyContactlessPurchaseLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyContactlessPurchase"
          },
          "transaction_purchase": {
            "description": "Transaction purchase amount. Cannot exceed both DailyPurchase and product setting MaxCardDailyPurchaseLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "TransactionPurchase"
          },
          "transaction_withdrawal": {
            "description": "Transaction withdrawal amount. Cannot exceed both DailyWithdrawal and product setting MaxCardTransactionWithdrawalLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "TransactionWithdrawal"
          },
          "transaction_internet_purchase": {
            "description": "Transaction internet purchase amount. Cannot exceed both DailyInternetPurchase and product setting MaxCardTransactionInternetPurchaseLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "TransactionInternetPurchase"
          },
          "transaction_contactless_purchase": {
            "description": "Transaction contactless purchase amount. Cannot exceed both DailyContactlessPurchase and product setting MaxCardTransactionContactlessPurchaseLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "TransactionContactlessPurchase"
          },
          "daily_overall_purchase": {
            "description": "Daily overall purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyOverallPurchase"
          },
          "weekly_overall_purchase": {
            "description": "Weekly overall purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyOverallPurchase"
          },
          "monthly_overall_purchase": {
            "description": "Monthly overall purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyOverallPurchase"
          },
          "all_time_purchase": {
            "description": "All time purchase amount. Permanent limit which does not reset over time. Cannot be enabled together with other limit types.\nCannot exceed product setting MaxCardAllTimePurchaseLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "AllTimePurchase"
          },
          "all_time_withdrawal": {
            "description": "All time withdrawal amount. Permanent limit which does not reset over time. Cannot be enabled together with other limit types.\nCannot exceed product setting MaxCardAllTimeWithdrawalLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "AllTimeWithdrawal"
          },
          "all_time_internet_purchase": {
            "description": "All time internet purchase amount. Permanent limit which does not reset over time. Cannot be enabled together with other limit types.\nCannot exceed product setting MaxCardAllTimeInternetPurchaseLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "AllTimeInternetPurchase"
          },
          "all_time_contactless_purchase": {
            "description": "All time contactless purchase amount. Permanent limit which does not reset over time. Cannot be enabled together with other limit types.\nCannot exceed product setting MaxCardAllTimeContactlessPurchaseLimit.",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "AllTimeContactlessPurchase"
          }
        },
        "title": "CardLimits represents daily, weekly, monthly and transaction limits.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardLimitsByProductIDResponse": {
        "properties": {
          "default_card_daily_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardDailyContactlessPurchaseLimit"
          },
          "default_card_daily_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardDailyInternetPurchaseLimit"
          },
          "default_card_daily_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardDailyPurchaseLimit"
          },
          "default_card_daily_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardDailyWithdrawalLimit"
          },
          "default_card_weekly_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardWeeklyContactlessPurchaseLimit"
          },
          "default_card_weekly_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardWeeklyInternetPurchaseLimit"
          },
          "default_card_weekly_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardWeeklyPurchaseLimit"
          },
          "default_card_weekly_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardWeeklyWithdrawalLimit"
          },
          "default_card_monthly_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardMonthlyContactlessPurchaseLimit"
          },
          "default_card_monthly_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardMonthlyInternetPurchaseLimit"
          },
          "default_card_monthly_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardMonthlyPurchaseLimit"
          },
          "default_card_monthly_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardMonthlyWithdrawalLimit"
          },
          "default_card_transaction_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardTransactionContactlessPurchaseLimit"
          },
          "default_card_transaction_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardTransactionInternetPurchaseLimit"
          },
          "default_card_transaction_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardTransactionPurchaseLimit"
          },
          "default_card_transaction_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardTransactionWithdrawalLimit"
          },
          "max_card_daily_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardDailyContactlessPurchaseLimit"
          },
          "max_card_daily_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardDailyInternetPurchaseLimit"
          },
          "max_card_daily_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardDailyPurchaseLimit"
          },
          "max_card_daily_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardDailyWithdrawalLimit"
          },
          "max_card_weekly_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardWeeklyContactlessPurchaseLimit"
          },
          "max_card_weekly_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardWeeklyInternetPurchaseLimit"
          },
          "max_card_weekly_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardWeeklyPurchaseLimit"
          },
          "max_card_weekly_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardWeeklyWithdrawalLimit"
          },
          "max_card_monthly_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardMonthlyContactlessPurchaseLimit"
          },
          "max_card_monthly_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardMonthlyInternetPurchaseLimit"
          },
          "max_card_monthly_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardMonthlyPurchaseLimit"
          },
          "max_card_monthly_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardMonthlyWithdrawalLimit"
          },
          "max_card_transaction_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardTransactionContactlessPurchaseLimit"
          },
          "max_card_transaction_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardTransactionInternetPurchaseLimit"
          },
          "max_card_transaction_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardTransactionPurchaseLimit"
          },
          "max_card_transaction_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardTransactionWithdrawalLimit"
          },
          "default_card_daily_overall_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardDailyOverallPurchaseLimit"
          },
          "max_card_daily_overall_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardDailyOverallPurchaseLimit"
          },
          "default_card_weekly_overall_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardWeeklyOverallPurchaseLimit"
          },
          "max_card_weekly_overall_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardWeeklyOverallPurchaseLimit"
          },
          "default_card_monthly_overall_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardMonthlyOverallPurchaseLimit"
          },
          "max_card_monthly_overall_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardMonthlyOverallPurchaseLimit"
          },
          "weekly_limits_enabled": {
            "type": "boolean",
            "x-go-name": "WeeklyLimitsEnabled"
          },
          "all_time_limits_enabled": {
            "type": "boolean",
            "x-go-name": "AllTimeLimitsEnabled"
          },
          "default_card_all_time_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardAllTimeContactlessPurchaseLimit"
          },
          "default_card_all_time_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardAllTimeInternetPurchaseLimit"
          },
          "default_card_all_time_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardAllTimePurchaseLimit"
          },
          "default_card_all_time_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultCardAllTimeWithdrawalLimit"
          },
          "max_card_all_time_contactless_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardAllTimeContactlessPurchaseLimit"
          },
          "max_card_all_time_internet_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardAllTimeInternetPurchaseLimit"
          },
          "max_card_all_time_purchase_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardAllTimePurchaseLimit"
          },
          "max_card_all_time_withdrawal_limit": {
            "format": "double",
            "type": "number",
            "x-go-name": "MaxCardAllTimeWithdrawalLimit"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardLimitsWithUsage": {
        "allOf": [
          {
            "$ref": "#/definitions/CardLimits"
          },
          {
            "properties": {
              "all_time_contactless_purchase_available": {
                "description": "All time contactless purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "AllTimeContactlessPurchaseAvailable"
              },
              "all_time_contactless_purchase_used": {
                "description": "All time contactless purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "AllTimeContactlessPurchaseUsed"
              },
              "all_time_internet_purchase_available": {
                "description": "All time internet purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "AllTimeInternetPurchaseAvailable"
              },
              "all_time_internet_purchase_used": {
                "description": "All time internet purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "AllTimeInternetPurchaseUsed"
              },
              "all_time_purchase_available": {
                "description": "All time purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "AllTimePurchaseAvailable"
              },
              "all_time_purchase_used": {
                "description": "All time purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "AllTimePurchaseUsed"
              },
              "all_time_withdrawal_available": {
                "description": "All time withdrawal available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "AllTimeWithdrawalAvailable"
              },
              "all_time_withdrawal_used": {
                "description": "All time withdrawal used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "AllTimeWithdrawalUsed"
              },
              "daily_contactless_purchase_available": {
                "description": "Daily contactless purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "DailyContactlessPurchaseAvailable"
              },
              "daily_contactless_purchase_used": {
                "description": "Daily contactless purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "DailyContactlessPurchaseUsed"
              },
              "daily_internet_purchase_available": {
                "description": "Daily internet purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "DailyInternetPurchaseAvailable"
              },
              "daily_internet_purchase_used": {
                "description": "Daily internet purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "DailyInternetPurchaseUsed"
              },
              "daily_overall_purchase_available": {
                "description": "Daily overall purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "DailyOverallPurchaseAvailable"
              },
              "daily_overall_purchase_used": {
                "description": "Daily overall purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "DailyOverallPurchaseUsed"
              },
              "daily_purchase_available": {
                "description": "Daily purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "DailyPurchaseAvailable"
              },
              "daily_purchase_used": {
                "description": "Daily purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "DailyPurchaseUsed"
              },
              "daily_withdrawal_available": {
                "description": "Daily withdrawal available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "DailyWithdrawalAvailable"
              },
              "daily_withdrawal_used": {
                "description": "Daily withdrawal used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "DailyWithdrawalUsed"
              },
              "monthly_contactless_purchase_available": {
                "description": "Monthly contactless purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "MonthlyContactlessPurchaseAvailable"
              },
              "monthly_contactless_purchase_used": {
                "description": "Monthly contactless purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "MonthlyContactlessPurchaseUsed"
              },
              "monthly_internet_purchase_available": {
                "description": "Monthly internet purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "MonthlyInternetPurchaseAvailable"
              },
              "monthly_internet_purchase_used": {
                "description": "Monthly internet purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "MonthlyInternetPurchaseUsed"
              },
              "monthly_overall_purchase_available": {
                "description": "Monthly overall purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "MonthlyOverallPurchaseAvailable"
              },
              "monthly_overall_purchase_used": {
                "description": "Monthly overall purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "MonthlyOverallPurchaseUsed"
              },
              "monthly_purchase_available": {
                "description": "Monthly purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "MonthlyPurchaseAvailable"
              },
              "monthly_purchase_used": {
                "description": "Monthly purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "MonthlyPurchaseUsed"
              },
              "monthly_withdrawal_available": {
                "description": "Monthly withdrawal available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "MonthlyWithdrawalAvailable"
              },
              "monthly_withdrawal_used": {
                "description": "Monthly withdrawal used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "MonthlyWithdrawalUsed"
              },
              "weekly_contactless_purchase_available": {
                "description": "Weekly contactless purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "WeeklyContactlessPurchaseAvailable"
              },
              "weekly_contactless_purchase_used": {
                "description": "Weekly contactless purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "WeeklyContactlessPurchaseUsed"
              },
              "weekly_internet_purchase_available": {
                "description": "Weekly internet purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "WeeklyInternetPurchaseAvailable"
              },
              "weekly_internet_purchase_used": {
                "description": "Weekly internet purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "WeeklyInternetPurchaseUsed"
              },
              "weekly_overall_purchase_available": {
                "description": "Weekly overall purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "WeeklyOverallPurchaseAvailable"
              },
              "weekly_overall_purchase_used": {
                "description": "Weekly overall purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "WeeklyOverallPurchaseUsed"
              },
              "weekly_purchase_available": {
                "description": "Weekly purchase available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "WeeklyPurchaseAvailable"
              },
              "weekly_purchase_used": {
                "description": "Weekly purchase used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "WeeklyPurchaseUsed"
              },
              "weekly_withdrawal_available": {
                "description": "Weekly withdrawal available amount",
                "format": "double",
                "type": "number",
                "x-go-name": "WeeklyWithdrawalAvailable"
              },
              "weekly_withdrawal_used": {
                "description": "Weekly withdrawal used amount",
                "format": "double",
                "type": "number",
                "x-go-name": "WeeklyWithdrawalUsed"
              }
            },
            "type": "object"
          }
        ],
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardMerchantRule": {
        "properties": {
          "id": {
            "description": "ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "card_id": {
            "description": "Card ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "type": {
            "$ref": "#/definitions/CardMerchantRuleType"
          },
          "value": {
            "description": "Merchant rule value. Depends on type.",
            "type": "string",
            "x-go-name": "Value"
          },
          "is_whitelist": {
            "description": "Is rule a whitelist",
            "type": "boolean",
            "x-go-name": "IsWhiteList"
          },
          "created_at": {
            "description": "Date-time the card rule was created at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "Created by",
            "type": "string",
            "x-go-name": "CreatedBy"
          }
        },
        "required": [
          "card_id",
          "type",
          "value",
          "is_whitelist"
        ],
        "title": "CardMerchantRule represents card merchant rule.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardMerchantRuleFields": {
        "properties": {
          "type": {
            "$ref": "#/definitions/CardMerchantRuleType"
          },
          "value": {
            "description": "Merchant rule value.\u003cbr\u003e\nFor rule type MerchantCountryCode ISO 3166-1 Alpha-3 code standard is accepted.\u003cbr\u003e\nFor rule type MerchantCategoryCode ISO 18245 code standard is accepted.",
            "type": "string",
            "x-go-name": "Value"
          },
          "is_whitelist": {
            "description": "Is rule a whitelist",
            "type": "boolean",
            "x-go-name": "IsWhiteList"
          }
        },
        "required": [
          "type",
          "value",
          "is_whitelist"
        ],
        "title": "CardMerchantRuleFields represents card merchant rule fields.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardMerchantRuleType": {
        "enum": [
          "MerchantCategoryCode",
          "MerchantCountryCode"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "CardNotificationSettings": {
        "properties": {
          "receipts_reminder_enabled": {
            "description": "Receipts reminder enabled",
            "type": "boolean",
            "x-go-name": "ReceiptsReminderEnabled"
          },
          "instant_spend_update_enabled": {
            "description": "Instant spend update enabled",
            "type": "boolean",
            "x-go-name": "InstantSpendUpdateEnabled"
          }
        },
        "title": "CardNotificationSettings represents a card notification settings.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardOwner": {
        "properties": {
          "id": {
            "description": "Card owner ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "description": "Company name or Person first name and last name",
            "type": "string",
            "x-go-name": "Name"
          },
          "type": {
            "$ref": "#/definitions/CardOwnerType"
          },
          "fraud_cases_count": {
            "description": "Card owner fraud cases count",
            "format": "int64",
            "type": "integer",
            "x-go-name": "FraudCasesCount"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardOwnerType": {
        "enum": [
          "Company",
          "Person"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "CardSecurity": {
        "properties": {
          "contactless_enabled": {
            "description": "Contactless enabled",
            "type": "boolean",
            "x-go-name": "ContactlessEnabled"
          },
          "withdrawal_enabled": {
            "description": "Withdrawal enabled",
            "type": "boolean",
            "x-go-name": "WithdrawalEnabled"
          },
          "internet_purchase_enabled": {
            "description": "Internet purchase enabled",
            "type": "boolean",
            "x-go-name": "InternetPurchaseEnabled"
          },
          "overall_limits_enabled": {
            "description": "Overall limits enabled. Cannot be enabled together with all time limits.",
            "type": "boolean",
            "x-go-name": "OverallLimitsEnabled"
          },
          "all_time_limits_enabled": {
            "description": "All time limits enabled. Cannot be enabled together with overall limits.",
            "type": "boolean",
            "x-go-name": "AllTimeLimitsEnabled"
          }
        },
        "title": "Card Security settings.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardStatementRecord": {
        "properties": {
          "id": {
            "description": "Record ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "card_id": {
            "description": "Card ID to which this record belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "type": {
            "description": "Record type",
            "enum": [
              "Authorization",
              "Transaction",
              "Fee"
            ],
            "type": "string",
            "x-go-name": "Type"
          },
          "group": {
            "description": "Group of the record",
            "enum": [
              "Withdraw",
              "Deposit",
              "Purchase",
              "InternetPurchase",
              "Other",
              "PINManagement",
              "Refund",
              "AuthorizationATMBalanceInquiryFixedFee",
              "AuthorizationATMWithdrawalFixedFee",
              "AuthorizationATMDeclinedFixedFee",
              "AuthorizationDeclinedFixedFee",
              "AuthorizationForeignExchangePercentageFee",
              "AuthorizationATMWithdrawalPercentageFee",
              "CardReplacementFixedFee",
              "PINChangeFixedFee",
              "AuthorizationATMWithdrawalComplexFee",
              "CardUsageFixedFee",
              "CardIssuanceFixedFee"
            ],
            "type": "string",
            "x-go-name": "Group"
          },
          "date": {
            "description": "Date-time the record was made",
            "format": "date-time",
            "type": "string",
            "x-go-name": "Date"
          },
          "transaction_amount": {
            "description": "Transaction amount",
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionAmount"
          },
          "transaction_currency_code": {
            "description": "Transaction currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "TransactionCurrencyCode"
          },
          "account_amount": {
            "description": "Account amount",
            "format": "double",
            "type": "number",
            "x-go-name": "AccountAmount"
          },
          "account_currency_code": {
            "description": "Account currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "AccountCurrencyCode"
          },
          "merchant_category_code": {
            "description": "Merchant category code",
            "type": "string",
            "x-go-name": "MerchantCategoryCode"
          },
          "merchant_id": {
            "description": "Merchant ID",
            "type": "string",
            "x-go-name": "MerchantID"
          },
          "terminal_id": {
            "description": "Terminal ID",
            "type": "string",
            "x-go-name": "TerminalID"
          },
          "merchant_name": {
            "description": "Merchant name",
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "merchant_city": {
            "description": "Merchant city",
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_country_code": {
            "description": "Merchant country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "description": {
            "description": "Description (used for account adjustments)",
            "type": "string",
            "x-go-name": "Description"
          },
          "original_authorization_id": {
            "description": "Authorization ID (used for transactions and authorization reversals to link with original authorization)",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "OriginalAuthorizationID"
          },
          "is_reversal": {
            "description": "Shows whether this is reversal authorization or not",
            "type": "boolean",
            "x-go-name": "IsReversal"
          },
          "is_declined": {
            "description": "Shows whether this is declined authorization or not",
            "type": "boolean",
            "x-go-name": "IsDeclined"
          },
          "is_cleared": {
            "description": "Shows whether this is cleared authorization or not",
            "type": "boolean",
            "x-go-name": "IsCleared"
          },
          "marked_for_dispute_at": {
            "description": "Date-time the transaction was marked for dispute",
            "format": "date-time",
            "type": "string",
            "x-go-name": "MarkedForDisputeAt"
          },
          "marked_for_dispute_by": {
            "description": "Marked for dispute by",
            "type": "string",
            "x-go-name": "MarkedForDisputeBy"
          },
          "status": {
            "description": "Status",
            "enum": [
              "Completed",
              "Pending",
              "Canceled"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "response": {
            "description": "Response",
            "enum": [
              "Approved",
              "Declined"
            ],
            "type": "string",
            "x-go-name": "Response"
          },
          "response_code": {
            "description": "Response Code",
            "type": "string",
            "x-go-name": "ResponseCode"
          },
          "account_external_id": {
            "description": "Account external ID",
            "type": "string",
            "x-go-name": "AccountExternalID"
          },
          "masked_card_number": {
            "description": "Masked card number",
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "has_payment_document_files": {
            "description": "Shows whether this record has payment document files",
            "type": "boolean",
            "x-go-name": "HasPaymentDocumentFiles"
          },
          "has_payment_notes": {
            "description": "Shows whether this record has payment notes",
            "type": "boolean",
            "x-go-name": "HasPaymentNotes"
          },
          "card_name": {
            "description": "Card name",
            "type": "string",
            "x-go-name": "CardName"
          },
          "sub_type": {
            "description": "Sub type",
            "type": "string",
            "x-go-name": "SubType"
          },
          "purchase_date": {
            "description": "Date-time the payment was done",
            "format": "date-time",
            "type": "string",
            "x-go-name": "PurchaseDate"
          },
          "exchange_rate": {
            "description": "Exchange rate",
            "format": "double",
            "type": "number",
            "x-go-name": "ExchangeRate"
          },
          "enriched_merchant_data": {
            "$ref": "#/definitions/EnrichedMerchantData"
          },
          "total_amount": {
            "description": "Total amount",
            "format": "double",
            "type": "number",
            "x-go-name": "TotalAmount"
          }
        },
        "title": "CardStatementRecord represents a card statement record.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardTopUpFee": {
        "properties": {
          "fee_type": {
            "$ref": "#/definitions/FeeType"
          },
          "amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "Amount"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Cardholder3DSSettings": {
        "description": "Cardholder3DSSettings",
        "properties": {
          "id": {
            "description": "ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "product_id": {
            "description": "ProductID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ProductID"
          },
          "person_id": {
            "description": "PersonID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "company_id": {
            "description": "CompanyID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "email": {
            "description": "Email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "description": "Mobile",
            "type": "string",
            "x-go-name": "Mobile"
          },
          "password": {
            "description": "Password",
            "type": "string",
            "x-go-name": "Password"
          },
          "force_usage": {
            "description": "ForceUsage",
            "type": "boolean",
            "x-go-name": "ForceUsage"
          },
          "card_default_settings": {
            "description": "CardDefaultSettings",
            "type": "boolean",
            "x-go-name": "CardDefaultSettings"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardholderReminderResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "x-go-name": "Success"
          }
        },
        "title": "CardholderReminderResponse represents a cardholder reminder response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardsBlockLog": {
        "properties": {
          "id": {
            "description": "ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "mobile_number": {
            "description": "Mobile Number",
            "type": "string",
            "x-go-name": "MobileNumber"
          },
          "language_code": {
            "description": "Language Code",
            "type": "string",
            "x-go-name": "LanguageCode"
          },
          "call_time": {
            "description": "Call Time",
            "type": "string",
            "x-go-name": "CallTime"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardsDispatchMethodItem": {
        "properties": {
          "dispatch_method": {
            "$ref": "#/definitions/DispatchMethod"
          },
          "price": {
            "format": "double",
            "type": "number",
            "x-go-name": "Price"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "delivery_time": {
            "$ref": "#/definitions/DeliveryTime"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CardsDispatchMethodsResponse": {
        "properties": {
          "dispatch_methods": {
            "items": {
              "$ref": "#/definitions/CardsDispatchMethodItem"
            },
            "type": "array",
            "x-go-name": "DispatchMethods"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CarrierType": {
        "enum": [
          "Custom",
          "Standard"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "ChangeCardPINRequest": {
        "properties": {
          "encrypted_pin": {
            "description": "Encrypted PIN - base64 encoded",
            "type": "string",
            "x-go-name": "EncryptedPIN"
          }
        },
        "required": [
          "encrypted_pin"
        ],
        "title": "ChangeCardPINRequest represents change card PIN request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CloseAccountRequest": {
        "properties": {
          "close_reason": {
            "description": "Account",
            "enum": [
              "ClosedByIssuer",
              "ClosedByClient",
              "ClosedBySystem",
              "ClosedByCardholder"
            ],
            "type": "string",
            "x-go-name": "CloseReason"
          }
        },
        "required": [
          "close_reason"
        ],
        "title": "CloseAccountRequest is a request to close account.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CloseAccountResponse": {
        "properties": {
          "account": {
            "$ref": "#/definitions/Account"
          }
        },
        "title": "CloseAccountResponse represents cloase account response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CloseCardRequest": {
        "properties": {
          "close_reason": {
            "$ref": "#/definitions/APIModelCardCloseReason"
          }
        },
        "required": [
          "close_reason"
        ],
        "title": "CloseCardRequest is a request to close card.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CloseCardResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "CloseCardResponse is the response to the request to close a card.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CloseCardsBatchRequest": {
        "properties": {
          "card_ids": {
            "description": "Card IDs",
            "items": {
              "format": "uuid4",
              "type": "string"
            },
            "type": "array",
            "x-go-name": "CardIDs"
          },
          "close_reason": {
            "$ref": "#/definitions/APIModelCardCloseReason"
          }
        },
        "required": [
          "card_ids",
          "close_reason"
        ],
        "title": "CloseCardsBatchRequest is a request to close cards batch.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CloseCardsBatchResponse": {
        "properties": {
          "cards": {
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          }
        },
        "title": "CloseCardsBatchResponse is the response to the request to close a number of cards.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ClosedCardEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/ClosedCardEventView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "close"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "card"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ClosedCardEventView": {
        "properties": {
          "3d_secure_settings": {
            "$ref": "#/definitions/CardEventCard3DSecureSettings"
          },
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_metadata_profile_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "card_processor_card_id": {
            "type": "string",
            "x-go-name": "CardProcessorCardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "delivery_address": {
            "$ref": "#/definitions/CardEventDeliveryAddress"
          },
          "embossing_name": {
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "expiry_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_disposable": {
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "is_paid": {
            "type": "boolean",
            "x-go-name": "IsPaid"
          },
          "limits": {
            "$ref": "#/definitions/CardEventLimits"
          },
          "masked_card_number": {
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "personalization_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "predecessor_card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "renew_automatically": {
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "security": {
            "$ref": "#/definitions/CardEventSecurity"
          },
          "status": {
            "enum": [
              "Closed"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "type": {
            "enum": [
              "ChipAndPin",
              "ChipAndPinAnonymous",
              "Sticker",
              "Virtual"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "is_paid",
          "created_at",
          "created_by",
          "expiry_date",
          "is_disposable",
          "masked_card_number",
          "renew_automatically",
          "personalization_product_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ClosingCardEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/ClosingCardEventView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "closing"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "card"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ClosingCardEventView": {
        "properties": {
          "3d_secure_settings": {
            "$ref": "#/definitions/CardEventCard3DSecureSettings"
          },
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_metadata_profile_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "card_processor_card_id": {
            "type": "string",
            "x-go-name": "CardProcessorCardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "delivery_address": {
            "$ref": "#/definitions/CardEventDeliveryAddress"
          },
          "embossing_name": {
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "expiry_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_disposable": {
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "is_paid": {
            "type": "boolean",
            "x-go-name": "IsPaid"
          },
          "limits": {
            "$ref": "#/definitions/CardEventLimits"
          },
          "masked_card_number": {
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "personalization_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "predecessor_card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "renew_automatically": {
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "security": {
            "$ref": "#/definitions/CardEventSecurity"
          },
          "status": {
            "enum": [
              "Closing"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "type": {
            "enum": [
              "ChipAndPin",
              "ChipAndPinAnonymous",
              "Sticker",
              "Virtual"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "is_paid",
          "created_at",
          "created_by",
          "expiry_date",
          "is_disposable",
          "masked_card_number",
          "renew_automatically",
          "personalization_product_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "Company": {
        "properties": {
          "id": {
            "description": "Company ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "description": "Company name",
            "type": "string",
            "x-go-name": "Name"
          },
          "registration_number": {
            "description": "Registration number",
            "type": "string",
            "x-go-name": "RegistrationNumber"
          },
          "registration_address": {
            "$ref": "#/definitions/Address"
          },
          "headquarter_address": {
            "$ref": "#/definitions/Address"
          },
          "risk_profile": {
            "description": "Company risk profile",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Pending",
              "Prohibited"
            ],
            "type": "string",
            "x-go-name": "RiskProfile"
          },
          "mobile": {
            "description": "Mobile",
            "type": "string",
            "x-go-name": "Mobile"
          },
          "email": {
            "description": "Email",
            "format": "email",
            "type": "string",
            "x-go-name": "Email"
          },
          "created_at": {
            "description": "Created at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "Created by",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "updated_at": {
            "description": "Updated at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "description": "Updated by",
            "type": "string",
            "x-go-name": "UpdatedBy"
          },
          "deleted_at": {
            "description": "Deleted at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DeletedAt"
          },
          "deleted_by": {
            "description": "Deleted by",
            "type": "string",
            "x-go-name": "DeletedBy"
          },
          "industry_type": {
            "description": "Industry Type",
            "type": "string",
            "x-go-name": "IndustryType"
          },
          "date_of_incorporation": {
            "description": "Date Of Incorporation",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DateOfIncorporation"
          },
          "business_relationship_purpose": {
            "description": "Business Relationship Purpose",
            "type": "string",
            "x-go-name": "BusinessRelationshipPurpose"
          },
          "is_sanctions_related": {
            "description": "Is Sanctions Related",
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "is_adverse_media_involved": {
            "description": "Is Adverse Media Involved",
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "employees_quantity": {
            "description": "Employees Quantity",
            "type": "string",
            "x-go-name": "EmployeesQuantity"
          },
          "card_spending_amount": {
            "description": "Card Spending Amount",
            "type": "string",
            "x-go-name": "CardSpendingAmount"
          },
          "limits": {
            "$ref": "#/definitions/CompanyLimits"
          },
          "kyb_status": {
            "$ref": "#/definitions/KYBStatus"
          },
          "status": {
            "enum": [
              "Active",
              "Deactivated",
              "Frozen"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "push_notifications_enabled": {
            "description": "Is push notifications enabled",
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          },
          "preferred_language_code": {
            "description": "Preferred language code",
            "enum": [
              "ABK",
              "AAR",
              "AFR",
              "AKA",
              "SQI",
              "AMH",
              "ARA",
              "ARG",
              "HYE",
              "ASM",
              "AVA",
              "AVE",
              "AYM",
              "AZE",
              "BAM",
              "BAL",
              "BAK",
              "EUS",
              "BEL",
              "BEN",
              "BIH",
              "BIS",
              "BOS",
              "BRE",
              "BUL",
              "MYA",
              "CAT",
              "CHA",
              "CHE",
              "NYA",
              "ZHO",
              "CHV",
              "COR",
              "COS",
              "CRE",
              "HRV",
              "CES",
              "DAN",
              "DIV",
              "NLD",
              "DZO",
              "ENG",
              "EPO",
              "EST",
              "EWE",
              "FAO",
              "FIJ",
              "FIN",
              "FRA",
              "FUL",
              "GLG",
              "KAT",
              "DEU",
              "ELL",
              "GRN",
              "GUJ",
              "HAT",
              "HAU",
              "HEB",
              "HER",
              "HIN",
              "HMO",
              "HUN",
              "INA",
              "IND",
              "ILE",
              "GLE",
              "IBO",
              "IPK",
              "IDO",
              "ISL",
              "ITA",
              "IKU",
              "JPN",
              "JAV",
              "KAL",
              "KAN",
              "KAU",
              "KAS",
              "KAZ",
              "KHM",
              "KIK",
              "KIN",
              "KIR",
              "KOM",
              "KON",
              "KOR",
              "KUR",
              "KUA",
              "LAT",
              "LTZ",
              "LUG",
              "LIJ",
              "LIN",
              "LAO",
              "LIT",
              "LUB",
              "LAV",
              "GLV",
              "MKD",
              "MLG",
              "MSA",
              "MAL",
              "MLT",
              "MRI",
              "MAR",
              "MAH",
              "MON",
              "NAU",
              "NAV",
              "NDE",
              "NEP",
              "NDO",
              "NOB",
              "NNO",
              "NOR",
              "III",
              "NBL",
              "OCI",
              "OJI",
              "CHU",
              "ORM",
              "ORI",
              "OSS",
              "PAN",
              "PLI",
              "FAS",
              "POL",
              "PUS",
              "POR",
              "QUE",
              "ROH",
              "RUN",
              "RON",
              "RUS",
              "SAN",
              "SRD",
              "SND",
              "SME",
              "SMO",
              "SAG",
              "SRP",
              "GLA",
              "SNA",
              "SIN",
              "SLK",
              "SLV",
              "SOM",
              "SOT",
              "SPA",
              "SUN",
              "SWA",
              "SSW",
              "SWE",
              "TAM",
              "TEL",
              "TGK",
              "THA",
              "TIR",
              "BOD",
              "TUK",
              "TGL",
              "TSN",
              "TON",
              "TUR",
              "TSO",
              "TAT",
              "TWI",
              "TAH",
              "UIG",
              "UKR",
              "URD",
              "UZB",
              "VEN",
              "VIE",
              "VOL",
              "WLN",
              "CYM",
              "WOL",
              "FRY",
              "XHO",
              "YID",
              "YOR",
              "ZHA",
              "ZUL"
            ],
            "type": "string",
            "x-go-name": "PreferredLanguageCode"
          },
          "vat_number": {
            "description": "VAT Number",
            "type": "string",
            "x-go-name": "VATNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Company3DSSettingsResponse": {
        "description": "Person3DSSettingsResponse",
        "properties": {
          "id": {
            "description": "ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "company_id": {
            "description": "Company ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "email": {
            "description": "Email",
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "description": "Mobile",
            "type": "string",
            "x-go-name": "Mobile"
          },
          "password": {
            "description": "Password",
            "type": "string",
            "x-go-name": "Password"
          },
          "force_usage": {
            "description": "ForceUsage",
            "type": "boolean",
            "x-go-name": "ForceUsage"
          },
          "card_default_settings": {
            "description": "CardDefaultSettings",
            "type": "boolean",
            "x-go-name": "CardDefaultSettings"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CompanyCorporateDocument": {
        "properties": {
          "id": {
            "description": "Document ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "company_id": {
            "description": "Company ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "type": {
            "description": "Document type",
            "enum": [
              "RegistrationIncorporationCertificate",
              "BeneficialOwnersCertificate"
            ],
            "type": "string",
            "x-go-name": "Type"
          },
          "file_name": {
            "description": "File name",
            "type": "string",
            "x-go-name": "FileName"
          },
          "file_size": {
            "description": "File size",
            "format": "int64",
            "type": "integer",
            "x-go-name": "FileSize"
          },
          "file_mime_type": {
            "description": "File mime type",
            "type": "string",
            "x-go-name": "FileMimeType"
          },
          "created_at": {
            "description": "Created at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "Created by",
            "type": "string",
            "x-go-name": "CreatedBy"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CompanyFCMToken": {
        "properties": {
          "id": {
            "description": "FCM Token ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "device_id": {
            "description": "Device ID",
            "type": "string",
            "x-go-name": "DeviceID"
          },
          "fcm_token": {
            "description": "FCM Token",
            "type": "string",
            "x-go-name": "FCMToken"
          },
          "push_notifications_enabled": {
            "description": "Push notifications enabled",
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          },
          "created_at": {
            "description": "Created at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "Created by",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "updated_at": {
            "description": "Updated at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "description": "Updated by",
            "type": "string",
            "x-go-name": "UpdatedBy"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CompanyLimits": {
        "properties": {
          "daily_purchase": {
            "description": "Daily purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyPurchase"
          },
          "daily_withdrawal": {
            "description": "Daily withdrawal amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyWithdrawal"
          },
          "daily_internet_purchase": {
            "description": "Daily internet purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyInternetPurchase"
          },
          "daily_contactless_purchase": {
            "description": "Daily contactless purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "DailyContactlessPurchase"
          },
          "weekly_purchase": {
            "description": "Weekly purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyPurchase"
          },
          "weekly_withdrawal": {
            "description": "Weekly withdrawal amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyWithdrawal"
          },
          "weekly_internet_purchase": {
            "description": "Weekly internet purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyInternetPurchase"
          },
          "weekly_contactless_purchase": {
            "description": "Weekly contactless purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "WeeklyContactlessPurchase"
          },
          "monthly_purchase": {
            "description": "Monthly purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyPurchase"
          },
          "monthly_withdrawal": {
            "description": "Monthly withdrawal amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyWithdrawal"
          },
          "monthly_internet_purchase": {
            "description": "Monthly internet purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyInternetPurchase"
          },
          "monthly_contactless_purchase": {
            "description": "Monthly contactless purchase amount",
            "format": "double",
            "maximum": 9999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MonthlyContactlessPurchase"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CompanyLimitsUsage": {
        "properties": {
          "daily": {
            "format": "double",
            "type": "number",
            "x-go-name": "Daily"
          },
          "weekly": {
            "format": "double",
            "type": "number",
            "x-go-name": "Weekly"
          },
          "monthly": {
            "format": "double",
            "type": "number",
            "x-go-name": "Monthly"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CompleteFee": {
        "properties": {
          "data": {
            "$ref": "#/definitions/CompleteFeeView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "complete"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "fee"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "CompleteFeeView": {
        "properties": {
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "amount": {
            "format": "double",
            "maximum": 0,
            "type": "number",
            "x-go-name": "Amount"
          },
          "authorization_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AuthorizationID"
          },
          "canceled_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CanceledAt"
          },
          "canceled_reason": {
            "type": "string",
            "x-go-name": "CanceledReason"
          },
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "completed_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CompletedAt"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "CurrencyCode"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "status": {
            "enum": [
              "Completed",
              "Canceled"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "transaction_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "TransactionID"
          },
          "type": {
            "$ref": "#/definitions/FeeType"
          },
          "updated_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "UpdatedAt"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "amount",
          "currency_code",
          "account_id",
          "created_at"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ConsumerEntryMode": {
        "enum": [
          "CAMERA_CAPTURED",
          "KEY_ENTERED",
          "UNKNOWN"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "CorporateDocumentFile": {
        "properties": {
          "Body": {
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "Name": {
            "type": "string"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateAccountPaymentRequest": {
        "properties": {
          "amount": {
            "description": "Amount",
            "format": "double",
            "maximum": 9999999999.99,
            "minimum": 0.01,
            "type": "number",
            "x-go-name": "Amount"
          },
          "description": {
            "description": "Description",
            "maxLength": 256,
            "type": "string",
            "x-go-name": "Description"
          },
          "from_account_id": {
            "description": "From account ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "FromAccountID"
          },
          "to_account_id": {
            "description": "To account ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ToAccountID"
          }
        },
        "required": [
          "amount",
          "description",
          "from_account_id",
          "to_account_id"
        ],
        "title": "CreateAccountPaymentRequest represents account payment request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateAccountPaymentResponse": {
        "properties": {
          "to_account": {
            "$ref": "#/definitions/Account"
          },
          "to_account_adjustment": {
            "$ref": "#/definitions/AccountAdjustment"
          },
          "from_account": {
            "$ref": "#/definitions/Account"
          },
          "from_account_adjustment": {
            "$ref": "#/definitions/AccountAdjustment"
          }
        },
        "title": "CreateAccountPaymentResponse represents account payment response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateAccountRequest": {
        "properties": {
          "person_id": {
            "description": "Account owner ID. Must be filled if account owner is cardholder.",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "company_id": {
            "description": "Account owner ID. Must be filled if account owner is company.",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "external_id": {
            "description": "External ID. Must be unique.",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "name": {
            "description": "Account name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Name"
          },
          "currency_code": {
            "description": "Currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "CurrencyCode"
          },
          "credit_limit": {
            "description": "Credit limit is required in case of program type \"Credit\" and can't be more than product setting CreditLimitMaxAmount.",
            "format": "double",
            "maximum": 999999.99,
            "minimum": 0,
            "type": "number",
            "x-go-name": "CreditLimit"
          },
          "used_credit": {
            "description": "Used credit cannot exceed Credit limit in request. Allowed only in case of program type \"Credit\".",
            "format": "double",
            "type": "number",
            "x-go-name": "UsedCredit"
          },
          "limits": {
            "$ref": "#/definitions/AccountLimits"
          },
          "top_up_details": {
            "$ref": "#/definitions/AccountTopUpDetails"
          }
        },
        "title": "CreateAccountRequest represents create account request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateAccountResponse": {
        "properties": {
          "account": {
            "$ref": "#/definitions/Account"
          }
        },
        "title": "CreateAccountResponse represents create account response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateAuthorizationRequest": {
        "properties": {
          "card_id": {
            "description": "Card ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "transaction_amount": {
            "description": "Transaction amount",
            "format": "double",
            "maximum": 9999999999.99,
            "minimum": -9999999999.99,
            "type": "number",
            "x-go-name": "TransactionAmount"
          },
          "transaction_currency_code": {
            "description": "Transaction currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "TransactionCurrencyCode"
          },
          "account_amount": {
            "description": "Account amount",
            "format": "double",
            "maximum": 9999999999.99,
            "minimum": -9999999999.99,
            "type": "number",
            "x-go-name": "AccountAmount"
          },
          "account_currency_code": {
            "description": "Account currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "AccountCurrencyCode"
          },
          "merchant_category_code": {
            "$ref": "#/definitions/MerchantCategoryCode"
          },
          "merchant_id": {
            "description": "Merchant ID",
            "maxLength": 20,
            "type": "string",
            "x-go-name": "MerchantID"
          },
          "merchant_name": {
            "description": "Merchant name",
            "maxLength": 40,
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "merchant_city": {
            "description": "Merchant city",
            "maxLength": 20,
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_country_code": {
            "description": "Merchant country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "terminal_id": {
            "description": "Terminal ID",
            "maxLength": 10,
            "type": "string",
            "x-go-name": "TerminalID"
          },
          "date": {
            "description": "Date\nTime must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "Date"
          },
          "type": {
            "description": "Authorization type",
            "enum": [
              "Unknown",
              "payWaveLowValuePurchase",
              "payWaveHighValuePurchase",
              "eCommercePurchase",
              "AccountVerification",
              "UnattendedCardholderActivatedTerminal",
              "AutomatedFuelDispenser",
              "AutomatedFuelDispenserConfirmation",
              "ATMWithdrawal",
              "ATMBalanceInquiry",
              "MOTOPurchase",
              "RecurringPayment",
              "StatusCheck",
              "POSPurchase",
              "ManualCashPurchase",
              "PurchaseWithCashback",
              "QuasiCashPurchase",
              "PINChange",
              "PINUnblock",
              "CreditVoucherAndMerchandiseReturn",
              "CardToCardPaymentCredit",
              "CardToCardPaymentDebit"
            ],
            "type": "string",
            "x-go-name": "Type"
          },
          "retrieval_reference_number": {
            "description": "RetrievalReferenceNumber",
            "maxLength": 12,
            "type": "string",
            "x-go-name": "RetrievalReferenceNumber"
          },
          "does_terminal_support_partial_approvals": {
            "description": "Does terminal support partial approvals",
            "type": "boolean",
            "x-go-name": "DoesTerminalSupportPartialApprovals"
          }
        },
        "required": [
          "card_id",
          "transaction_amount",
          "transaction_currency_code",
          "account_amount",
          "account_currency_code",
          "merchant_category_code",
          "merchant_id",
          "merchant_name",
          "merchant_city",
          "merchant_country_code",
          "terminal_id",
          "date",
          "type"
        ],
        "title": "CreateAuthorizationRequest is a request to create a new authorization.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/definitions/Authorization"
          },
          "transaction": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "title": "CreateAuthorizationResponse is the response to the request to create a new authorization.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCardBatchDeliveryAddress": {
        "properties": {
          "company_name": {
            "description": "Company name",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "CompanyName"
          },
          "address1": {
            "description": "Address #1",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "description": "Address #2",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address2"
          },
          "postal_code": {
            "description": "Postal code",
            "maxLength": 10,
            "type": "string",
            "x-go-name": "PostalCode"
          },
          "city": {
            "description": "City",
            "maxLength": 35,
            "type": "string",
            "x-go-name": "City"
          },
          "country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "CountryCode"
          },
          "batch_dispatch_method": {
            "$ref": "#/definitions/BatchDispatchMethod"
          },
          "phone": {
            "description": "Phone number is required in case of dispatch_method is \"DPDExpress\", \"DHLGlobalMail\", \"DHLGlobalMailTracked\" or \"DHLExpress\"",
            "type": "string",
            "x-go-name": "Phone"
          }
        },
        "required": [
          "address1",
          "postal_code",
          "city",
          "country_code"
        ],
        "title": "Card batch delivery address (required for physical cards).",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCardDeliveryAddress": {
        "description": "Required for `\"ChipAndPin\"` and `\"ChipAndPinAnonymous\"` cards.",
        "properties": {
          "first_name": {
            "description": "First name\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "last_name": {
            "description": "Last name\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "LastName"
          },
          "company_name": {
            "description": "Company name\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 45,
            "minLength": 2,
            "type": "string",
            "x-go-name": "CompanyName"
          },
          "address1": {
            "description": "Address #1\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "description": "Address #2\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address2"
          },
          "postal_code": {
            "description": "Postal code",
            "maxLength": 10,
            "type": "string",
            "x-go-name": "PostalCode"
          },
          "city": {
            "description": "City\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 35,
            "type": "string",
            "x-go-name": "City"
          },
          "country_code": {
            "description": "Country code",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "CountryCode"
          },
          "dispatch_method": {
            "$ref": "#/definitions/CreateCardDeliveryAddressDispatchMethod"
          },
          "phone": {
            "description": "Phone number is required in case of dispatch_method is \"DPDExpress\", \"DHLGlobalMail\", \"DHLGlobalMailTracked\" or \"DHLExpress\"",
            "type": "string",
            "x-go-name": "Phone"
          }
        },
        "required": [
          "address1",
          "postal_code",
          "city",
          "country_code"
        ],
        "title": "Card delivery address.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCardDeliveryAddressDispatchMethod": {
        "$ref": "#/definitions/SingleCardDispatchMethod",
        "description": "Use [Cards dispatch methods](#operation/CardsDispatchMethods) for get allowed methods by country"
      },
      "CreateCardEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/CreateCardEventView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "create"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "card"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "CreateCardEventView": {
        "properties": {
          "3d_secure_settings": {
            "$ref": "#/definitions/CardEventCard3DSecureSettings"
          },
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_metadata_profile_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "card_processor_card_id": {
            "type": "string",
            "x-go-name": "CardProcessorCardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "delivery_address": {
            "$ref": "#/definitions/CardEventDeliveryAddress"
          },
          "embossing_name": {
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "expiry_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_disposable": {
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "is_paid": {
            "type": "boolean",
            "x-go-name": "IsPaid"
          },
          "limits": {
            "$ref": "#/definitions/CardEventLimits"
          },
          "masked_card_number": {
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "personalization_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "predecessor_card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "renew_automatically": {
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "security": {
            "$ref": "#/definitions/CardEventSecurity"
          },
          "status": {
            "enum": [
              "Created"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "type": {
            "enum": [
              "ChipAndPin",
              "ChipAndPinAnonymous",
              "Sticker",
              "Virtual"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "is_paid",
          "created_at",
          "created_by",
          "expiry_date",
          "is_disposable",
          "masked_card_number",
          "renew_automatically",
          "personalization_product_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "CreateCardMerchantRulesRequest": {
        "properties": {
          "card_merchant_rules": {
            "description": "Card merchant rules",
            "items": {
              "$ref": "#/definitions/CardMerchantRuleFields"
            },
            "type": "array",
            "x-go-name": "CardMerchantRules"
          }
        },
        "required": [
          "card_merchant_rules"
        ],
        "title": "CreateCardMerchantRulesRequest represents create card merchant rules request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCardMerchantRulesResponse": {
        "properties": {
          "card_merchant_rules": {
            "description": "Card merchant rules",
            "items": {
              "$ref": "#/definitions/CardMerchantRule"
            },
            "type": "array",
            "x-go-name": "CardMerchantRules"
          }
        },
        "title": "CreateCardMerchantRulesResponse represents create card merchant rules response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCardRequest": {
        "properties": {
          "predecessor_card_id": {
            "description": "Predecessor card ID.\nIs used to renew the card.",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "account_id": {
            "description": "Card account ID. Required for `\"ChipAndPin\"` and `\"Virtual\"` CardType.",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "external_id": {
            "description": "External ID must be unique",
            "maxLength": 50,
            "type": "string",
            "uniqueItems": true,
            "x-go-name": "ExternalID"
          },
          "type": {
            "$ref": "#/definitions/APICardType"
          },
          "name": {
            "description": "Card name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Name"
          },
          "security": {
            "$ref": "#/definitions/CreateCardSecurity"
          },
          "3d_secure_settings": {
            "$ref": "#/definitions/Card3DSecureSettings"
          },
          "delivery_address": {
            "$ref": "#/definitions/CreateCardDeliveryAddress"
          },
          "limits": {
            "$ref": "#/definitions/CardLimits"
          },
          "personalization_product_code": {
            "description": "Personalization product code",
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "carrier_type": {
            "$ref": "#/definitions/CarrierType"
          },
          "expiry_days": {
            "description": "Expiry days",
            "format": "int64",
            "maximum": 1825,
            "minimum": 1,
            "type": "integer",
            "x-go-name": "ExpiryDays"
          },
          "expiry_days_round": {
            "description": "When set to true rounds expiry days to end of month",
            "type": "boolean",
            "x-go-name": "RoundExpiryDays"
          },
          "encrypted_pin": {
            "description": "Encrypted PIN, if present then this PIN will be selected for card. Encrypted PIN must be base64 encoded.",
            "type": "string",
            "x-go-name": "EncryptedPIN"
          },
          "embossing_name": {
            "description": "Embossing name, if present then this embossing name will be selected for name on the card.",
            "maxLength": 26,
            "minLength": 2,
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "is_disposable": {
            "description": "Whether card is disposable. Allowed only for CardTypeVirtual",
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "separated_embossing_name": {
            "$ref": "#/definitions/SeparatedEmbossingName"
          },
          "embossing_company_name": {
            "description": "Embossing company name, used only for business cards and specific personalization product codes",
            "maxLength": 26,
            "minLength": 2,
            "type": "string",
            "x-go-name": "EmbossingCompanyName"
          },
          "card_fees": {
            "description": "CardFees",
            "items": {
              "$ref": "#/definitions/RequestCardFee"
            },
            "type": "array",
            "x-go-name": "CardFees"
          },
          "card_notification_settings": {
            "$ref": "#/definitions/CardNotificationSettings"
          }
        },
        "required": [
          "type"
        ],
        "title": "CreateCardRequest represents create card request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCardResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "CreateCardResponse represents create card response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCardSecurity": {
        "properties": {
          "contactless_enabled": {
            "description": "Contactless enabled",
            "type": "boolean",
            "x-go-name": "ContactlessEnabled"
          },
          "withdrawal_enabled": {
            "description": "Withdrawal enabled",
            "type": "boolean",
            "x-go-name": "WithdrawalEnabled"
          },
          "internet_purchase_enabled": {
            "description": "Internet purchase enabled",
            "type": "boolean",
            "x-go-name": "InternetPurchaseEnabled"
          },
          "overall_limits_enabled": {
            "description": "Overall limits enabled. Cannot be enabled together with all time limits.",
            "type": "boolean",
            "x-go-name": "OverallLimitsEnabled"
          },
          "all_time_limits_enabled": {
            "description": "All time limits enabled. Cannot be enabled together with overall limits.",
            "type": "boolean",
            "x-go-name": "AllTimeLimitsEnabled"
          }
        },
        "title": "Card Security settings.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCardUserRequest": {
        "properties": {
          "first_name": {
            "description": "First name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "last_name": {
            "description": "Last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "LastName"
          },
          "email": {
            "description": "E-mail address",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Mobile"
          }
        },
        "required": [
          "mobile"
        ],
        "title": "CreateCardUserRequest represents create card user request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCardUserResponse": {
        "properties": {
          "user": {
            "$ref": "#/definitions/UserWithProfile"
          }
        },
        "title": "CreateCardUserResponse represents create card user response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCardholder3DSSettingsRequest": {
        "properties": {
          "email": {
            "description": "Email \u003cbr\u003e\n__Required if mobile is empty__",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed. \u003cbr\u003e\n__Required if email is empty__",
            "type": "string",
            "x-go-name": "Mobile"
          },
          "password": {
            "description": "Password. Allowed to use characters: A-Z a-z 0-9 ! \" # ; : ? * \u0026 ( ) + = / \\ , . [ ] { }.",
            "maxLength": 36,
            "minLength": 8,
            "type": "string",
            "x-go-name": "Password"
          },
          "force_usage": {
            "description": "ForceUsage is using to force cardholder settings for 3DS step-up methods",
            "type": "boolean",
            "x-go-name": "ForceUsage"
          },
          "card_default_settings": {
            "description": "CardDefaultSettings is using to ensure that new cards are created with cardholder 3DS settings",
            "type": "boolean",
            "x-go-name": "CardDefaultSettings"
          }
        },
        "required": [
          "password"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCompanyRequest": {
        "properties": {
          "name": {
            "description": "Company name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Name"
          },
          "registration_number": {
            "description": "Registration number",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "RegistrationNumber"
          },
          "registration_address": {
            "$ref": "#/definitions/Address"
          },
          "headquarter_address": {
            "$ref": "#/definitions/Address"
          },
          "risk_profile": {
            "$ref": "#/definitions/APIRiskProfile"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed. \u003cbr\u003e\n__Required if Email is empty.__",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Mobile"
          },
          "email": {
            "description": "Email. \u003cbr\u003e\n__Required if Mobile is empty.__",
            "format": "email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "industry_type": {
            "$ref": "#/definitions/ActivityType"
          },
          "date_of_incorporation": {
            "description": "Date Of Incorporation.",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DateOfIncorporation"
          },
          "is_sanctions_related": {
            "description": "Is Sanctions Related. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "is_adverse_media_involved": {
            "description": "Is Adverse Media Involved. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "preferred_language_code": {
            "description": "Preferred language code",
            "enum": [
              "ABK",
              "AAR",
              "AFR",
              "AKA",
              "SQI",
              "AMH",
              "ARA",
              "ARG",
              "HYE",
              "ASM",
              "AVA",
              "AVE",
              "AYM",
              "AZE",
              "BAM",
              "BAL",
              "BAK",
              "EUS",
              "BEL",
              "BEN",
              "BIH",
              "BIS",
              "BOS",
              "BRE",
              "BUL",
              "MYA",
              "CAT",
              "CHA",
              "CHE",
              "NYA",
              "ZHO",
              "CHV",
              "COR",
              "COS",
              "CRE",
              "HRV",
              "CES",
              "DAN",
              "DIV",
              "NLD",
              "DZO",
              "ENG",
              "EPO",
              "EST",
              "EWE",
              "FAO",
              "FIJ",
              "FIN",
              "FRA",
              "FUL",
              "GLG",
              "KAT",
              "DEU",
              "ELL",
              "GRN",
              "GUJ",
              "HAT",
              "HAU",
              "HEB",
              "HER",
              "HIN",
              "HMO",
              "HUN",
              "INA",
              "IND",
              "ILE",
              "GLE",
              "IBO",
              "IPK",
              "IDO",
              "ISL",
              "ITA",
              "IKU",
              "JPN",
              "JAV",
              "KAL",
              "KAN",
              "KAU",
              "KAS",
              "KAZ",
              "KHM",
              "KIK",
              "KIN",
              "KIR",
              "KOM",
              "KON",
              "KOR",
              "KUR",
              "KUA",
              "LAT",
              "LTZ",
              "LUG",
              "LIJ",
              "LIN",
              "LAO",
              "LIT",
              "LUB",
              "LAV",
              "GLV",
              "MKD",
              "MLG",
              "MSA",
              "MAL",
              "MLT",
              "MRI",
              "MAR",
              "MAH",
              "MON",
              "NAU",
              "NAV",
              "NDE",
              "NEP",
              "NDO",
              "NOB",
              "NNO",
              "NOR",
              "III",
              "NBL",
              "OCI",
              "OJI",
              "CHU",
              "ORM",
              "ORI",
              "OSS",
              "PAN",
              "PLI",
              "FAS",
              "POL",
              "PUS",
              "POR",
              "QUE",
              "ROH",
              "RUN",
              "RON",
              "RUS",
              "SAN",
              "SRD",
              "SND",
              "SME",
              "SMO",
              "SAG",
              "SRP",
              "GLA",
              "SNA",
              "SIN",
              "SLK",
              "SLV",
              "SOM",
              "SOT",
              "SPA",
              "SUN",
              "SWA",
              "SSW",
              "SWE",
              "TAM",
              "TEL",
              "TGK",
              "THA",
              "TIR",
              "BOD",
              "TUK",
              "TGL",
              "TSN",
              "TON",
              "TUR",
              "TSO",
              "TAT",
              "TWI",
              "TAH",
              "UIG",
              "UKR",
              "URD",
              "UZB",
              "VEN",
              "VIE",
              "VOL",
              "WLN",
              "CYM",
              "WOL",
              "FRY",
              "XHO",
              "YID",
              "YOR",
              "ZHA",
              "ZUL"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "PreferredLanguageCode"
          },
          "vat_number": {
            "description": "VAT Number",
            "maxLength": 30,
            "type": "string",
            "x-go-name": "VATNumber"
          },
          "push_notifications_enabled": {
            "description": "Push notifications enabled. \u003cbr\u003e\nIf true, push notifications are enabled for the company. \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          }
        },
        "required": [
          "name",
          "registration_number",
          "registration_address",
          "headquarter_address",
          "date_of_incorporation"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCompanyResponse": {
        "properties": {
          "company": {
            "$ref": "#/definitions/Company"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCompanySwaggerModel": {
        "properties": {
          "name": {
            "description": "Company name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Name"
          },
          "registration_number": {
            "description": "Registration number",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "RegistrationNumber"
          },
          "registration_address": {
            "$ref": "#/definitions/Address"
          },
          "headquarter_address": {
            "$ref": "#/definitions/Address"
          },
          "risk_profile": {
            "$ref": "#/definitions/APIRiskProfile"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed. \u003cbr\u003e\n__Required if Email is empty.__",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Mobile"
          },
          "email": {
            "description": "Email. \u003cbr\u003e\n__Required if Mobile is empty.__",
            "format": "email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "industry_type": {
            "$ref": "#/definitions/IndustryType"
          },
          "date_of_incorporation": {
            "description": "Date Of Incorporation.",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DateOfIncorporation"
          },
          "is_sanctions_related": {
            "description": "Is Sanctions Related. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "is_adverse_media_involved": {
            "description": "Is Adverse Media Involved. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "preferred_language_code": {
            "description": "Preferred language code",
            "enum": [
              "ABK",
              "AAR",
              "AFR",
              "AKA",
              "SQI",
              "AMH",
              "ARA",
              "ARG",
              "HYE",
              "ASM",
              "AVA",
              "AVE",
              "AYM",
              "AZE",
              "BAM",
              "BAL",
              "BAK",
              "EUS",
              "BEL",
              "BEN",
              "BIH",
              "BIS",
              "BOS",
              "BRE",
              "BUL",
              "MYA",
              "CAT",
              "CHA",
              "CHE",
              "NYA",
              "ZHO",
              "CHV",
              "COR",
              "COS",
              "CRE",
              "HRV",
              "CES",
              "DAN",
              "DIV",
              "NLD",
              "DZO",
              "ENG",
              "EPO",
              "EST",
              "EWE",
              "FAO",
              "FIJ",
              "FIN",
              "FRA",
              "FUL",
              "GLG",
              "KAT",
              "DEU",
              "ELL",
              "GRN",
              "GUJ",
              "HAT",
              "HAU",
              "HEB",
              "HER",
              "HIN",
              "HMO",
              "HUN",
              "INA",
              "IND",
              "ILE",
              "GLE",
              "IBO",
              "IPK",
              "IDO",
              "ISL",
              "ITA",
              "IKU",
              "JPN",
              "JAV",
              "KAL",
              "KAN",
              "KAU",
              "KAS",
              "KAZ",
              "KHM",
              "KIK",
              "KIN",
              "KIR",
              "KOM",
              "KON",
              "KOR",
              "KUR",
              "KUA",
              "LAT",
              "LTZ",
              "LUG",
              "LIJ",
              "LIN",
              "LAO",
              "LIT",
              "LUB",
              "LAV",
              "GLV",
              "MKD",
              "MLG",
              "MSA",
              "MAL",
              "MLT",
              "MRI",
              "MAR",
              "MAH",
              "MON",
              "NAU",
              "NAV",
              "NDE",
              "NEP",
              "NDO",
              "NOB",
              "NNO",
              "NOR",
              "III",
              "NBL",
              "OCI",
              "OJI",
              "CHU",
              "ORM",
              "ORI",
              "OSS",
              "PAN",
              "PLI",
              "FAS",
              "POL",
              "PUS",
              "POR",
              "QUE",
              "ROH",
              "RUN",
              "RON",
              "RUS",
              "SAN",
              "SRD",
              "SND",
              "SME",
              "SMO",
              "SAG",
              "SRP",
              "GLA",
              "SNA",
              "SIN",
              "SLK",
              "SLV",
              "SOM",
              "SOT",
              "SPA",
              "SUN",
              "SWA",
              "SSW",
              "SWE",
              "TAM",
              "TEL",
              "TGK",
              "THA",
              "TIR",
              "BOD",
              "TUK",
              "TGL",
              "TSN",
              "TON",
              "TUR",
              "TSO",
              "TAT",
              "TWI",
              "TAH",
              "UIG",
              "UKR",
              "URD",
              "UZB",
              "VEN",
              "VIE",
              "VOL",
              "WLN",
              "CYM",
              "WOL",
              "FRY",
              "XHO",
              "YID",
              "YOR",
              "ZHA",
              "ZUL"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "PreferredLanguageCode"
          },
          "vat_number": {
            "description": "VAT Number",
            "maxLength": 30,
            "type": "string",
            "x-go-name": "VATNumber"
          },
          "push_notifications_enabled": {
            "description": "Push notifications enabled. \u003cbr\u003e\nIf true, push notifications are enabled for the company. \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          }
        },
        "required": [
          "name",
          "registration_number",
          "registration_address",
          "headquarter_address",
          "date_of_incorporation"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCompanyUserRequest": {
        "properties": {
          "first_name": {
            "description": "First name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "last_name": {
            "description": "Last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "LastName"
          },
          "email": {
            "description": "E-mail address",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Mobile"
          }
        },
        "required": [
          "mobile"
        ],
        "title": "CreateCompanyUserRequest represents create company user request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateCompanyUserResponse": {
        "properties": {
          "user_profile": {
            "$ref": "#/definitions/UserWithProfile"
          }
        },
        "title": "CreateCompanyUserResponse represents create company user response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateFee": {
        "properties": {
          "data": {
            "$ref": "#/definitions/CreateFeeView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "create"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "fee"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "CreateFeeView": {
        "properties": {
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "amount": {
            "format": "double",
            "maximum": 0,
            "type": "number",
            "x-go-name": "Amount"
          },
          "authorization_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AuthorizationID"
          },
          "canceled_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CanceledAt"
          },
          "canceled_reason": {
            "type": "string",
            "x-go-name": "CanceledReason"
          },
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "completed_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CompletedAt"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "CurrencyCode"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "status": {
            "$ref": "#/definitions/FeeStatus"
          },
          "transaction_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "TransactionID"
          },
          "type": {
            "$ref": "#/definitions/FeeType"
          },
          "updated_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "UpdatedAt"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "amount",
          "currency_code",
          "account_id",
          "created_at"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "CreateKYCCheckRequest": {
        "properties": {
          "applicant_id": {
            "description": "Applicant ID",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "ApplicantID"
          },
          "person_id": {
            "description": "Person ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "idv_result": {
            "$ref": "#/definitions/IDVResult"
          }
        },
        "required": [
          "applicant_id",
          "person_id"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateKYCCheckResponse": {
        "properties": {
          "kyc_check_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "KYCCheckID"
          }
        },
        "title": "CreateKYCCheckResponse represents create KYC check response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateOnfidoCheckResponse": {
        "properties": {
          "person": {
            "$ref": "#/definitions/Person"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreatePersonAdditionalInfoBatchRequest": {
        "properties": {
          "person_additional_infos": {
            "description": "Person additional info",
            "items": {
              "$ref": "#/definitions/PersonAdditionalInfoFields"
            },
            "type": "array",
            "x-go-name": "PersonAdditionalInfos"
          }
        },
        "required": [
          "person_additional_infos"
        ],
        "title": "CreatePersonAdditionalInfoBatchRequest is a request to create person additional info.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreatePersonAdditionalInfoBatchResponse": {
        "properties": {
          "person_additional_infos": {
            "items": {
              "$ref": "#/definitions/PersonAdditionalInfo"
            },
            "type": "array",
            "x-go-name": "PersonAdditionalInfos"
          }
        },
        "title": "CreatePersonAdditionalInfoBatchResponse is the response to the request to create person additional info batch.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreatePersonRequest": {
        "properties": {
          "person": {
            "$ref": "#/definitions/PersonFields"
          }
        },
        "required": [
          "person"
        ],
        "title": "CreatePersonRequest is a request to create a new person.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreatePersonResponse": {
        "properties": {
          "person": {
            "$ref": "#/definitions/Person"
          }
        },
        "title": "CreatePersonResponse is the response to the request to create a new person.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreatePersonUserRequest": {
        "properties": {
          "first_name": {
            "description": "First name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "last_name": {
            "description": "Last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "LastName"
          },
          "email": {
            "description": "E-mail address",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Mobile"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email",
          "mobile"
        ],
        "title": "CreatePersonUserRequest represents create person user request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreatePersonUserResponse": {
        "properties": {
          "user_profile": {
            "$ref": "#/definitions/UserWithProfile"
          }
        },
        "title": "CreatePersonUserResponse represents create person user response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateTemplateRequest": {
        "properties": {
          "message_type": {
            "description": "Template message type",
            "enum": [
              "NotifyCardholderOnChipAndPinCardActivation",
              "NotifyCardholderOnDisabledInternetPurchase",
              "NotifyCardholderOnInsufficientFunds",
              "NotifyCardholderOnStickerActivation",
              "NotifyCardOrder",
              "SendAdjustAccountBalanceToCardholder",
              "SendForgotPasswordLinkToCardholder",
              "SendPINToCardholderForChipAndPin",
              "SendPINToCardholderForSticker",
              "SendTokenAuthenticationOTP",
              "SendLinkToSetPasswordToCardholder",
              "Send3DSPasswordOnInternetPurchasesEnabled",
              "Send3DSOTP",
              "Send3DSPasswordOnCardCreation",
              "Send3DSPasswordOnCardActivation",
              "Send3DSPasswordToCardholder",
              "SendCardBlockNotificationToCardholder",
              "SendTokenCreateNotificationToCardHolder",
              "SendTokenCreateApplePayNotificationToCardHolder",
              "SendVerificationSMSToCardholder",
              "SendVerificationEmailToCardholder",
              "SendApplePayCardRemovedNotification",
              "SendApplePayCardRenewedNotification",
              "SendOTPToCardholderIPhone",
              "SendOTPToCardholderIPad",
              "SendOTPToCardholderAppleWatch",
              "SendOTPToCardholderIMac",
              "SendVerificationEmailToClient",
              "SendInactiveCustomerApplePayNotificationToCardHolder",
              "SendDeclinedAuthorizationNotificationToCardholder",
              "SendFraudDeclinedAuthorizationApplePayNotificationToCardholder",
              "SendPaymentNotificationToCardholder",
              "SendCustomNotificationToCardholder",
              "SendAbandonedProvisioningApplePayNotificationToCardholder",
              "SendPendingProvisioningApplePayNotificationToCardholder",
              "SendLowSettlementRiskLimitNotification",
              "ShareholderBoardMemberKYCVerfication",
              "NotifyClientOnSuccessfulVerification",
              "SendInvitationSMSToEmployee",
              "NotifyClientOnRejection",
              "SendActivationOTPCode",
              "SendInvitationToCardUser",
              "SendRepresentativeVerificationLink",
              "NotifyClientOnRejectionOfVerificationFields",
              "CompanyRequestedAddPersonAsEmployee",
              "CompanyInvitedEmployee",
              "CompanyDeletedEmployee",
              "NotifyClientAboutVibanCreation",
              "ClientFrozen",
              "ClientUnfrozen",
              "TerminateByClient",
              "TerminateByServiceProvider",
              "TerminateByRegulator",
              "RaiseCompanyLimitsRequest",
              "RaiseCompanyLimitsThanks",
              "TopUpNotification",
              "SendMultiCurrencyRequest",
              "PaymentReminderNotification",
              "SendFraudAlert",
              "SendCloseClientCancellation",
              "SendSuccessfulOnboardingNotification",
              "DebtNegativeBalanceNotification",
              "DebtNegativeBalanceNotificationReminder",
              "FeesStatementNotification",
              "SendMobileOTP",
              "SendStatementToUser",
              "Send3DSAttemptNotification",
              "CompleteRegistrationReminder",
              "UploadCorporateDocumentsReminder",
              "IdentityVerificationReminder",
              "SignAgreementReminder",
              "UnableToProcessPaymentNotification",
              "UnableToProcessPaymentRepeatNotification",
              "ReceiptsReminder",
              "SendPurchasePaymentNotificationToCardholder",
              "SendWithdrawalPaymentNotificationToCardholder",
              "SendZeroPaymentNotificationToCardholder",
              "SendReversalPaymentNotificationToCardholder",
              "NotifyAboutCardActivation"
            ],
            "maxLength": 100,
            "type": "string",
            "x-go-name": "MessageType"
          },
          "delivery_type": {
            "$ref": "#/definitions/DeliveryType"
          },
          "language_code": {
            "description": "Template language code",
            "enum": [
              "ABK",
              "AAR",
              "AFR",
              "AKA",
              "SQI",
              "AMH",
              "ARA",
              "ARG",
              "HYE",
              "ASM",
              "AVA",
              "AVE",
              "AYM",
              "AZE",
              "BAM",
              "BAL",
              "BAK",
              "EUS",
              "BEL",
              "BEN",
              "BIH",
              "BIS",
              "BOS",
              "BRE",
              "BUL",
              "MYA",
              "CAT",
              "CHA",
              "CHE",
              "NYA",
              "ZHO",
              "CHV",
              "COR",
              "COS",
              "CRE",
              "HRV",
              "CES",
              "DAN",
              "DIV",
              "NLD",
              "DZO",
              "ENG",
              "EPO",
              "EST",
              "EWE",
              "FAO",
              "FIJ",
              "FIN",
              "FRA",
              "FUL",
              "GLG",
              "KAT",
              "DEU",
              "ELL",
              "GRN",
              "GUJ",
              "HAT",
              "HAU",
              "HEB",
              "HER",
              "HIN",
              "HMO",
              "HUN",
              "INA",
              "IND",
              "ILE",
              "GLE",
              "IBO",
              "IPK",
              "IDO",
              "ISL",
              "ITA",
              "IKU",
              "JPN",
              "JAV",
              "KAL",
              "KAN",
              "KAU",
              "KAS",
              "KAZ",
              "KHM",
              "KIK",
              "KIN",
              "KIR",
              "KOM",
              "KON",
              "KOR",
              "KUR",
              "KUA",
              "LAT",
              "LTZ",
              "LUG",
              "LIJ",
              "LIN",
              "LAO",
              "LIT",
              "LUB",
              "LAV",
              "GLV",
              "MKD",
              "MLG",
              "MSA",
              "MAL",
              "MLT",
              "MRI",
              "MAR",
              "MAH",
              "MON",
              "NAU",
              "NAV",
              "NDE",
              "NEP",
              "NDO",
              "NOB",
              "NNO",
              "NOR",
              "III",
              "NBL",
              "OCI",
              "OJI",
              "CHU",
              "ORM",
              "ORI",
              "OSS",
              "PAN",
              "PLI",
              "FAS",
              "POL",
              "PUS",
              "POR",
              "QUE",
              "ROH",
              "RUN",
              "RON",
              "RUS",
              "SAN",
              "SRD",
              "SND",
              "SME",
              "SMO",
              "SAG",
              "SRP",
              "GLA",
              "SNA",
              "SIN",
              "SLK",
              "SLV",
              "SOM",
              "SOT",
              "SPA",
              "SUN",
              "SWA",
              "SSW",
              "SWE",
              "TAM",
              "TEL",
              "TGK",
              "THA",
              "TIR",
              "BOD",
              "TUK",
              "TGL",
              "TSN",
              "TON",
              "TUR",
              "TSO",
              "TAT",
              "TWI",
              "TAH",
              "UIG",
              "UKR",
              "URD",
              "UZB",
              "VEN",
              "VIE",
              "VOL",
              "WLN",
              "CYM",
              "WOL",
              "FRY",
              "XHO",
              "YID",
              "YOR",
              "ZHA",
              "ZUL"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "LanguageCode"
          },
          "body": {
            "description": "Template body",
            "type": "string",
            "x-go-name": "Body"
          },
          "subject": {
            "description": "Template subject",
            "type": "string",
            "x-go-name": "Subject"
          }
        },
        "required": [
          "message_type",
          "delivery_type",
          "language_code",
          "body"
        ],
        "title": "CreateTemplateRequest is a request to create a new template.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateTemplateResponse": {
        "properties": {
          "template": {
            "$ref": "#/definitions/Template"
          }
        },
        "title": "CreateTemplateResponse is the response to the request to create a new template.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateTransactionRequest": {
        "properties": {
          "card_id": {
            "description": "Card ID to which transaction belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "purchase_date": {
            "description": "Date-time of the transaction\nTime must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "PurchaseDate"
          },
          "group": {
            "$ref": "#/definitions/TransactionGroup"
          },
          "transaction_amount": {
            "description": "Transaction amount",
            "format": "double",
            "maximum": 9999999999.99,
            "minimum": -9999999999.99,
            "type": "number",
            "x-go-name": "TransactionAmount"
          },
          "transaction_currency_code": {
            "description": "Transaction currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "TransactionCurrencyCode"
          },
          "account_amount": {
            "description": "Account amount",
            "format": "double",
            "maximum": 9999999999.99,
            "minimum": -9999999999.99,
            "type": "number",
            "x-go-name": "AccountAmount"
          },
          "account_currency_code": {
            "description": "Account currency in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "AccountCurrencyCode"
          },
          "merchant_category_code": {
            "$ref": "#/definitions/MerchantCategoryCode"
          },
          "merchant_id": {
            "description": "Merchant ID",
            "maxLength": 15,
            "type": "string",
            "x-go-name": "MerchantID"
          },
          "terminal_id": {
            "description": "Terminal ID",
            "maxLength": 8,
            "type": "string",
            "x-go-name": "TerminalID"
          },
          "merchant_name": {
            "description": "Merchant name",
            "maxLength": 25,
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "merchant_postal_code": {
            "default": "str",
            "description": "Merchant postal code",
            "maxLength": 5,
            "type": "string",
            "x-go-name": "MerchantPostalCode"
          },
          "merchant_city": {
            "description": "Merchant city",
            "maxLength": 13,
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_country_code": {
            "description": "Merchant country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "acquirer_reference_number": {
            "description": "Acquirer transaction reference number",
            "maxLength": 23,
            "type": "string",
            "x-go-name": "AcquirerReferenceNumber"
          },
          "acquirer_business_id": {
            "description": "Acquirer business ID",
            "maxLength": 8,
            "type": "string",
            "x-go-name": "AcquirerBusinessID"
          },
          "transaction_code": {
            "$ref": "#/definitions/TransactionCode"
          },
          "transaction_identifier": {
            "description": "Transaction identifier",
            "maxLength": 15,
            "type": "string",
            "x-go-name": "TransactionIdentifier"
          },
          "processed_at": {
            "description": "Date-time when transaction has been processed\nTime must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "ProcessedAt"
          }
        },
        "required": [
          "card_id",
          "group",
          "transaction_amount",
          "transaction_currency_code",
          "account_amount",
          "account_currency_code",
          "merchant_category_code",
          "merchant_id",
          "terminal_id",
          "merchant_name",
          "merchant_postal_code",
          "merchant_city",
          "merchant_country_code",
          "acquirer_reference_number",
          "acquirer_business_id",
          "transaction_code",
          "transaction_identifier",
          "processed_at"
        ],
        "title": "CreateTransactionRequest is a request to create a new transaction.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "CreateTransactionResponse": {
        "properties": {
          "transaction": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "title": "CreateTransactionResponse is the response to the request to create a new transaction.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DeactivateCompanyResponse": {
        "properties": {
          "company": {
            "$ref": "#/definitions/Company"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DeactivatePersonResponse": {
        "properties": {
          "person": {
            "$ref": "#/definitions/Person"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DeactivatePersonsBatchRequest": {
        "properties": {
          "person_ids": {
            "description": "Person IDs",
            "items": {
              "format": "uuid4",
              "type": "string"
            },
            "type": "array",
            "x-go-name": "PersonIDs"
          }
        },
        "required": [
          "person_ids"
        ],
        "title": "DeactivatePersonsBatchRequest is a request to deactivate multiple persons.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DeactivatePersonsBatchResponse": {
        "properties": {
          "persons": {
            "items": {
              "$ref": "#/definitions/Person"
            },
            "type": "array",
            "x-go-name": "Persons"
          }
        },
        "title": "DeactivatePersonsBatchResponse is the response to the request to deactivate multiple persons.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DeactivateTokenRequest": {
        "properties": {
          "reason": {
            "description": "Deactivate reason.",
            "maxLength": 254,
            "type": "string",
            "x-go-name": "Reason"
          }
        },
        "required": [
          "reason"
        ],
        "title": "DeactivateTokenRequest represents deactivate token request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DeactivateTokenResponse": {
        "properties": {
          "token": {
            "$ref": "#/definitions/Token"
          }
        },
        "title": "DeactivateTokenResponse returns related token.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DecisionRequestAuthorizationView": {
        "properties": {
          "data": {
            "$ref": "#/definitions/EventAuthorization"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "decision_request"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "authorization"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "DecisionRequestBalanceInquiryAuthorization": {
        "properties": {
          "account_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "AccountAmount"
          },
          "account_currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "AccountCurrencyCode"
          },
          "acquiring_institution_country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "AcquiringInstitutionCountryCode"
          },
          "acquiring_institution_id": {
            "type": "string",
            "x-go-name": "AcquiringInstitutionID"
          },
          "approval_code": {
            "type": "string",
            "x-go-name": "ApprovalCode"
          },
          "approved_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "ApprovedAmount"
          },
          "card": {
            "$ref": "#/definitions/AuthorizationCard"
          },
          "card_3d_secure_authentication_type": {
            "type": "string",
            "x-go-name": "Card3DSecureAuthenticationType"
          },
          "card_3d_secure_cavv_validation_result": {
            "type": "string",
            "x-go-name": "Card3DSecureCAVVValidationResult"
          },
          "card_3d_secure_indicator": {
            "type": "string",
            "x-go-name": "Card3DSecureIndicator"
          },
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "Date"
          },
          "does_terminal_support_partial_approvals": {
            "type": "boolean",
            "x-go-name": "DoesTerminalSupportPartialApprovals"
          },
          "fees_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "FeesAmount"
          },
          "group": {
            "enum": [
              "Withdraw",
              "Deposit",
              "Purchase",
              "InternetPurchase",
              "Other",
              "PINManagement",
              "Refund"
            ],
            "type": "string",
            "x-go-name": "Group"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_contactless": {
            "type": "boolean",
            "x-go-name": "IsContactless"
          },
          "is_declined": {
            "type": "boolean",
            "x-go-name": "IsDeclined"
          },
          "is_mass_transit": {
            "type": "boolean",
            "x-go-name": "IsMassTransit"
          },
          "is_reversal": {
            "type": "boolean",
            "x-go-name": "IsReversal"
          },
          "merchant_category_code": {
            "type": "string",
            "x-go-name": "MerchantCategoryCode"
          },
          "merchant_city": {
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "merchant_id": {
            "type": "string",
            "x-go-name": "MerchantID"
          },
          "merchant_name": {
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "original_authorization_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "OriginalAuthorizationID"
          },
          "response_code": {
            "type": "string",
            "x-go-name": "ResponseCode"
          },
          "retrieval_reference_number": {
            "type": "string",
            "x-go-name": "RetrievalReferenceNumber"
          },
          "terminal_id": {
            "type": "string",
            "x-go-name": "TerminalID"
          },
          "transaction_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionAmount"
          },
          "transaction_currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "TransactionCurrencyCode"
          },
          "type": {
            "enum": [
              "ATMBalanceInquiry"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "card_id",
          "date",
          "account_amount",
          "account_currency_code",
          "group",
          "is_contactless",
          "is_mass_transit",
          "transaction_amount",
          "transaction_currency_code",
          "is_reversal",
          "is_declined",
          "does_terminal_support_partial_approvals"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "DecisionRequestBalanceInquiryAuthorizationView": {
        "properties": {
          "data": {
            "$ref": "#/definitions/DecisionRequestBalanceInquiryAuthorization"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "decision_request"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "authorization"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "DecisionRequestPartialAuthorization": {
        "properties": {
          "account_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "AccountAmount"
          },
          "account_currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "AccountCurrencyCode"
          },
          "acquiring_institution_country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "AcquiringInstitutionCountryCode"
          },
          "acquiring_institution_id": {
            "type": "string",
            "x-go-name": "AcquiringInstitutionID"
          },
          "approval_code": {
            "type": "string",
            "x-go-name": "ApprovalCode"
          },
          "approved_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "ApprovedAmount"
          },
          "card": {
            "$ref": "#/definitions/AuthorizationCard"
          },
          "card_3d_secure_authentication_type": {
            "type": "string",
            "x-go-name": "Card3DSecureAuthenticationType"
          },
          "card_3d_secure_cavv_validation_result": {
            "type": "string",
            "x-go-name": "Card3DSecureCAVVValidationResult"
          },
          "card_3d_secure_indicator": {
            "type": "string",
            "x-go-name": "Card3DSecureIndicator"
          },
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "Date"
          },
          "does_terminal_support_partial_approvals": {
            "type": "boolean",
            "x-go-name": "DoesTerminalSupportPartialApprovals"
          },
          "fees_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "FeesAmount"
          },
          "group": {
            "enum": [
              "Withdraw",
              "Deposit",
              "Purchase",
              "InternetPurchase",
              "Other",
              "PINManagement",
              "Refund"
            ],
            "type": "string",
            "x-go-name": "Group"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_contactless": {
            "type": "boolean",
            "x-go-name": "IsContactless"
          },
          "is_declined": {
            "type": "boolean",
            "x-go-name": "IsDeclined"
          },
          "is_mass_transit": {
            "type": "boolean",
            "x-go-name": "IsMassTransit"
          },
          "is_reversal": {
            "type": "boolean",
            "x-go-name": "IsReversal"
          },
          "merchant_category_code": {
            "type": "string",
            "x-go-name": "MerchantCategoryCode"
          },
          "merchant_city": {
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "merchant_id": {
            "type": "string",
            "x-go-name": "MerchantID"
          },
          "merchant_name": {
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "original_authorization_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "OriginalAuthorizationID"
          },
          "response_code": {
            "type": "string",
            "x-go-name": "ResponseCode"
          },
          "retrieval_reference_number": {
            "type": "string",
            "x-go-name": "RetrievalReferenceNumber"
          },
          "terminal_id": {
            "type": "string",
            "x-go-name": "TerminalID"
          },
          "transaction_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionAmount"
          },
          "transaction_currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "TransactionCurrencyCode"
          },
          "type": {
            "enum": [
              "Unknown",
              "payWaveLowValuePurchase",
              "payWaveHighValuePurchase",
              "eCommercePurchase",
              "AccountVerification",
              "UnattendedCardholderActivatedTerminal",
              "AutomatedFuelDispenser",
              "AutomatedFuelDispenserConfirmation",
              "ATMWithdrawal",
              "ATMBalanceInquiry",
              "MOTOPurchase",
              "RecurringPayment",
              "StatusCheck",
              "POSPurchase",
              "ManualCashPurchase",
              "PurchaseWithCashback",
              "QuasiCashPurchase",
              "PINChange",
              "PINUnblock",
              "CreditVoucherAndMerchandiseReturn",
              "CardToCardPaymentCredit",
              "CardToCardPaymentDebit"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "card_id",
          "date",
          "account_amount",
          "account_currency_code",
          "group",
          "is_contactless",
          "is_mass_transit",
          "transaction_amount",
          "transaction_currency_code",
          "is_reversal",
          "is_declined",
          "does_terminal_support_partial_approvals"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "DecisionRequestPartialAuthorizationView": {
        "properties": {
          "data": {
            "$ref": "#/definitions/DecisionRequestPartialAuthorization"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "decision_request"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "authorization"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "DeletePersonAdditionalInfoBatchRequest": {
        "properties": {
          "person_additional_info_ids": {
            "description": "Person additional info ID list",
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "PersonAdditionalInfoIDs"
          }
        },
        "required": [
          "person_additional_info_ids"
        ],
        "title": "DeletePersonAdditionalInfoBatchRequest is a request to delete existing person additional info batch.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DeliveryAddress": {
        "properties": {
          "first_name": {
            "description": "First name\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "last_name": {
            "description": "Last name\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "LastName"
          },
          "company_name": {
            "description": "Company name\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 45,
            "minLength": 2,
            "type": "string",
            "x-go-name": "CompanyName"
          },
          "address1": {
            "description": "Address #1\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "description": "Address #2\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address2"
          },
          "postal_code": {
            "description": "Postal code",
            "maxLength": 10,
            "type": "string",
            "x-go-name": "PostalCode"
          },
          "city": {
            "description": "City\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 35,
            "type": "string",
            "x-go-name": "City"
          },
          "country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "CountryCode"
          },
          "dispatch_method": {
            "$ref": "#/definitions/SingleCardDispatchMethod"
          },
          "phone": {
            "description": "Phone number is required in case of dispatch_method is \"DPDExpress\", \"DHLGlobalMail\", \"DHLGlobalMailTracked\" or \"DHLExpress\"",
            "type": "string",
            "x-go-name": "Phone"
          },
          "tracking_number": {
            "description": "Tracking number",
            "type": "string",
            "x-go-name": "TrackingNumber"
          }
        },
        "required": [
          "address1",
          "postal_code",
          "city",
          "country_code"
        ],
        "title": "Card delivery address.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DeliveryAddressForUpdate": {
        "properties": {
          "first_name": {
            "description": "First name",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "last_name": {
            "description": "Last name\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "LastName"
          },
          "company_name": {
            "description": "Company name\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 45,
            "minLength": 2,
            "type": "string",
            "x-go-name": "CompanyName"
          },
          "address1": {
            "description": "Address #1\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "description": "Address #2\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address2"
          },
          "postal_code": {
            "description": "Postal code",
            "maxLength": 10,
            "type": "string",
            "x-go-name": "PostalCode"
          },
          "city": {
            "description": "City\nAllowed case-insensitive characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'æ', 'ä', 'å', 'á', 'é', 'í', 'ø', 'ö', 'ó', 'õ', 'š', 'ü', 'ú', 'ž',\n'à', 'è', 'ì', 'ò', 'ù', 'â', 'ê', 'î', 'ô', 'û', 'ã', 'ñ', 'ë', 'ï', 'ÿ', 'ė', 'ç',\n'ć', 'ń', 'ś', 'ź', 'ā', 'ē', 'ī', 'ō', 'ū', 'ą', 'ę', 'į', 'ų', 'č', 'ģ', 'ķ', 'ļ', 'ņ', 'ŗ',\n'ỳ', 'ǹ', 'ẁ', 'ý', 'ǵ', 'ḱ', 'ĺ', 'ḿ', 'ṕ', 'ŕ', 'ẃ', 'ŷ', 'ĉ', 'ĝ', 'ĥ', 'ĵ', 'ŝ', 'ŵ', 'ẑ', 'ẽ', 'ĩ', 'ũ', 'ỹ',\n'ṽ', 'ḧ', 'ẅ', 'ẍ', 'ẗ', 'ẘ', 'ẙ', 'ȳ', 'ḡ', 'ă', 'ĕ', 'ĭ', 'ŏ', 'ŭ', 'ğ', 'ǫ', 'ǎ', 'ě', 'ǐ', 'ǒ', 'ǔ', 'ď', 'ǧ', 'ȟ',\n'ǰ', 'ǩ', 'ľ', 'ň', 'ř', 'ť', 'ȩ', 'ḑ', 'ḩ', 'ş', 'ţ', 'ő', 'ű', 'ů', 'ǖ', 'ǘ', 'ǚ', 'ǜ',\n'\\'', '-', '/', '.', ',', '\u0026', ' ']",
            "maxLength": 35,
            "type": "string",
            "x-go-name": "City"
          },
          "country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "CountryCode"
          },
          "dispatch_method": {
            "$ref": "#/definitions/SingleCardDispatchMethod"
          },
          "phone": {
            "description": "Phone number is required in case of dispatch_method is \"DPDExpress\", \"DHLGlobalMail\", \"DHLGlobalMailTracked\" or \"DHLExpress\"",
            "type": "string",
            "x-go-name": "Phone"
          }
        },
        "title": "Card delivery address without required fields.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DeliveryTime": {
        "description": "Possible delivery intervals: `2-3 working days`, `5-9 working days`, `10-12 working days`",
        "properties": {
          "min": {
            "description": "Minimum delivery time (e.g. \"2d\", \"5d\", \"10d\")",
            "type": "string",
            "x-go-name": "Min"
          },
          "max": {
            "description": "Maximum delivery time (e.g. \"3d\", \"9d\", \"12d\")",
            "type": "string",
            "x-go-name": "Max"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DeliveryType": {
        "enum": [
          "email",
          "push",
          "sms"
        ],
        "title": "DeliveryType represents delivery type.",
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "DeviceType": {
        "enum": [
          "AUTOMOBILE_DEVICE",
          "HOUSEHOLD_DEVICE",
          "MOBILEPHONE_OR_TABLET",
          "MOBILE_PHONE",
          "PC",
          "TABLET",
          "UNKNOWN",
          "WATCH",
          "WEARABLE_DEVICE"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "DispatchCardEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/DispatchCardEventView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "dispatch"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "card"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "DispatchCardEventView": {
        "properties": {
          "3d_secure_settings": {
            "$ref": "#/definitions/CardEventCard3DSecureSettings"
          },
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_metadata_profile_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "card_processor_card_id": {
            "type": "string",
            "x-go-name": "CardProcessorCardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "delivery_address": {
            "$ref": "#/definitions/CardEventDeliveryAddress"
          },
          "embossing_name": {
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "expiry_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_disposable": {
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "is_paid": {
            "type": "boolean",
            "x-go-name": "IsPaid"
          },
          "limits": {
            "$ref": "#/definitions/CardEventLimits"
          },
          "masked_card_number": {
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "personalization_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "predecessor_card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "renew_automatically": {
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "security": {
            "$ref": "#/definitions/CardEventSecurity"
          },
          "status": {
            "enum": [
              "Dispatched"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "type": {
            "enum": [
              "ChipAndPin",
              "ChipAndPinAnonymous",
              "Sticker",
              "Virtual"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "is_paid",
          "created_at",
          "created_by",
          "expiry_date",
          "is_disposable",
          "masked_card_number",
          "renew_automatically",
          "personalization_product_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "DispatchMethod": {
        "enum": [
          "BatchEconomy",
          "DHLExpress",
          "DHLGlobalMail",
          "DHLGlobalMailTracked",
          "DPDExpress",
          "StandardLatvianPostMail"
        ],
        "title": "DB Dispatch method.",
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "DownloadAccountStatementResponse": {
        "properties": {
          "file": {
            "$ref": "#/definitions/File"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DownloadAccountStatementResponseV2": {
        "properties": {
          "link": {
            "type": "string",
            "x-go-name": "Link"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DownloadCardStatementResponse": {
        "properties": {
          "file": {
            "$ref": "#/definitions/File"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DownloadCardStatementResponseV2": {
        "properties": {
          "link": {
            "type": "string",
            "x-go-name": "Link"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DownloadFraudCasesReportResponse": {
        "properties": {
          "file": {
            "$ref": "#/definitions/File"
          }
        },
        "title": "DownloadFraudCasesReportResponse returns a file with fraud cases report.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "DownloadPaymentDocumentsResponse": {
        "properties": {
          "file": {
            "$ref": "#/definitions/File"
          }
        },
        "title": "DownloadPaymentDocumentsResponse is the response to the request to download payment documents.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "EnrichedMerchantData": {
        "description": "EnrichedMerchantData detailed information from the merchant",
        "properties": {
          "name": {
            "description": "Full merchant name",
            "type": "string",
            "x-go-name": "Name"
          },
          "url": {
            "description": "Merchant website URL",
            "type": "string",
            "x-go-name": "URL"
          },
          "domain": {
            "description": "Merchant website domain",
            "type": "string",
            "x-go-name": "Domain"
          },
          "telephone_number": {
            "description": "Merchant telephone number",
            "type": "string",
            "x-go-name": "TelephoneNumber"
          },
          "icon_url": {
            "description": "Merchant logo icon URL in SVG format",
            "type": "string",
            "x-go-name": "IconURL"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "EnrolCardFor3DSecureResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "EnrolCardFor3DSecureResponse is the response to the request to enrol card for 3D secure.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "EventAccountAdjustment": {
        "properties": {
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "Amount"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          }
        },
        "required": [
          "id",
          "account_id",
          "amount",
          "description",
          "external_id"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "EventAccountToAccountTransfer": {
        "properties": {
          "from": {
            "$ref": "#/definitions/EventAccountAdjustment"
          },
          "to": {
            "$ref": "#/definitions/EventAccountAdjustment"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "EventAuthorization": {
        "properties": {
          "account_amount": {
            "format": "double",
            "maximum": 0,
            "type": "number",
            "x-go-name": "AccountAmount"
          },
          "account_currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "AccountCurrencyCode"
          },
          "acquiring_institution_country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "AcquiringInstitutionCountryCode"
          },
          "acquiring_institution_id": {
            "type": "string",
            "x-go-name": "AcquiringInstitutionID"
          },
          "approval_code": {
            "type": "string",
            "x-go-name": "ApprovalCode"
          },
          "approved_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "ApprovedAmount"
          },
          "card": {
            "$ref": "#/definitions/AuthorizationCard"
          },
          "card_3d_secure_authentication_type": {
            "type": "string",
            "x-go-name": "Card3DSecureAuthenticationType"
          },
          "card_3d_secure_cavv_validation_result": {
            "type": "string",
            "x-go-name": "Card3DSecureCAVVValidationResult"
          },
          "card_3d_secure_indicator": {
            "type": "string",
            "x-go-name": "Card3DSecureIndicator"
          },
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "Date"
          },
          "does_terminal_support_partial_approvals": {
            "type": "boolean",
            "x-go-name": "DoesTerminalSupportPartialApprovals"
          },
          "fees_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "FeesAmount"
          },
          "group": {
            "enum": [
              "Withdraw",
              "Deposit",
              "Purchase",
              "InternetPurchase",
              "Other",
              "PINManagement",
              "Refund"
            ],
            "type": "string",
            "x-go-name": "Group"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_contactless": {
            "type": "boolean",
            "x-go-name": "IsContactless"
          },
          "is_declined": {
            "type": "boolean",
            "x-go-name": "IsDeclined"
          },
          "is_mass_transit": {
            "type": "boolean",
            "x-go-name": "IsMassTransit"
          },
          "is_reversal": {
            "type": "boolean",
            "x-go-name": "IsReversal"
          },
          "merchant_category_code": {
            "type": "string",
            "x-go-name": "MerchantCategoryCode"
          },
          "merchant_city": {
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "merchant_id": {
            "type": "string",
            "x-go-name": "MerchantID"
          },
          "merchant_name": {
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "original_authorization_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "OriginalAuthorizationID"
          },
          "released_account_amount": {
            "description": "Represents the released account amount of authorization on release authorization",
            "format": "double",
            "type": "number",
            "x-go-name": "ReleasedAccountAmount"
          },
          "response_code": {
            "type": "string",
            "x-go-name": "ResponseCode"
          },
          "retrieval_reference_number": {
            "type": "string",
            "x-go-name": "RetrievalReferenceNumber"
          },
          "terminal_id": {
            "type": "string",
            "x-go-name": "TerminalID"
          },
          "transaction_amount": {
            "format": "double",
            "maximum": 0,
            "type": "number",
            "x-go-name": "TransactionAmount"
          },
          "transaction_currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "TransactionCurrencyCode"
          },
          "type": {
            "enum": [
              "Unknown",
              "payWaveLowValuePurchase",
              "payWaveHighValuePurchase",
              "eCommercePurchase",
              "AccountVerification",
              "UnattendedCardholderActivatedTerminal",
              "AutomatedFuelDispenser",
              "AutomatedFuelDispenserConfirmation",
              "ATMWithdrawal",
              "ATMBalanceInquiry",
              "MOTOPurchase",
              "RecurringPayment",
              "StatusCheck",
              "POSPurchase",
              "ManualCashPurchase",
              "PurchaseWithCashback",
              "QuasiCashPurchase",
              "PINChange",
              "PINUnblock",
              "CreditVoucherAndMerchandiseReturn",
              "CardToCardPaymentCredit",
              "CardToCardPaymentDebit"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "card_id",
          "date",
          "account_amount",
          "account_currency_code",
          "group",
          "is_contactless",
          "is_mass_transit",
          "transaction_amount",
          "transaction_currency_code",
          "is_reversal",
          "is_declined",
          "does_terminal_support_partial_approvals"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "EventIDVResult": {
        "properties": {
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "report_link": {
            "type": "string",
            "x-go-name": "ReportLink"
          },
          "source": {
            "$ref": "#/definitions/IDVResultSource"
          },
          "status": {
            "$ref": "#/definitions/IDVResultStatus"
          }
        },
        "required": [
          "report_link",
          "source",
          "status",
          "created_at"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "EventTransaction": {
        "properties": {
          "account_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "AccountAmount"
          },
          "account_currency_code": {
            "description": "Currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "AccountCurrencyCode"
          },
          "acquirer_reference_number": {
            "type": "string",
            "x-go-name": "AcquirerReferenceNumber"
          },
          "authorization_code": {
            "type": "string",
            "x-go-name": "AuthorizationCode"
          },
          "authorization_id": {
            "type": "string",
            "x-go-name": "AuthorizationID"
          },
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "code": {
            "type": "string",
            "x-go-name": "Code"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "group": {
            "$ref": "#/definitions/TransactionGroup"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "identifier": {
            "type": "string",
            "x-go-name": "Identifier"
          },
          "merchant_category_code": {
            "type": "string",
            "x-go-name": "MerchantCategoryCode"
          },
          "merchant_city": {
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "merchant_id": {
            "type": "string",
            "x-go-name": "MerchantID"
          },
          "merchant_name": {
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "processed_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ProcessedAt"
          },
          "purchase_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "PurchaseDate"
          },
          "terminal_id": {
            "type": "string",
            "x-go-name": "TerminalID"
          },
          "transaction_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionAmount"
          },
          "transaction_currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "TransactionCurrencyCode"
          }
        },
        "required": [
          "transaction_amount",
          "id",
          "transaction_currency_code",
          "created_at"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ExpireCardEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/ExpireCardEventView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "expire"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "card"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ExpireCardEventView": {
        "properties": {
          "3d_secure_settings": {
            "$ref": "#/definitions/CardEventCard3DSecureSettings"
          },
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_metadata_profile_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "card_processor_card_id": {
            "type": "string",
            "x-go-name": "CardProcessorCardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "delivery_address": {
            "$ref": "#/definitions/CardEventDeliveryAddress"
          },
          "embossing_name": {
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "expiry_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_disposable": {
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "is_paid": {
            "type": "boolean",
            "x-go-name": "IsPaid"
          },
          "limits": {
            "$ref": "#/definitions/CardEventLimits"
          },
          "masked_card_number": {
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "personalization_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "predecessor_card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "renew_automatically": {
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "security": {
            "$ref": "#/definitions/CardEventSecurity"
          },
          "status": {
            "enum": [
              "Expired"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "type": {
            "enum": [
              "ChipAndPin",
              "ChipAndPinAnonymous",
              "Sticker",
              "Virtual"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "is_paid",
          "created_at",
          "created_by",
          "expiry_date",
          "is_disposable",
          "masked_card_number",
          "renew_automatically",
          "personalization_product_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ExtractFilesDirectoriesResponse": {
        "description": "ExtractFilesDirectoriesResponse",
        "properties": {
          "directories": {
            "description": "Directories",
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "Directories"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ExtractFilesListItem": {
        "properties": {
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ExtractFilesListResponse": {
        "description": "ExtractFilesListResponse",
        "properties": {
          "files": {
            "items": {
              "$ref": "#/definitions/ExtractFilesListItem"
            },
            "type": "array",
            "x-go-name": "Files"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "FCMToken": {
        "properties": {
          "id": {
            "description": "FCM Token ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "device_id": {
            "description": "Device ID",
            "type": "string",
            "x-go-name": "DeviceID"
          },
          "fcm_token": {
            "description": "FCM Token",
            "type": "string",
            "x-go-name": "FCMToken"
          },
          "push_notifications_enabled": {
            "description": "Push notifications enabled",
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          },
          "created_at": {
            "description": "Created at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "Created by",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "updated_at": {
            "description": "Updated at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "description": "Updated by",
            "type": "string",
            "x-go-name": "UpdatedBy"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Fee": {
        "properties": {
          "id": {
            "description": "Fee ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "type": {
            "$ref": "#/definitions/FeeType"
          },
          "status": {
            "$ref": "#/definitions/FeeStatus"
          },
          "amount": {
            "description": "Fee amount",
            "format": "double",
            "type": "number",
            "x-go-name": "Amount"
          },
          "currency_code": {
            "description": "Fee currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "CurrencyCode"
          },
          "person_id": {
            "description": "Person ID to which this fee belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "company_id": {
            "description": "Company ID to which this fee belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "account_id": {
            "description": "Account ID to which this fee belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_id": {
            "description": "Card ID to which this fee belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "authorization_id": {
            "description": "Authorization ID to which this fee belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AuthorizationID"
          },
          "transaction_id": {
            "description": "Transaction ID to which this fee belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "TransactionID"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "ID of the user who has created fee",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "update_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "update_by": {
            "description": "ID of the user who has made the change",
            "type": "string",
            "x-go-name": "UpdatedBy"
          },
          "completed_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "CompletedAt"
          },
          "canceled_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "CanceledAt"
          },
          "canceled_by": {
            "description": "ID of the user who has canceled fee",
            "type": "string",
            "x-go-name": "CanceledBy"
          },
          "canceled_reason": {
            "description": "Fee cancellation reason",
            "type": "string",
            "x-go-name": "CanceledReason"
          },
          "completed_by": {
            "description": "ID of the user who has completed fee",
            "type": "string",
            "x-go-name": "CompletedBy"
          },
          "original_fee_id": {
            "description": "Original fee ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "OriginalFeeID"
          },
          "refund_info": {
            "$ref": "#/definitions/RefundInfo"
          },
          "refund_fee_ids": {
            "description": "Refund fee IDs",
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "RefundFeeIDs"
          },
          "account_adjustment_id": {
            "description": "Account adjustment ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountAdjustmentID"
          }
        },
        "title": "Fee represents a fee.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "FeeStatus": {
        "enum": [
          "Canceled",
          "Completed",
          "WaitingForClearing"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "FeeType": {
        "enum": [
          "AccountClosureFee",
          "AccountTransferFee",
          "AdditionalBINConfigurationFee",
          "AdditionalBINMaintenanceFee",
          "AdditionalVirtualCardsFee",
          "AuthorizationATMBalanceInquiryFixedFee",
          "AuthorizationATMDeclinedFixedFee",
          "AuthorizationATMWithdrawalComplexFee",
          "AuthorizationATMWithdrawalEEAComplexFee",
          "AuthorizationATMWithdrawalFixedFee",
          "AuthorizationATMWithdrawalInternationalComplexFee",
          "AuthorizationATMWithdrawalPercentageFee",
          "AuthorizationDeclinedFixedFee",
          "AuthorizationEEAFixedFee",
          "AuthorizationForeignExchangePercentageFee",
          "AuthorizationInternationalFixedFee",
          "AvailableFundsRefundFee",
          "Card3DSecureAttemptFixedFee",
          "CardDeliveryFixedFee",
          "CardExpressDeliveryFixedFee",
          "CardIssuanceFixedFee",
          "CardRenewalFixedFee",
          "CardReplacementFixedFee",
          "CardTopUpPercentageFee",
          "CardUsageFixedFee",
          "ChargebackProcessingFee",
          "DedicatedBINRangeFee",
          "ExclusiveBINFee",
          "ExclusiveSharedBINFee",
          "IncomingSEPAPaymentFixedFee",
          "IncomingSEPAPaymentPercentageFee",
          "IndustryFee",
          "MerchantWhitelistFee",
          "MonthlyFeePerEmployee",
          "MonthlyServiceFee",
          "NewEmployeeAdditionFee",
          "OtherAdministrativeRequestFee",
          "PINChangeFixedFee",
          "PaymentEEAComplexFee",
          "PaymentEEAFixedFee",
          "PaymentInternationalComplexFee",
          "PaymentInternationalFixedFee",
          "PaymentPercentageFee",
          "PricingPlanFee",
          "Remind3DSPasswordFixedFee",
          "RemindPINFixedFee",
          "SharedBINRangeFee",
          "ZeroAuthorizationEEAFixedFee",
          "ZeroAuthorizationInternationalFixedFee"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "FeeWaiverAuthorizationType": {
        "enum": [
          "ATMWithdrawal"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/api/model"
      },
      "FeeWaiverType": {
        "enum": [
          "Amount",
          "Quantity"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "FeesByAuthorizationIDResponse": {
        "properties": {
          "fees": {
            "items": {
              "$ref": "#/definitions/Fee"
            },
            "type": "array",
            "x-go-name": "Fees"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "FeesByTransactionIDResponse": {
        "properties": {
          "fees": {
            "items": {
              "$ref": "#/definitions/Fee"
            },
            "type": "array",
            "x-go-name": "Fees"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "FeesStatement": {
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "file_name": {
            "type": "string",
            "x-go-name": "FileName"
          },
          "mime_type": {
            "$ref": "#/definitions/MimeType"
          },
          "file_size": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "FileSize"
          },
          "year": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "Year"
          },
          "link": {
            "type": "string",
            "x-go-name": "Link"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "File": {
        "properties": {
          "name": {
            "description": "File name",
            "type": "string",
            "x-go-name": "Name"
          },
          "mime_type": {
            "$ref": "#/definitions/MimeType"
          },
          "body": {
            "description": "Body",
            "type": "string",
            "x-go-name": "Body"
          }
        },
        "title": "File represents a file.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Forbidden": {
        "properties": {
          "message": {
            "description": "Message represents base error with generic message and status.",
            "type": "string",
            "x-go-name": "GenericMessage"
          }
        },
        "title": "Forbidden maps to HTTP status forbidden.",
        "type": "object",
        "x-go-package": "github.com/wallester/common/http"
      },
      "FraudCase": {
        "properties": {
          "id": {
            "description": "Fraud case ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "authorization_id": {
            "description": "Authorization ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AuthorizationID"
          },
          "product_id": {
            "description": "Product ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ProductID"
          },
          "authorization_date": {
            "description": "Authorization date",
            "format": "date-time",
            "type": "string",
            "x-go-name": "AuthorizationDate"
          },
          "merchant_name": {
            "description": "Merchant name",
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "card_id": {
            "description": "Card ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "card_owner_id": {
            "description": "Card owner ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardOwnerID"
          },
          "card_owner_type": {
            "$ref": "#/definitions/CardOwnerType"
          },
          "card_owner_name": {
            "description": "Card owner name",
            "type": "string",
            "x-go-name": "CardOwnerName"
          },
          "risk_score": {
            "description": "Fraud case risk score",
            "format": "int32",
            "type": "integer",
            "x-go-name": "RiskScore"
          },
          "risk_zone": {
            "$ref": "#/definitions/RiskZone"
          },
          "risk_status": {
            "$ref": "#/definitions/RiskStatus"
          },
          "case_status": {
            "$ref": "#/definitions/FraudCaseStatus"
          },
          "source": {
            "$ref": "#/definitions/FraudSource"
          },
          "type": {
            "$ref": "#/definitions/FraudType"
          },
          "liability": {
            "$ref": "#/definitions/FraudLiability"
          },
          "description": {
            "description": "Fraud case description",
            "type": "string",
            "x-go-name": "Description"
          },
          "assigned_to": {
            "$ref": "#/definitions/AssignedTo"
          },
          "assigned_at": {
            "description": "Assigned at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "AssignedAt"
          },
          "assigned_to_name": {
            "description": "Assigned to name",
            "type": "string",
            "x-go-name": "AssignedToName"
          },
          "created_at": {
            "description": "Created at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "updated_at": {
            "description": "Updated at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "description": "Updated by",
            "type": "string",
            "x-go-name": "UpdatedBy"
          },
          "scoring": {
            "$ref": "#/definitions/Scoring"
          },
          "merchant_country_code": {
            "description": "Merchant Country code",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "card_owner_country_code": {
            "description": "Card owner Country code",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "CardOwnerCountryCode"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "FraudCaseHistory": {
        "properties": {
          "id": {
            "description": "Fraud case ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "FraudCaseID"
          },
          "old_case_status": {
            "description": "Old case status",
            "type": "string",
            "x-go-name": "OldCaseStatus"
          },
          "new_case_status": {
            "description": "New case status",
            "type": "string",
            "x-go-name": "NewCaseStatus"
          },
          "description": {
            "description": "Description",
            "type": "string",
            "x-go-name": "Description"
          },
          "created_by": {
            "description": "Created by",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "created_at": {
            "description": "Date-time when the change has been made",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "FraudCaseStatus": {
        "enum": [
          "Escalation",
          "Negative",
          "NotClassified",
          "Pending",
          "Positive"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "FraudLiability": {
        "enum": [
          "Client",
          "Other",
          "Payer",
          "PaymentServiceProvider"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "FraudRiskStatus": {
        "enum": [
          "Approved",
          "Declined",
          "FreezeCard",
          "Suspicious",
          "Unknown"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/api/model"
      },
      "FraudRiskZone": {
        "enum": [
          "High",
          "Low",
          "Medium"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "FraudSource": {
        "enum": [
          "Cardholder",
          "Client",
          "FraudAnalyst",
          "Other"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "FraudType": {
        "enum": [
          "CardDetailsTheft",
          "CardNotDelivered",
          "CounterfeitCard",
          "LostOrStolenCard",
          "ManipulationOfThePayerToMakeACardPayment",
          "ModificationOfPaymentOrderByTheFraudster",
          "Other",
          "PayerIsTheFraudster"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "GenerateOnfidoSDKTokenResponse": {
        "properties": {
          "token": {
            "type": "string",
            "x-go-name": "Token"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountAdjustmentByExternalIDResponse": {
        "properties": {
          "account_adjustment": {
            "$ref": "#/definitions/AccountAdjustment"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountAdjustmentResponse": {
        "properties": {
          "account_adjustment": {
            "$ref": "#/definitions/AccountAdjustment"
          }
        },
        "title": "GetAccountAdjustmentResponse returns specific account adjustment information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountAllowedCurrenciesResponse": {
        "properties": {
          "currency_codes": {
            "description": "Currency codes in ISO 4217 standard",
            "items": {
              "enum": [
                "AED",
                "AFN",
                "ALL",
                "AMD",
                "ANG",
                "AOA",
                "ARS",
                "AUD",
                "AWG",
                "AZN",
                "BAM",
                "BBD",
                "BDT",
                "BGN",
                "BHD",
                "BIF",
                "BMD",
                "BND",
                "BOB",
                "BOV",
                "BRL",
                "BSD",
                "BTN",
                "BWP",
                "BYN",
                "BZD",
                "CAD",
                "CDF",
                "CHE",
                "CHF",
                "CHW",
                "CLF",
                "CLP",
                "CNY",
                "COP",
                "COU",
                "CRC",
                "CUC",
                "CUP",
                "CVE",
                "CZK",
                "DJF",
                "DKK",
                "DOP",
                "DZD",
                "EGP",
                "ERN",
                "ETB",
                "EUR",
                "FJD",
                "FKP",
                "GBP",
                "GEL",
                "GHS",
                "GIP",
                "GMD",
                "GNF",
                "GTQ",
                "GYD",
                "HKD",
                "HNL",
                "HRK",
                "HTG",
                "HUF",
                "IDR",
                "ILS",
                "INR",
                "IQD",
                "IRR",
                "ISK",
                "JMD",
                "JOD",
                "JPY",
                "KES",
                "KGS",
                "KHR",
                "KMF",
                "KPW",
                "KRW",
                "KWD",
                "KYD",
                "KZT",
                "LAK",
                "LBP",
                "LKR",
                "LRD",
                "LSL",
                "LYD",
                "MAD",
                "MDL",
                "MGA",
                "MKD",
                "MMK",
                "MNT",
                "MOP",
                "MRU",
                "MUR",
                "MVR",
                "MWK",
                "MXN",
                "MXV",
                "MYR",
                "MZN",
                "NAD",
                "NGN",
                "NIO",
                "NOK",
                "NPR",
                "NZD",
                "OMR",
                "PAB",
                "PEN",
                "PGK",
                "PHP",
                "PKR",
                "PLN",
                "PYG",
                "QAR",
                "RON",
                "RSD",
                "RUB",
                "RWF",
                "SAR",
                "SBD",
                "SCR",
                "SDG",
                "SEK",
                "SGD",
                "SHP",
                "SLL",
                "SOS",
                "SRD",
                "SSP",
                "STN",
                "SVC",
                "SYP",
                "SZL",
                "THB",
                "TJS",
                "TMT",
                "TND",
                "TOP",
                "TRY",
                "TTD",
                "TWD",
                "TZS",
                "UAH",
                "UGX",
                "USD",
                "USN",
                "UYI",
                "UYU",
                "UYW",
                "UZS",
                "VES",
                "VND",
                "VUV",
                "WST",
                "XAF",
                "XCD",
                "XOF",
                "XPF",
                "YER",
                "ZAR",
                "ZMW",
                "ZWL"
              ],
              "type": "string"
            },
            "type": "array",
            "x-go-name": "CurrencyCodes"
          }
        },
        "title": "GetAccountAllowedCurrenciesResponse is the response to the request to get account allowed currencies.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountAuthorizationsResponse": {
        "properties": {
          "authorizations": {
            "description": "List of account authorizations",
            "items": {
              "$ref": "#/definitions/Authorization"
            },
            "type": "array",
            "x-go-name": "Authorizations"
          },
          "total_records_number": {
            "description": "Total number of account authorizations satisfying given criteria",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetAccountAuthorizationsResponse represents get account authorizations response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountByExternalIDResponse": {
        "properties": {
          "account": {
            "$ref": "#/definitions/Account"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountCardsResponse": {
        "properties": {
          "cards": {
            "description": "List of account cards",
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          },
          "total_records_number": {
            "description": "Total number of cards",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetAccountCardsResponse lists cards of an account.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountHistoryResponse": {
        "properties": {
          "history": {
            "description": "List of account information changes",
            "items": {
              "$ref": "#/definitions/History"
            },
            "type": "array",
            "x-go-name": "History"
          },
          "total_records_number": {
            "description": "Total number of records found",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetAccountHistoryResponse represents get account history response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountLimitsUsageResponse": {
        "properties": {
          "purchase": {
            "$ref": "#/definitions/AccountLimitsUsage"
          },
          "withdrawal": {
            "$ref": "#/definitions/AccountLimitsUsage"
          },
          "internet_purchase": {
            "$ref": "#/definitions/AccountLimitsUsage"
          },
          "contactless_purchase": {
            "$ref": "#/definitions/AccountLimitsUsage"
          },
          "overall_purchase": {
            "$ref": "#/definitions/AccountLimitsUsage"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountResponse": {
        "properties": {
          "account": {
            "$ref": "#/definitions/Account"
          }
        },
        "title": "GetAccountResponse represents get account response details.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountStatementByCursorResponse": {
        "properties": {
          "records": {
            "description": "List of account statement records",
            "items": {
              "$ref": "#/definitions/AccountStatementRecord"
            },
            "type": "array",
            "x-go-name": "Records"
          },
          "cursor": {
            "description": "Cursor is an object that stores the state of the last requested data in base64 format so that newer or older data can be requested.\nCursor parameter that is used to paginate the page in the GetAccountStatementByCursor request",
            "type": "string",
            "x-go-name": "Cursor"
          }
        },
        "title": "GetAccountStatementByCursorResponse returns account statement.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountStatementByDateResponse": {
        "properties": {
          "records": {
            "description": "List of account statement records",
            "items": {
              "$ref": "#/definitions/AccountStatementRecord"
            },
            "type": "array",
            "x-go-name": "Records"
          },
          "cursor": {
            "description": "Cursor is an object that stores the state of the last requested data in base64 format so that newer or older data can be requested.\nCursor parameter that is used to paginate the page in the GetAccountStatementByCursor request",
            "type": "string",
            "x-go-name": "Cursor"
          }
        },
        "title": "GetAccountStatementByDateResponse returns account statement.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountStatementResponse": {
        "allOf": [
          {
            "properties": {
              "credit_turnover": {
                "description": "Total credit money flow for statement records",
                "format": "double",
                "type": "number",
                "x-go-name": "CreditTurnover"
              },
              "debit_turnover": {
                "description": "Total debit money flow for statement records",
                "format": "double",
                "type": "number",
                "x-go-name": "DebitTurnover"
              },
              "pending_amount": {
                "description": "Total pending money flow for statement records",
                "format": "double",
                "type": "number",
                "x-go-name": "PendingAmount"
              },
              "total_records_number": {
                "description": "Total number of statement records satisfying given criteria",
                "format": "int64",
                "type": "integer",
                "x-go-name": "TotalRecordsNumber"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "records": {
                "description": "List of account statement records",
                "items": {
                  "$ref": "#/definitions/AccountStatementRecord"
                },
                "type": "array",
                "x-go-name": "Records"
              }
            },
            "type": "object"
          }
        ],
        "title": "GetAccountStatementResponse returns account statement.",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountTransactionsResponse": {
        "properties": {
          "transactions": {
            "description": "List of account transactions",
            "items": {
              "$ref": "#/definitions/Transaction"
            },
            "type": "array",
            "x-go-name": "Transactions"
          },
          "total_records_number": {
            "description": "Total number of account transactions satisfying given criteria",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetAccountTransactionsResponse represents get account transactions response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountsByIDsRequest": {
        "properties": {
          "ids": {
            "description": "Account IDs",
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "AccountIDs"
          }
        },
        "required": [
          "ids"
        ],
        "title": "GetAccountsByIDsRequest represents get account by IDs request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountsByIDsResponse": {
        "properties": {
          "accounts": {
            "description": "List of accounts",
            "items": {
              "$ref": "#/definitions/Account"
            },
            "type": "array",
            "x-go-name": "Accounts"
          }
        },
        "title": "GetAccountsByIDsResponse list of accounts.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAccountsExceedingCreditLimitResponse": {
        "properties": {
          "accounts": {
            "items": {
              "$ref": "#/definitions/Account"
            },
            "type": "array",
            "x-go-name": "Accounts"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAuthorizationAdditionalInfoResponse": {
        "properties": {
          "authorization_additional_info": {
            "$ref": "#/definitions/AuthorizationAdditionalInfo"
          }
        },
        "title": "GetAuthorizationAdditionalInfoResponse is the response to the request to get the authorization additional info.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAuthorizationResponse": {
        "properties": {
          "authorization": {
            "$ref": "#/definitions/AuthorizationWithEnrichedMerchant"
          }
        },
        "title": "GetAuthorizationResponse returns specific authorization information with enriched merchant.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetAuthorizationsByProductIDResponse": {
        "properties": {
          "authorizations": {
            "description": "List of authorizations",
            "items": {
              "$ref": "#/definitions/Authorization"
            },
            "type": "array",
            "x-go-name": "Authorizations"
          },
          "total_records_number": {
            "description": "Total number of records",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetAuthorizationsByProductIDResponse represents get product authorizations response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardAuthorizationsResponse": {
        "properties": {
          "authorizations": {
            "description": "List of authorizations.",
            "items": {
              "$ref": "#/definitions/Authorization"
            },
            "type": "array",
            "x-go-name": "Authorizations"
          },
          "total_records_number": {
            "description": "Total number of authorizations satisfying given criteria.",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetCardAuthorizationsResponse represents get card authorizations response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardByExternalIDResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardByReferenceNumberResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardBySHACardNumberResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardDesignsByPersonalizationProductCodesResponse": {
        "properties": {
          "cards_designs": {
            "items": {
              "$ref": "#/definitions/CardDesign"
            },
            "type": "array",
            "x-go-name": "CardDesigns"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardFeeWaiverByIDResponse": {
        "properties": {
          "card_fee_waiver": {
            "$ref": "#/definitions/CardFeeWaiver"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardFeeWaiversResponse": {
        "properties": {
          "card_fee_waivers": {
            "items": {
              "$ref": "#/definitions/CardFeeWaiver"
            },
            "type": "array",
            "x-go-name": "CardFeeWaivers"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardFeesResponse": {
        "properties": {
          "card_fees": {
            "description": "List of card fees",
            "items": {
              "$ref": "#/definitions/CardFee"
            },
            "type": "array",
            "x-go-name": "CardFees"
          }
        },
        "title": "GetCardFeesResponse represents get card fees response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardHistoryResponse": {
        "properties": {
          "history": {
            "description": "List of card information changes",
            "items": {
              "$ref": "#/definitions/History"
            },
            "type": "array",
            "x-go-name": "History"
          },
          "total_records_number": {
            "description": "Total number of changes",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetCardHistoryResponse represents get card history response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardLimitsUsageResponse": {
        "properties": {
          "currency_code": {
            "description": "Currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "CurrencyCode"
          },
          "daily_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "daily_withdrawal": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "daily_internet_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "daily_contactless_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "daily_overall_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "weekly_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "weekly_withdrawal": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "weekly_internet_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "weekly_contactless_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "weekly_overall_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "monthly_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "monthly_withdrawal": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "monthly_internet_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "monthly_contactless_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "monthly_overall_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "transaction_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionPurchase"
          },
          "transaction_withdrawal": {
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionWithdrawal"
          },
          "transaction_internet_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionInternetPurchase"
          },
          "transaction_contactless_purchase": {
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionContactlessPurchase"
          },
          "all_time_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "all_time_withdrawal": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "all_time_internet_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          },
          "all_time_contactless_purchase": {
            "$ref": "#/definitions/CardLimitUsage"
          }
        },
        "title": "GetCardLimitsUsageResponse returns card limits usage information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardMerchantRuleByIDResponse": {
        "properties": {
          "card_merchant_rule": {
            "$ref": "#/definitions/CardMerchantRule"
          }
        },
        "title": "GetCardMerchantRuleByIDResponse represents get card merchant role by ID response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardMerchantRulesResponse": {
        "properties": {
          "card_merchant_rules": {
            "description": "Card merchant rules",
            "items": {
              "$ref": "#/definitions/CardMerchantRule"
            },
            "type": "array",
            "x-go-name": "CardMerchantRules"
          },
          "total_records_number": {
            "description": "Total records number",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetCardMerchantRulesResponse represents get card merchant rules by card id response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "GetCardResponse returns card information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardStatementResponse": {
        "allOf": [
          {
            "properties": {
              "credit_turnover": {
                "description": "Total credit money flow for statement records",
                "format": "double",
                "type": "number",
                "x-go-name": "CreditTurnover"
              },
              "debit_turnover": {
                "description": "Total debit money flow for statement records",
                "format": "double",
                "type": "number",
                "x-go-name": "DebitTurnover"
              },
              "pending_amount": {
                "description": "Total pending money flow for statement records",
                "format": "double",
                "type": "number",
                "x-go-name": "PendingAmount"
              },
              "total_records_number": {
                "description": "Total number of statement records satisfying given criteria",
                "format": "int64",
                "type": "integer",
                "x-go-name": "TotalRecordsNumber"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "records": {
                "description": "List of account statement records",
                "items": {
                  "$ref": "#/definitions/CardStatementRecord"
                },
                "type": "array",
                "x-go-name": "Records"
              }
            },
            "type": "object"
          }
        ],
        "title": "GetCardStatementResponse returns card statement.",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardTopUpFeesParams": {
        "properties": {
          "AccountID": {
            "format": "uuid4",
            "type": "string"
          },
          "Amount": {
            "format": "double",
            "type": "number"
          }
        },
        "title": "GetCardTopUpFeesParams is the response to the request to get fee amount.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardTopUpFeesResponse": {
        "properties": {
          "fees": {
            "items": {
              "$ref": "#/definitions/CardTopUpFee"
            },
            "type": "array",
            "x-go-name": "Fees"
          },
          "amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "Amount"
          },
          "total_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "TotalAmount"
          }
        },
        "title": "GetCardTopUpFeesResponse is the response to the request to get fee amount.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardTransactionsResponse": {
        "properties": {
          "transactions": {
            "description": "List of card transactions",
            "items": {
              "$ref": "#/definitions/Transaction"
            },
            "type": "array",
            "x-go-name": "Transactions"
          },
          "total_records_number": {
            "description": "Total number of card transactions satisfying given criteria",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetCardTransactionsResponse represents get card transactions response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardUsersResponse": {
        "properties": {
          "users": {
            "description": "User profiles with user data",
            "items": {
              "$ref": "#/definitions/UserWithProfile"
            },
            "type": "array",
            "x-go-name": "UsersWithProfile"
          },
          "total_records_number": {
            "description": "Total number of records",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetCardUsersResponse represents get card users response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardsBlockLogsResponse": {
        "properties": {
          "cards_block_logs": {
            "description": "List of cards block logs",
            "items": {
              "$ref": "#/definitions/CardsBlockLog"
            },
            "type": "array",
            "x-go-name": "CardsBlockLogs"
          },
          "total_records_number": {
            "description": "Total number of records",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetCardsBlockLogsResponse represents get block logs response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardsByLastFourDigitsResponse": {
        "properties": {
          "cards": {
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCardsResponse": {
        "properties": {
          "cards": {
            "description": "List of cards",
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          },
          "total_records_number": {
            "description": "Total number of cards",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCompanyAccountsResponse": {
        "properties": {
          "accounts": {
            "description": "List of company accounts",
            "items": {
              "$ref": "#/definitions/Account"
            },
            "type": "array",
            "x-go-name": "Accounts"
          },
          "total_records_number": {
            "description": "Total number of records",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCompanyCardsResponse": {
        "properties": {
          "cards": {
            "description": "List of company cards",
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          },
          "total_records_number": {
            "description": "Total number of records found",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCompanyFCMTokenResponse": {
        "properties": {
          "company_fcm_token": {
            "$ref": "#/definitions/CompanyFCMToken"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCompanyHistoryResponse": {
        "properties": {
          "history": {
            "description": "List of company information changes",
            "items": {
              "$ref": "#/definitions/History"
            },
            "type": "array",
            "x-go-name": "History"
          },
          "total_records_number": {
            "description": "Total number of records found",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetCompanyHistoryResponse represents get company history response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCompanyInfoByProductIDResponse": {
        "properties": {
          "company_name": {
            "type": "string",
            "x-go-name": "CompanyName"
          },
          "country_code": {
            "type": "string",
            "x-go-name": "CountryCode"
          },
          "address1": {
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "type": "string",
            "x-go-name": "Address2"
          },
          "postal_code": {
            "type": "string",
            "x-go-name": "PostalCode"
          },
          "city": {
            "type": "string",
            "x-go-name": "City"
          },
          "phone": {
            "type": "string",
            "x-go-name": "Phone"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "office_coordinates": {
            "$ref": "#/definitions/OfficeCoordinates"
          },
          "web_representation": {
            "type": "string",
            "x-go-name": "WebRepresentation"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCompanyLimitsUsageResponse": {
        "properties": {
          "purchase": {
            "$ref": "#/definitions/CompanyLimitsUsage"
          },
          "withdrawal": {
            "$ref": "#/definitions/CompanyLimitsUsage"
          },
          "internet_purchase": {
            "$ref": "#/definitions/CompanyLimitsUsage"
          },
          "contactless_purchase": {
            "$ref": "#/definitions/CompanyLimitsUsage"
          },
          "overall_purchase": {
            "$ref": "#/definitions/CompanyLimitsUsage"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCompanyResponse": {
        "properties": {
          "company": {
            "$ref": "#/definitions/Company"
          }
        },
        "title": "GetCompanyResponse returns specific company information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetCompanyUsersResponse": {
        "properties": {
          "company_users": {
            "description": "User profile with user data",
            "items": {
              "$ref": "#/definitions/UserWithProfile"
            },
            "type": "array",
            "x-go-name": "CompanyUsers"
          },
          "total_records_number": {
            "description": "Total number of records",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetCompanyUsersResponse represents get company users response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetEmbossingNameProductSettingsResponse": {
        "properties": {
          "personalization_product_codes_two_lines_embossing_name": {
            "type": "string",
            "x-go-name": "PersonalizationProductCodesTwoLinesEmbossingName"
          },
          "personalization_product_codes_three_lines_embossing_name": {
            "type": "string",
            "x-go-name": "PersonalizationProductCodesThreeLinesEmbossingName"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetEncrypted3DSPasswordRequest": {
        "properties": {
          "public_key": {
            "description": "RSA Public key - base64 encoded",
            "type": "string",
            "x-go-name": "PublicKey"
          }
        },
        "required": [
          "public_key"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetEncrypted3DSPasswordResponse": {
        "properties": {
          "encrypted_3ds_password": {
            "type": "string",
            "x-go-name": "Encrypted3DSPassword"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetEncryptedCVV2Request": {
        "properties": {
          "public_key": {
            "description": "RSA Public key - base64 encoded",
            "type": "string",
            "x-go-name": "PublicKey"
          }
        },
        "required": [
          "public_key"
        ],
        "title": "GetEncryptedCVV2Request is a request to get encrypted CVV2.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetEncryptedCVV2Response": {
        "properties": {
          "encrypted_cvv2": {
            "type": "string",
            "x-go-name": "EncryptedCVV2"
          }
        },
        "title": "GetEncryptedCVV2Response returns encrypted CVV2.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetEncryptedCardNumberRequest": {
        "properties": {
          "public_key": {
            "description": "RSA Public key - base64 encoded\u003cbr\u003e\nRecommended key size: 1024 bits and above",
            "type": "string",
            "x-go-name": "PublicKey"
          }
        },
        "required": [
          "public_key"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetEncryptedCardNumberResponse": {
        "properties": {
          "encrypted_card_number": {
            "type": "string",
            "x-go-name": "EncryptedCardNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetEncryptedPINRequest": {
        "properties": {
          "public_key": {
            "description": "RSA Public key - base64 encoded",
            "type": "string",
            "x-go-name": "PublicKey"
          }
        },
        "required": [
          "public_key"
        ],
        "title": "GetEncryptedPINRequest is a request to get encrypted PIN.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetEncryptedPINResponse": {
        "properties": {
          "encrypted_pin": {
            "type": "string",
            "x-go-name": "EncryptedPIN"
          }
        },
        "title": "GetEncryptedPINResponse returns encrypted PIN.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetExpiringCardsResponse": {
        "properties": {
          "cards": {
            "description": "List of cards",
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          },
          "total_records_number": {
            "description": "Total number of cards",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetFCMTokenResponse": {
        "properties": {
          "fcm_token": {
            "$ref": "#/definitions/FCMToken"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetFeeResponse": {
        "properties": {
          "fee": {
            "$ref": "#/definitions/Fee"
          }
        },
        "title": "GetFeeResponse returns specific fee information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetFeesByAdjustmentIDsRequest": {
        "properties": {
          "ids": {
            "description": "Adjustment IDs",
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "AdjustmentIDs"
          }
        },
        "required": [
          "ids"
        ],
        "title": "GetFeesByAdjustmentIDsRequest represents get fees by adjustment IDs request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetFeesByAdjustmentIDsResponse": {
        "properties": {
          "fees": {
            "description": "List of fees",
            "items": {
              "$ref": "#/definitions/Fee"
            },
            "type": "array",
            "x-go-name": "Fees"
          }
        },
        "title": "GetFeesByAdjustmentIDsResponse list of fees.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetFeesStatementResponse": {
        "properties": {
          "fees_statement": {
            "items": {
              "$ref": "#/definitions/FeesStatement"
            },
            "type": "array",
            "x-go-name": "FeesStatement"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetFraudCaseHistoryResponse": {
        "properties": {
          "history": {
            "description": "List of account information changes",
            "items": {
              "$ref": "#/definitions/FraudCaseHistory"
            },
            "type": "array",
            "x-go-name": "History"
          },
          "total_records_number": {
            "description": "Total number of records found",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetFraudCaseHistoryResponse represents get fraud case history response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetFraudCaseResponse": {
        "properties": {
          "fraud_case": {
            "$ref": "#/definitions/FraudCase"
          }
        },
        "title": "GetFraudCaseResponse returns specific fraud case information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetFraudCasesCardOwnersResponse": {
        "properties": {
          "card_owners": {
            "description": "List of fraud cases card owners",
            "items": {
              "$ref": "#/definitions/CardOwner"
            },
            "type": "array",
            "x-go-name": "CardOwners"
          },
          "total_records_number": {
            "description": "Total number of found fraud cases card owners satisfying given criteria",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetFraudCasesCardOwnersResponse returns company or person IDs and names.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetFraudCasesResponse": {
        "properties": {
          "fraud_cases": {
            "description": "List of fraud cases",
            "items": {
              "$ref": "#/definitions/FraudCase"
            },
            "type": "array",
            "x-go-name": "FraudCases"
          },
          "total_records_number": {
            "description": "Total number of found fraud cases satisfying given criteria",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetFraudCasesResponse returns fraud cases.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetKYCCheckResponse": {
        "properties": {
          "kyc_check": {
            "$ref": "#/definitions/KYCCheck"
          }
        },
        "title": "GetKYCCheckResponse returns specific KYC check information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetKYCChecksResponse": {
        "properties": {
          "kyc_checks": {
            "description": "List of KYC checks",
            "items": {
              "$ref": "#/definitions/KYCCheck"
            },
            "type": "array",
            "x-go-name": "KYCChecks"
          },
          "total_records_number": {
            "description": "Total number of KYC checks",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetKYCDocumentDetailsResponse": {
        "properties": {
          "kyc_document": {
            "$ref": "#/definitions/KYCDocument"
          }
        },
        "title": "GetKYCDocumentDetailsResponse returns specific KYC check information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetMobileApplicationProductSettingsResponse": {
        "properties": {
          "mobile_application_top_up_enabled": {
            "description": "Top up enabled",
            "type": "boolean",
            "x-go-name": "MobileApplicationTopUpEnabled"
          },
          "mobile_application_create_card_enabled": {
            "description": "Create card enabled",
            "type": "boolean",
            "x-go-name": "MobileApplicationCreateCardEnabled"
          },
          "mobile_application_tokenization_enabled": {
            "description": "Tokenization enabled",
            "type": "boolean",
            "x-go-name": "MobileApplicationTokenizationEnabled"
          },
          "wallets": {
            "$ref": "#/definitions/Wallets"
          },
          "pin_rules": {
            "$ref": "#/definitions/PINRules"
          }
        },
        "title": "GetMobileApplicationProductSettingsResponse is the response to the request to get mobile application product settings.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPaymentDocumentResponse": {
        "properties": {
          "payment_document": {
            "$ref": "#/definitions/PaymentDocument"
          }
        },
        "title": "GetPaymentDocumentResponse is the response to the request to get payment document.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPaymentDocumentThumbnailsResponse": {
        "properties": {
          "payment_documents": {
            "items": {
              "$ref": "#/definitions/PaymentDocument"
            },
            "type": "array",
            "x-go-name": "PaymentDocuments"
          }
        },
        "title": "GetPaymentDocumentThumbnailsResponse is the response to the request to get payment document thumbnails.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPaymentMetadataResponse": {
        "properties": {
          "payment": {
            "$ref": "#/definitions/Payment"
          }
        },
        "title": "GetPaymentMetadataResponse is the response to the request to get payment metadata.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPendingOrdersResponse": {
        "properties": {
          "cards": {
            "description": "List of cards",
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          },
          "total_records_number": {
            "description": "Total number of cards",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPersonAccountsResponse": {
        "properties": {
          "accounts": {
            "description": "List of person accounts",
            "items": {
              "$ref": "#/definitions/Account"
            },
            "type": "array",
            "x-go-name": "Accounts"
          },
          "total_records_number": {
            "description": "Total number of records",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetPersonAccountsResponse lists accounts of a person.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPersonAdditionalInfoResponse": {
        "properties": {
          "person_additional_info": {
            "$ref": "#/definitions/PersonAdditionalInfo"
          }
        },
        "title": "GetPersonAdditionalInfoResponse is the response to the request to get person additional info.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPersonAdditionalInfosResponse": {
        "properties": {
          "person_additional_infos": {
            "items": {
              "$ref": "#/definitions/PersonAdditionalInfo"
            },
            "type": "array",
            "x-go-name": "PersonAdditionalInfos"
          }
        },
        "title": "GetPersonAdditionalInfosResponse is the response to the request to get person additional infos.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPersonByExternalIDResponse": {
        "properties": {
          "person": {
            "$ref": "#/definitions/Person"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPersonCardsResponse": {
        "properties": {
          "cards": {
            "description": "List of person cards",
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          },
          "total_records_number": {
            "description": "Total number of records found",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetPersonCardsResponse lists cards of a person.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPersonHistoryResponse": {
        "properties": {
          "history": {
            "description": "List of person information changes",
            "items": {
              "$ref": "#/definitions/History"
            },
            "type": "array",
            "x-go-name": "History"
          },
          "total_records_number": {
            "description": "Total number of records found",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetPersonHistoryResponse represents get person history response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPersonResponse": {
        "properties": {
          "person": {
            "$ref": "#/definitions/Person"
          }
        },
        "title": "GetPersonResponse returns specific person information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetPersonUsersResponse": {
        "properties": {
          "person_users": {
            "description": "User profile with user data",
            "items": {
              "$ref": "#/definitions/UserWithProfile"
            },
            "type": "array",
            "x-go-name": "PersonUsers"
          },
          "total_records_number": {
            "description": "Total number of records",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetPersonUsersResponse represents get person users response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetRepresentativeHistoryResponse": {
        "properties": {
          "history": {
            "description": "List of company information changes",
            "items": {
              "$ref": "#/definitions/History"
            },
            "type": "array",
            "x-go-name": "History"
          },
          "total_records_number": {
            "description": "Total number of records found",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetRepresentativeHistoryResponse represents get representative history response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetRepresentativeResponse": {
        "properties": {
          "representative": {
            "$ref": "#/definitions/Representative"
          }
        },
        "title": "GetRepresentativeResponse returns specific representative information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetRepresentativesResponse": {
        "properties": {
          "representatives": {
            "description": "List of representatives",
            "items": {
              "$ref": "#/definitions/Representative"
            },
            "type": "array",
            "x-go-name": "Representatives"
          },
          "total_records_number": {
            "description": "Total number of records found",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetReservedSettlementBalanceResponse": {
        "properties": {
          "amount": {
            "description": "Settlement risk limit amount",
            "format": "double",
            "type": "number",
            "x-go-name": "Amount"
          },
          "authorizations_count": {
            "description": "Total number of authorizations for current day",
            "format": "int64",
            "type": "integer",
            "x-go-name": "AuthorizationsCount"
          },
          "authorizations_total_reserved_amount": {
            "description": "Total reserved amount of authorizations for current day",
            "format": "double",
            "type": "number",
            "x-go-name": "AuthorizationsTotalReservedAmount"
          },
          "pending_authorizations_count": {
            "description": "Total number of pending authorizations",
            "format": "int64",
            "type": "integer",
            "x-go-name": "PendingAuthorizationsCount"
          },
          "pending_authorizations_total_reserved_amount": {
            "description": "Total reserved amount of pending authorizations",
            "format": "double",
            "type": "number",
            "x-go-name": "PendingAuthorizationsTotalReservedAmount"
          },
          "currency_code": {
            "description": "Currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "CurrencyCode"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetServiceAccessResponse": {
        "properties": {
          "services": {
            "description": "Services",
            "items": {
              "$ref": "#/definitions/Service"
            },
            "type": "array",
            "x-go-name": "Services"
          }
        },
        "title": "GetServiceAccessResponse represents response for get service access request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetTemplateResponse": {
        "properties": {
          "template": {
            "$ref": "#/definitions/Template"
          }
        },
        "title": "GetTemplateResponse returns template.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetTemplatesResponse": {
        "properties": {
          "templates": {
            "description": "List of templates",
            "items": {
              "$ref": "#/definitions/Template"
            },
            "type": "array",
            "x-go-name": "Templates"
          },
          "total_records_number": {
            "description": "Total number of templates",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetTemplatesResponse returns list of templates.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetTransactionResponse": {
        "properties": {
          "transaction": {
            "$ref": "#/definitions/TransactionWithEnrichedMerchant"
          }
        },
        "title": "GetTransactionResponse returns specific transaction information with enriched merchant.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetTransactionsByProductIDResponse": {
        "properties": {
          "transactions": {
            "description": "List of transactions",
            "items": {
              "$ref": "#/definitions/Transaction"
            },
            "type": "array",
            "x-go-name": "Transactions"
          },
          "total_records_number": {
            "description": "Total number of records",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetTransactionsByProductIDResponse represents get product transactions response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetUserResponse": {
        "properties": {
          "user": {
            "$ref": "#/definitions/APIUser"
          },
          "products": {
            "description": "Products",
            "items": {
              "$ref": "#/definitions/Product"
            },
            "type": "array",
            "x-go-name": "Products"
          }
        },
        "title": "GetUserResponse represents response for Get API user request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GetUsersResponse": {
        "properties": {
          "users": {
            "description": "API users",
            "items": {
              "$ref": "#/definitions/APIUser"
            },
            "type": "array",
            "x-go-name": "Users"
          },
          "total_records_number": {
            "description": "Total number of records",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "GetUsersResponse represents response for list API users request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GooglePayPushProvisioningRequest": {
        "properties": {
          "client_wallet_account_id": {
            "description": "ClientWalletAccountID is client-provided consumer ID that identifies the Wallet Account Holder entity",
            "type": "string",
            "x-go-name": "ClientWalletAccountID"
          },
          "client_device_id": {
            "description": "ClientDeviceID is stable device identification set by Wallet Provider",
            "type": "string",
            "x-go-name": "ClientDeviceID"
          },
          "verify_cardholder": {
            "description": "VerifyCardholder is cardholder will be prompted to verify himself using an OTP SMS/Email or Call center",
            "type": "boolean",
            "x-go-name": "VerifyCardholder"
          }
        },
        "required": [
          "client_wallet_account_id",
          "client_device_id"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "GooglePayPushProvisioningResponse": {
        "properties": {
          "encrypted_data": {
            "type": "string",
            "x-go-name": "EncryptedData"
          }
        },
        "title": "GooglePayPushProvisioningResponse returns encrypted payload for the Wallet.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "History": {
        "properties": {
          "created_at": {
            "description": "Date-time when the change has been made",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "ID of the user who has made the change",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "field": {
            "description": "Field name that has been changed",
            "type": "string",
            "x-go-name": "Field"
          },
          "old_value": {
            "description": "Old value of the field",
            "type": "string",
            "x-go-name": "OldValue"
          },
          "new_value": {
            "description": "New value of the field",
            "type": "string",
            "x-go-name": "NewValue"
          }
        },
        "title": "History represents audit log, one history record per field.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "IDVResult": {
        "properties": {
          "created_at": {
            "description": "Date-time in UTC when the object was created\nTime must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "report_link": {
            "description": "Report link",
            "maxLength": 500,
            "type": "string",
            "x-go-name": "ReportLink"
          },
          "source": {
            "$ref": "#/definitions/IDVResultSource"
          },
          "status": {
            "$ref": "#/definitions/IDVResultStatus"
          }
        },
        "required": [
          "created_at",
          "report_link",
          "source",
          "status"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "IDVResultSource": {
        "enum": [
          "Jumio",
          "Onfido",
          "Sumsub",
          "Veriff"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "IDVResultStatus": {
        "enum": [
          "Approved",
          "Consider",
          "Declined"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "IncentiveNotification": {
        "properties": {
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          }
        },
        "required": [
          "card_id"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "IndustryType": {
        "$ref": "#/definitions/ActivityType",
        "description": "__Field is required for NonRegulated partners.__",
        "title": "Industry Type."
      },
      "InitiateAction": {
        "properties": {
          "data": {
            "$ref": "#/definitions/ThreeDSInitiateAction"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "initiate_action"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "3ds"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "InternalServerError": {
        "properties": {
          "message": {
            "description": "Message represents base error with generic message and status.",
            "type": "string",
            "x-go-name": "GenericMessage"
          }
        },
        "title": "InternalServerError maps to HTTP status internal server error.",
        "type": "object",
        "x-go-package": "github.com/wallester/common/http"
      },
      "IsCardRenewalAllowedResponse": {
        "properties": {
          "IsCardRenewalAllowed": {
            "type": "boolean"
          }
        },
        "title": "IsCardRenewalAllowedResponse represents is card renewal allowed response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "KYBStatus": {
        "enum": [
          "NotConfirmed",
          "Pending",
          "PendingManual",
          "Rejected",
          "Verified"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "KYCCheck": {
        "properties": {
          "id": {
            "description": "KYCCheck ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "applicant_id": {
            "description": "Applicant ID",
            "type": "string",
            "x-go-name": "ApplicantID"
          },
          "person_id": {
            "description": "Person ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "idv_result": {
            "$ref": "#/definitions/IDVResult"
          },
          "status": {
            "$ref": "#/definitions/KYCCheckStatus"
          },
          "reject_reason": {
            "$ref": "#/definitions/KYCCheckRejectReason"
          },
          "reject_reason_comment": {
            "description": "Reject reason comment",
            "type": "string",
            "x-go-name": "RejectReasonComment"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "ID of the user who has created KYC check",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "description": "ID of the user who has made the change",
            "type": "string",
            "x-go-name": "UpdatedBy"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "DeletedAt"
          },
          "deleted_by": {
            "description": "ID of the user who has made the change",
            "type": "string",
            "x-go-name": "DeletedBy"
          }
        },
        "required": [
          "person_id"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "KYCCheckEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/KYCCheckView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "create",
              "delete",
              "reject",
              "approve"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "kyc_check"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "KYCCheckRejectReason": {
        "enum": [
          "BlurryImage",
          "DifferentBirthdate",
          "DocumentDamaged",
          "ExpiredDocument",
          "InformationOnDocumentPartlyCovered",
          "NameMismatch",
          "Other",
          "PersonUnder18YearsOfAge"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "KYCCheckStatus": {
        "enum": [
          "Approved",
          "Created",
          "Pending",
          "Rejected"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "KYCCheckView": {
        "properties": {
          "applicant_id": {
            "type": "string",
            "x-go-name": "ApplicantID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "deleted_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "DeletedAt"
          },
          "deleted_by": {
            "type": "string",
            "x-go-name": "DeletedBy"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "idv_result": {
            "$ref": "#/definitions/EventIDVResult"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "reject_reason": {
            "$ref": "#/definitions/KYCCheckRejectReason"
          },
          "reject_reason_comment": {
            "type": "string",
            "x-go-name": "RejectReasonComment"
          },
          "status": {
            "$ref": "#/definitions/KYCCheckStatus"
          },
          "updated_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "type": "string",
            "x-go-name": "UpdatedBy"
          }
        },
        "required": [
          "id",
          "applicant_id",
          "person_id",
          "status",
          "created_at",
          "created_by"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "KYCDocument": {
        "properties": {
          "id": {
            "description": "KYC document ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "kyc_check_id": {
            "description": "KYC check ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "KYCCheckID"
          },
          "issuer": {
            "description": "Issuer country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "Issuer"
          },
          "number": {
            "description": "Number",
            "type": "string",
            "x-go-name": "Number"
          },
          "type": {
            "description": "KYC document Type",
            "enum": [
              "IDVDocument",
              "IDVSelfieImage",
              "IDVReport"
            ],
            "type": "string",
            "x-go-name": "Type"
          },
          "subtype": {
            "description": "KYC document subtype",
            "enum": [
              "NationalIDFront",
              "NationalIDBack",
              "DrivingLicenseBack",
              "DrivingLicenseFront",
              "ResidencePermitBack",
              "ResidencePermitFront",
              "Passport"
            ],
            "type": "string",
            "x-go-name": "Subtype"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "ID of the user who has created KYC document",
            "type": "string",
            "x-go-name": "CreatedBy"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "KYCDocumentFile": {
        "properties": {
          "Body": {
            "items": {
              "format": "uint8",
              "type": "integer"
            },
            "type": "array"
          },
          "Name": {
            "type": "string"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "KYCPerson": {
        "properties": {
          "address": {
            "$ref": "#/definitions/KYCPersonAddress"
          },
          "birth_country_code": {
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "BirthCountryCode"
          },
          "birth_date": {
            "format": "date",
            "type": "string",
            "x-go-name": "BirthDate"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "document_number": {
            "type": "string",
            "x-go-name": "DocumentNumber"
          },
          "email": {
            "format": "email",
            "type": "string",
            "x-go-name": "Email"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "first_name": {
            "type": "string",
            "x-go-name": "FirstName"
          },
          "gender": {
            "enum": [
              "MALE",
              "FEMALE"
            ],
            "type": "string",
            "x-go-name": "Gender"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_adverse_media_involved": {
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "is_beneficial_owner": {
            "type": "boolean",
            "x-go-name": "IsBeneficialOwner"
          },
          "is_politically_exposed_person": {
            "type": "boolean",
            "x-go-name": "IsPoliticallyExposedPerson"
          },
          "is_represented_by_someone_else": {
            "type": "boolean",
            "x-go-name": "IsRepresentedBySomeoneElse"
          },
          "is_sanctions_related": {
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "kyc_status": {
            "$ref": "#/definitions/KYCStatus"
          },
          "last_name": {
            "type": "string",
            "x-go-name": "LastName"
          },
          "loyalty_number": {
            "type": "string",
            "x-go-name": "LoyaltyNumber"
          },
          "middle_name": {
            "type": "string",
            "x-go-name": "MiddleName"
          },
          "mobile": {
            "type": "string",
            "x-go-name": "Mobile"
          },
          "personal_number": {
            "type": "string",
            "x-go-name": "PersonalNumber"
          },
          "personal_number_issuer": {
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "PersonalNumberIssuer"
          },
          "politically_exposed_person_explanation": {
            "type": "string",
            "x-go-name": "PoliticallyExposedPersonExplanation"
          },
          "preferred_language_code": {
            "type": "string",
            "x-go-name": "PreferredLanguageCode"
          },
          "push_notifications_enabled": {
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          },
          "residence_country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "ResidenceCountryCode"
          },
          "risk_profile": {
            "enum": [
              "Low",
              "Medium",
              "High",
              "Pending",
              "Prohibited"
            ],
            "type": "string",
            "x-go-name": "RiskProfile"
          },
          "status": {
            "enum": [
              "Active",
              "Deactivated",
              "Rejected"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "status_reason_code": {
            "enum": [
              "Prohibited",
              "Declined",
              "Rejected",
              "Test"
            ],
            "type": "string",
            "x-go-name": "StatusReasonCode"
          },
          "status_reason_text": {
            "type": "string",
            "x-go-name": "StatusReasonText"
          },
          "title": {
            "enum": [
              "Mr.",
              "Ms.",
              "Mrs.",
              "Miss"
            ],
            "type": "string",
            "x-go-name": "Title"
          },
          "updated_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "type": "string",
            "x-go-name": "UpdatedBy"
          }
        },
        "required": [
          "id",
          "personal_number_issuer",
          "title",
          "first_name",
          "last_name",
          "mobile",
          "created_at",
          "created_by",
          "birth_country_code",
          "is_represented_by_someone_else",
          "is_politically_exposed_person",
          "is_beneficial_owner",
          "risk_profile",
          "status",
          "push_notifications_enabled",
          "is_sanctions_related",
          "is_adverse_media_involved"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "KYCPersonAddress": {
        "properties": {
          "address1": {
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "type": "string",
            "x-go-name": "Address2"
          },
          "city": {
            "type": "string",
            "x-go-name": "City"
          },
          "country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "CountryCode"
          },
          "postal_code": {
            "type": "string",
            "x-go-name": "PostalCode"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "KYCStatus": {
        "enum": [
          "NotConfirmed",
          "Pending",
          "PendingManual",
          "Rejected",
          "Verified"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "KYCStatusChange": {
        "properties": {
          "data": {
            "$ref": "#/definitions/KYCPerson"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "kyc_status_update"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "person"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "LinkCardToAccountResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "LocationSource": {
        "enum": [
          "CELLULAR",
          "GPS",
          "OTHER",
          "WIFI"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "MerchantCategoryCode": {
        "enum": [
          "0742",
          "0763",
          "0780",
          "1520",
          "1711",
          "1731",
          "1740",
          "1750",
          "1761",
          "1771",
          "1799",
          "2842",
          "4011",
          "4111",
          "4112",
          "4119",
          "4121",
          "4131",
          "4214",
          "4215",
          "4225",
          "4411",
          "4457",
          "4468",
          "4511",
          "4582",
          "4722",
          "4784",
          "4789",
          "4812",
          "4814",
          "4816",
          "4821",
          "4829",
          "4899",
          "4900",
          "5013",
          "5137",
          "5139",
          "5200",
          "5211",
          "5231",
          "5251",
          "5261",
          "5271",
          "5300",
          "5309",
          "5310",
          "5311",
          "5331",
          "5411",
          "5422",
          "5441",
          "5451",
          "5462",
          "5499",
          "5511",
          "5521",
          "5532",
          "5533",
          "5541",
          "5542",
          "5561",
          "5571",
          "5592",
          "5598",
          "5599",
          "5611",
          "5621",
          "5631",
          "5641",
          "5651",
          "5655",
          "5661",
          "5681",
          "5691",
          "5697",
          "5699",
          "5712",
          "5713",
          "5714",
          "5718",
          "5719",
          "5722",
          "5732",
          "5733",
          "5735",
          "5811",
          "5812",
          "5813",
          "5814",
          "5912",
          "5931",
          "5932",
          "5933",
          "5937",
          "5940",
          "5941",
          "5942",
          "5943",
          "5945",
          "5946",
          "5947",
          "5948",
          "5949",
          "5950",
          "5962",
          "5967",
          "5970",
          "5971",
          "5972",
          "5973",
          "5975",
          "5976",
          "5977",
          "5978",
          "5983",
          "5992",
          "5993",
          "5994",
          "5995",
          "5996",
          "5997",
          "5998",
          "5999",
          "6010",
          "6011",
          "6051",
          "6300",
          "7011",
          "7012",
          "7032",
          "7033",
          "7210",
          "7211",
          "7216",
          "7217",
          "7221",
          "7230",
          "7251",
          "7261",
          "7273",
          "7276",
          "7277",
          "7278",
          "7296",
          "7297",
          "7298",
          "7299",
          "7311",
          "7321",
          "7322",
          "7333",
          "7338",
          "7339",
          "7342",
          "7349",
          "7361",
          "7372",
          "7375",
          "7379",
          "7392",
          "7393",
          "7394",
          "7395",
          "7399",
          "7512",
          "7513",
          "7519",
          "7523",
          "7531",
          "7538",
          "7829",
          "7832",
          "7841",
          "7911",
          "7922",
          "7929",
          "7932",
          "7933",
          "7941",
          "7991",
          "7992",
          "7993",
          "7994",
          "7995",
          "7996",
          "7997",
          "7998",
          "7999",
          "8011",
          "8021",
          "8031",
          "8041",
          "8042",
          "8043",
          "8049",
          "8050",
          "8062",
          "8071",
          "8099",
          "8111",
          "8351",
          "8911",
          "8931",
          "8999",
          "9223",
          "9402"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "MimeType": {
        "enum": [
          "application/pdf",
          "application/vnd.ms-excel",
          "application/vnd.oasis.opendocument.text",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
          "application/xml",
          "application/zip",
          "image/jpeg",
          "image/png",
          "text/csv",
          "text/html",
          "text/xml"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "OSType": {
        "enum": [
          "ANDROID",
          "BLACKBERRY",
          "IOS",
          "OTHER",
          "TIZEN",
          "WINDOWS"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "OfficeCoordinates": {
        "properties": {
          "latitude": {
            "type": "string",
            "x-go-name": "Latitude"
          },
          "longitude": {
            "type": "string",
            "x-go-name": "Longitude"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "OrderCardsBatchRequest": {
        "properties": {
          "personalization_product_code": {
            "description": "Personalization product code",
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "carrier_type": {
            "$ref": "#/definitions/CarrierType"
          },
          "notification_email": {
            "description": "Email is required only if SendNotificationEmail is set to true.",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "NotificationEmail"
          },
          "send_notification_email": {
            "description": "Send notification email sends notification if set to true.",
            "type": "boolean",
            "x-go-name": "SendNotificationEmail"
          },
          "number_of_cards": {
            "description": "Number of cards",
            "format": "int32",
            "maximum": 1000,
            "minimum": 1,
            "type": "integer",
            "x-go-name": "NumberOfCards"
          },
          "delivery_address": {
            "$ref": "#/definitions/BatchDeliveryAddress"
          },
          "embossing_name": {
            "description": "Embossing name",
            "maxLength": 26,
            "minLength": 2,
            "type": "string",
            "x-go-name": "EmbossingName"
          }
        },
        "required": [
          "personalization_product_code",
          "number_of_cards",
          "delivery_address"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "OrderCardsBatchResponse": {
        "properties": {
          "cards": {
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "OrderedCardEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/OrderedCardEventView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "order"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "card"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "OrderedCardEventView": {
        "properties": {
          "3d_secure_settings": {
            "$ref": "#/definitions/CardEventCard3DSecureSettings"
          },
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_metadata_profile_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "card_processor_card_id": {
            "type": "string",
            "x-go-name": "CardProcessorCardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "delivery_address": {
            "$ref": "#/definitions/CardEventDeliveryAddress"
          },
          "embossing_name": {
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "expiry_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_disposable": {
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "is_paid": {
            "type": "boolean",
            "x-go-name": "IsPaid"
          },
          "limits": {
            "$ref": "#/definitions/CardEventLimits"
          },
          "masked_card_number": {
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "personalization_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "predecessor_card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "renew_automatically": {
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "security": {
            "$ref": "#/definitions/CardEventSecurity"
          },
          "status": {
            "enum": [
              "Ordered"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "type": {
            "enum": [
              "ChipAndPin",
              "ChipAndPinAnonymous",
              "Sticker",
              "Virtual"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "is_paid",
          "created_at",
          "created_by",
          "expiry_date",
          "is_disposable",
          "masked_card_number",
          "renew_automatically",
          "personalization_product_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "PINRules": {
        "properties": {
          "must_contain_only_digits": {
            "type": "boolean",
            "x-go-name": "MustContainOnlyDigits"
          },
          "must_be_at_least_4_digits": {
            "type": "boolean",
            "x-go-name": "MustBeAtLeast4Digits"
          },
          "must_be_max_12_digits": {
            "type": "boolean",
            "x-go-name": "MustBeMax12Digits"
          },
          "not_allowed_same_digits": {
            "type": "boolean",
            "x-go-name": "NotAllowedSameDigits"
          },
          "not_allowed_consecutive_numbers": {
            "type": "boolean",
            "x-go-name": "NotAllowedConsecutiveNumbers"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Payment": {
        "properties": {
          "payment_id": {
            "description": "Payment ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PaymentID"
          },
          "payment_type": {
            "$ref": "#/definitions/PaymentType"
          },
          "metadata": {
            "description": "Payment metadata",
            "items": {
              "$ref": "#/definitions/PaymentMetadata"
            },
            "type": "array",
            "x-go-name": "PaymentMetadata"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "PaymentDocument": {
        "properties": {
          "id": {
            "description": "Payment document ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "payment_id": {
            "description": "Payment ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PaymentID"
          },
          "payment_type": {
            "$ref": "#/definitions/PaymentType"
          },
          "file_name": {
            "description": "File name",
            "type": "string",
            "x-go-name": "FileName"
          },
          "mime_type": {
            "$ref": "#/definitions/MimeType"
          },
          "file_body": {
            "description": "Body",
            "type": "string",
            "x-go-name": "FileBody"
          },
          "file_size": {
            "description": "Size",
            "format": "int64",
            "type": "integer",
            "x-go-name": "FileSize"
          },
          "created_at": {
            "description": "Date-time the payment document was created at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "ID of the user who created the payment document",
            "type": "string",
            "x-go-name": "CreatedBy"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "PaymentMetadata": {
        "properties": {
          "id": {
            "description": "Payment metadata ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "key": {
            "description": "Key",
            "enum": [
              "note"
            ],
            "type": "string",
            "x-go-name": "Key"
          },
          "value": {
            "description": "Value",
            "type": "string",
            "x-go-name": "Value"
          },
          "created_at": {
            "description": "Date-time the payment metadata was created at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "ID of the user who created the payment metadata",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "updated_at": {
            "description": "Date-time the payment metadata was updated at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "description": "ID of the user who updated the payment metadata",
            "type": "string",
            "x-go-name": "UpdatedBy"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "PaymentType": {
        "enum": [
          "authorization",
          "transaction"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "Person": {
        "allOf": [
          {
            "properties": {
              "address": {
                "$ref": "#/definitions/PersonAddress"
              },
              "address1": {
                "description": "DEPRECATED\nAddress line 1",
                "maxLength": 45,
                "type": "string",
                "x-go-name": "Address1"
              },
              "address2": {
                "description": "DEPRECATED\nAddress line 2",
                "maxLength": 45,
                "type": "string",
                "x-go-name": "Address2"
              },
              "birth_country_code": {
                "description": "Birth country code in ISO 3166-1 Alpha-3 code standard",
                "enum": [
                  "AFG",
                  "ALA",
                  "ALB",
                  "DZA",
                  "ASM",
                  "AND",
                  "AGO",
                  "AIA",
                  "ATA",
                  "ATG",
                  "ARG",
                  "ARM",
                  "ABW",
                  "AUS",
                  "AUT",
                  "AZE",
                  "BHS",
                  "BHR",
                  "BGD",
                  "BRB",
                  "BLR",
                  "BEL",
                  "BLZ",
                  "BEN",
                  "BMU",
                  "BTN",
                  "BOL",
                  "BES",
                  "BIH",
                  "BWA",
                  "BVT",
                  "BRA",
                  "IOT",
                  "BRN",
                  "BGR",
                  "BFA",
                  "BDI",
                  "CPV",
                  "KHM",
                  "CMR",
                  "CAN",
                  "CYM",
                  "CAF",
                  "TCD",
                  "CHL",
                  "CHN",
                  "CXR",
                  "CCK",
                  "COL",
                  "COM",
                  "COG",
                  "COD",
                  "COK",
                  "CRI",
                  "CIV",
                  "HRV",
                  "CUB",
                  "CUW",
                  "CYP",
                  "CZE",
                  "DNK",
                  "DJI",
                  "DMA",
                  "DOM",
                  "ECU",
                  "EGY",
                  "SLV",
                  "GNQ",
                  "ERI",
                  "EST",
                  "ETH",
                  "FLK",
                  "FRO",
                  "FJI",
                  "FIN",
                  "FRA",
                  "GUF",
                  "PYF",
                  "ATF",
                  "GAB",
                  "GMB",
                  "GEO",
                  "DEU",
                  "GHA",
                  "GIB",
                  "GRC",
                  "GRL",
                  "GRD",
                  "GLP",
                  "GUM",
                  "GTM",
                  "GGY",
                  "GIN",
                  "GNB",
                  "GUY",
                  "HTI",
                  "HMD",
                  "VAT",
                  "HND",
                  "HKG",
                  "HUN",
                  "ISL",
                  "IND",
                  "IDN",
                  "IRN",
                  "IRQ",
                  "IRL",
                  "IMN",
                  "ISR",
                  "ITA",
                  "JAM",
                  "JPN",
                  "JEY",
                  "JOR",
                  "KAZ",
                  "KEN",
                  "KIR",
                  "PRK",
                  "KOR",
                  "KWT",
                  "KGZ",
                  "LAO",
                  "LVA",
                  "LBN",
                  "LSO",
                  "LBR",
                  "LBY",
                  "LIE",
                  "LTU",
                  "LUX",
                  "MAC",
                  "MKD",
                  "MDG",
                  "MWI",
                  "MYS",
                  "MDV",
                  "MLI",
                  "MLT",
                  "MHL",
                  "MTQ",
                  "MRT",
                  "MUS",
                  "MYT",
                  "MEX",
                  "FSM",
                  "MDA",
                  "MCO",
                  "MNG",
                  "MNE",
                  "MSR",
                  "MAR",
                  "MOZ",
                  "MMR",
                  "NAM",
                  "NRU",
                  "NPL",
                  "NLD",
                  "NCL",
                  "NZL",
                  "NIC",
                  "NER",
                  "NGA",
                  "NIU",
                  "NFK",
                  "MNP",
                  "NOR",
                  "OMN",
                  "PAK",
                  "PLW",
                  "PSE",
                  "PAN",
                  "PNG",
                  "PRY",
                  "PER",
                  "PHL",
                  "PCN",
                  "POL",
                  "PRT",
                  "PRI",
                  "QAT",
                  "REU",
                  "ROU",
                  "RUS",
                  "RWA",
                  "BLM",
                  "SHN",
                  "KNA",
                  "LCA",
                  "MAF",
                  "SPM",
                  "VCT",
                  "WSM",
                  "SMR",
                  "STP",
                  "SAU",
                  "SEN",
                  "SRB",
                  "SYC",
                  "SLE",
                  "SGP",
                  "SXM",
                  "SVK",
                  "SVN",
                  "SLB",
                  "SOM",
                  "ZAF",
                  "SGS",
                  "SSD",
                  "ESP",
                  "LKA",
                  "SDN",
                  "SUR",
                  "SJM",
                  "SWZ",
                  "SWE",
                  "CHE",
                  "SYR",
                  "TWN",
                  "TJK",
                  "TZA",
                  "THA",
                  "TLS",
                  "TGO",
                  "TKL",
                  "TON",
                  "TTO",
                  "TUN",
                  "TUR",
                  "TKM",
                  "TCA",
                  "TUV",
                  "UGA",
                  "UKR",
                  "ARE",
                  "GBR",
                  "USA",
                  "UMI",
                  "URY",
                  "UZB",
                  "VUT",
                  "VEN",
                  "VNM",
                  "VGB",
                  "VIR",
                  "WLF",
                  "ESH",
                  "YEM",
                  "ZMB",
                  "ZWE",
                  "UNK",
                  "XKX",
                  "ANT"
                ],
                "maxLength": 3,
                "type": "string",
                "x-go-name": "BirthCountryCode"
              },
              "birth_date": {
                "description": "Birthdate. Must be in 2006-01-02 format.",
                "format": "date",
                "type": "string",
                "x-go-name": "BirthDate"
              },
              "city": {
                "description": "DEPRECATED\nCity",
                "maxLength": 35,
                "type": "string",
                "x-go-name": "City"
              },
              "document_number": {
                "description": "Document number",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "DocumentNumber"
              },
              "email": {
                "description": "E-mail address. \u003cbr\u003e\n__Required if Mobile is empty.__",
                "format": "email",
                "maxLength": 255,
                "type": "string",
                "x-go-name": "Email"
              },
              "expected_turnover": {
                "description": "ExpectedTurnover",
                "enum": [
                  "From0to1500",
                  "From1501to3000",
                  "From3001to5000",
                  "From5001to15000",
                  "From15001AndMore"
                ],
                "type": "string",
                "x-go-name": "ExpectedTurnover"
              },
              "external_id": {
                "description": "External ID must be unique for every person on product.",
                "maxLength": 50,
                "type": "string",
                "x-go-name": "ExternalID"
              },
              "first_name": {
                "description": "First name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "FirstName"
              },
              "gender": {
                "description": "Gender",
                "enum": [
                  "MALE",
                  "FEMALE"
                ],
                "maxLength": 6,
                "type": "string",
                "x-go-name": "Gender"
              },
              "is_adverse_media_involved": {
                "description": "Is Adverse Media Involved? \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsAdverseMediaInvolved"
              },
              "is_beneficial_owner": {
                "description": "Whether the person is beneficial owner or not",
                "type": "boolean",
                "x-go-name": "IsBeneficialOwner"
              },
              "is_politically_exposed_person": {
                "description": "Whether the person is politically exposed or not. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsPoliticallyExposedPerson"
              },
              "is_represented_by_someone_else": {
                "description": "Whether the person is representative or not",
                "type": "boolean",
                "x-go-name": "IsRepresentedBySomeoneElse"
              },
              "is_sanctions_related": {
                "description": "Is Sanctions Related? \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsSanctionsRelated"
              },
              "last_name": {
                "description": "Last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "LastName"
              },
              "loyalty_number": {
                "description": "Loyalty number",
                "maxLength": 20,
                "minLength": 20,
                "type": "string",
                "x-go-name": "LoyaltyNumber"
              },
              "middle_name": {
                "description": "Middle name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "MiddleName"
              },
              "mobile": {
                "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed. \u003cbr\u003e\n__Required if Email is empty.__",
                "type": "string",
                "x-go-name": "Mobile"
              },
              "personal_number": {
                "description": "Personal number must be unique for every person on product.",
                "maxLength": 20,
                "type": "string",
                "x-go-name": "PersonalNumber"
              },
              "personal_number_issuer": {
                "description": "Personal number issuer country code in ISO 3166-1 Alpha-3 code standard",
                "enum": [
                  "AFG",
                  "ALA",
                  "ALB",
                  "DZA",
                  "ASM",
                  "AND",
                  "AGO",
                  "AIA",
                  "ATA",
                  "ATG",
                  "ARG",
                  "ARM",
                  "ABW",
                  "AUS",
                  "AUT",
                  "AZE",
                  "BHS",
                  "BHR",
                  "BGD",
                  "BRB",
                  "BLR",
                  "BEL",
                  "BLZ",
                  "BEN",
                  "BMU",
                  "BTN",
                  "BOL",
                  "BES",
                  "BIH",
                  "BWA",
                  "BVT",
                  "BRA",
                  "IOT",
                  "BRN",
                  "BGR",
                  "BFA",
                  "BDI",
                  "CPV",
                  "KHM",
                  "CMR",
                  "CAN",
                  "CYM",
                  "CAF",
                  "TCD",
                  "CHL",
                  "CHN",
                  "CXR",
                  "CCK",
                  "COL",
                  "COM",
                  "COG",
                  "COD",
                  "COK",
                  "CRI",
                  "CIV",
                  "HRV",
                  "CUB",
                  "CUW",
                  "CYP",
                  "CZE",
                  "DNK",
                  "DJI",
                  "DMA",
                  "DOM",
                  "ECU",
                  "EGY",
                  "SLV",
                  "GNQ",
                  "ERI",
                  "EST",
                  "ETH",
                  "FLK",
                  "FRO",
                  "FJI",
                  "FIN",
                  "FRA",
                  "GUF",
                  "PYF",
                  "ATF",
                  "GAB",
                  "GMB",
                  "GEO",
                  "DEU",
                  "GHA",
                  "GIB",
                  "GRC",
                  "GRL",
                  "GRD",
                  "GLP",
                  "GUM",
                  "GTM",
                  "GGY",
                  "GIN",
                  "GNB",
                  "GUY",
                  "HTI",
                  "HMD",
                  "VAT",
                  "HND",
                  "HKG",
                  "HUN",
                  "ISL",
                  "IND",
                  "IDN",
                  "IRN",
                  "IRQ",
                  "IRL",
                  "IMN",
                  "ISR",
                  "ITA",
                  "JAM",
                  "JPN",
                  "JEY",
                  "JOR",
                  "KAZ",
                  "KEN",
                  "KIR",
                  "PRK",
                  "KOR",
                  "KWT",
                  "KGZ",
                  "LAO",
                  "LVA",
                  "LBN",
                  "LSO",
                  "LBR",
                  "LBY",
                  "LIE",
                  "LTU",
                  "LUX",
                  "MAC",
                  "MKD",
                  "MDG",
                  "MWI",
                  "MYS",
                  "MDV",
                  "MLI",
                  "MLT",
                  "MHL",
                  "MTQ",
                  "MRT",
                  "MUS",
                  "MYT",
                  "MEX",
                  "FSM",
                  "MDA",
                  "MCO",
                  "MNG",
                  "MNE",
                  "MSR",
                  "MAR",
                  "MOZ",
                  "MMR",
                  "NAM",
                  "NRU",
                  "NPL",
                  "NLD",
                  "NCL",
                  "NZL",
                  "NIC",
                  "NER",
                  "NGA",
                  "NIU",
                  "NFK",
                  "MNP",
                  "NOR",
                  "OMN",
                  "PAK",
                  "PLW",
                  "PSE",
                  "PAN",
                  "PNG",
                  "PRY",
                  "PER",
                  "PHL",
                  "PCN",
                  "POL",
                  "PRT",
                  "PRI",
                  "QAT",
                  "REU",
                  "ROU",
                  "RUS",
                  "RWA",
                  "BLM",
                  "SHN",
                  "KNA",
                  "LCA",
                  "MAF",
                  "SPM",
                  "VCT",
                  "WSM",
                  "SMR",
                  "STP",
                  "SAU",
                  "SEN",
                  "SRB",
                  "SYC",
                  "SLE",
                  "SGP",
                  "SXM",
                  "SVK",
                  "SVN",
                  "SLB",
                  "SOM",
                  "ZAF",
                  "SGS",
                  "SSD",
                  "ESP",
                  "LKA",
                  "SDN",
                  "SUR",
                  "SJM",
                  "SWZ",
                  "SWE",
                  "CHE",
                  "SYR",
                  "TWN",
                  "TJK",
                  "TZA",
                  "THA",
                  "TLS",
                  "TGO",
                  "TKL",
                  "TON",
                  "TTO",
                  "TUN",
                  "TUR",
                  "TKM",
                  "TCA",
                  "TUV",
                  "UGA",
                  "UKR",
                  "ARE",
                  "GBR",
                  "USA",
                  "UMI",
                  "URY",
                  "UZB",
                  "VUT",
                  "VEN",
                  "VNM",
                  "VGB",
                  "VIR",
                  "WLF",
                  "ESH",
                  "YEM",
                  "ZMB",
                  "ZWE",
                  "UNK",
                  "XKX",
                  "ANT"
                ],
                "maxLength": 3,
                "type": "string",
                "x-go-name": "PersonalNumberIssuer"
              },
              "politically_exposed_person_explanation": {
                "description": "Explanation of politically exposed person",
                "maxLength": 255,
                "type": "string",
                "x-go-name": "PoliticallyExposedPersonExplanation"
              },
              "postal_code": {
                "description": "DEPRECATED\nPostal code",
                "maxLength": 10,
                "type": "string",
                "x-go-name": "PostalCode"
              },
              "preferred_language_code": {
                "description": "Preferred language code",
                "enum": [
                  "ABK",
                  "AAR",
                  "AFR",
                  "AKA",
                  "SQI",
                  "AMH",
                  "ARA",
                  "ARG",
                  "HYE",
                  "ASM",
                  "AVA",
                  "AVE",
                  "AYM",
                  "AZE",
                  "BAM",
                  "BAL",
                  "BAK",
                  "EUS",
                  "BEL",
                  "BEN",
                  "BIH",
                  "BIS",
                  "BOS",
                  "BRE",
                  "BUL",
                  "MYA",
                  "CAT",
                  "CHA",
                  "CHE",
                  "NYA",
                  "ZHO",
                  "CHV",
                  "COR",
                  "COS",
                  "CRE",
                  "HRV",
                  "CES",
                  "DAN",
                  "DIV",
                  "NLD",
                  "DZO",
                  "ENG",
                  "EPO",
                  "EST",
                  "EWE",
                  "FAO",
                  "FIJ",
                  "FIN",
                  "FRA",
                  "FUL",
                  "GLG",
                  "KAT",
                  "DEU",
                  "ELL",
                  "GRN",
                  "GUJ",
                  "HAT",
                  "HAU",
                  "HEB",
                  "HER",
                  "HIN",
                  "HMO",
                  "HUN",
                  "INA",
                  "IND",
                  "ILE",
                  "GLE",
                  "IBO",
                  "IPK",
                  "IDO",
                  "ISL",
                  "ITA",
                  "IKU",
                  "JPN",
                  "JAV",
                  "KAL",
                  "KAN",
                  "KAU",
                  "KAS",
                  "KAZ",
                  "KHM",
                  "KIK",
                  "KIN",
                  "KIR",
                  "KOM",
                  "KON",
                  "KOR",
                  "KUR",
                  "KUA",
                  "LAT",
                  "LTZ",
                  "LUG",
                  "LIJ",
                  "LIN",
                  "LAO",
                  "LIT",
                  "LUB",
                  "LAV",
                  "GLV",
                  "MKD",
                  "MLG",
                  "MSA",
                  "MAL",
                  "MLT",
                  "MRI",
                  "MAR",
                  "MAH",
                  "MON",
                  "NAU",
                  "NAV",
                  "NDE",
                  "NEP",
                  "NDO",
                  "NOB",
                  "NNO",
                  "NOR",
                  "III",
                  "NBL",
                  "OCI",
                  "OJI",
                  "CHU",
                  "ORM",
                  "ORI",
                  "OSS",
                  "PAN",
                  "PLI",
                  "FAS",
                  "POL",
                  "PUS",
                  "POR",
                  "QUE",
                  "ROH",
                  "RUN",
                  "RON",
                  "RUS",
                  "SAN",
                  "SRD",
                  "SND",
                  "SME",
                  "SMO",
                  "SAG",
                  "SRP",
                  "GLA",
                  "SNA",
                  "SIN",
                  "SLK",
                  "SLV",
                  "SOM",
                  "SOT",
                  "SPA",
                  "SUN",
                  "SWA",
                  "SSW",
                  "SWE",
                  "TAM",
                  "TEL",
                  "TGK",
                  "THA",
                  "TIR",
                  "BOD",
                  "TUK",
                  "TGL",
                  "TSN",
                  "TON",
                  "TUR",
                  "TSO",
                  "TAT",
                  "TWI",
                  "TAH",
                  "UIG",
                  "UKR",
                  "URD",
                  "UZB",
                  "VEN",
                  "VIE",
                  "VOL",
                  "WLN",
                  "CYM",
                  "WOL",
                  "FRY",
                  "XHO",
                  "YID",
                  "YOR",
                  "ZHA",
                  "ZUL"
                ],
                "type": "string",
                "x-go-name": "PreferredLanguageCode"
              },
              "residence_country_code": {
                "description": "Residence country code. Must be in ISO 3166-1 Alpha-3 code standard",
                "enum": [
                  "AFG",
                  "ALA",
                  "ALB",
                  "DZA",
                  "ASM",
                  "AND",
                  "AGO",
                  "AIA",
                  "ATA",
                  "ATG",
                  "ARG",
                  "ARM",
                  "ABW",
                  "AUS",
                  "AUT",
                  "AZE",
                  "BHS",
                  "BHR",
                  "BGD",
                  "BRB",
                  "BLR",
                  "BEL",
                  "BLZ",
                  "BEN",
                  "BMU",
                  "BTN",
                  "BOL",
                  "BES",
                  "BIH",
                  "BWA",
                  "BVT",
                  "BRA",
                  "IOT",
                  "BRN",
                  "BGR",
                  "BFA",
                  "BDI",
                  "CPV",
                  "KHM",
                  "CMR",
                  "CAN",
                  "CYM",
                  "CAF",
                  "TCD",
                  "CHL",
                  "CHN",
                  "CXR",
                  "CCK",
                  "COL",
                  "COM",
                  "COG",
                  "COD",
                  "COK",
                  "CRI",
                  "CIV",
                  "HRV",
                  "CUB",
                  "CUW",
                  "CYP",
                  "CZE",
                  "DNK",
                  "DJI",
                  "DMA",
                  "DOM",
                  "ECU",
                  "EGY",
                  "SLV",
                  "GNQ",
                  "ERI",
                  "EST",
                  "ETH",
                  "FLK",
                  "FRO",
                  "FJI",
                  "FIN",
                  "FRA",
                  "GUF",
                  "PYF",
                  "ATF",
                  "GAB",
                  "GMB",
                  "GEO",
                  "DEU",
                  "GHA",
                  "GIB",
                  "GRC",
                  "GRL",
                  "GRD",
                  "GLP",
                  "GUM",
                  "GTM",
                  "GGY",
                  "GIN",
                  "GNB",
                  "GUY",
                  "HTI",
                  "HMD",
                  "VAT",
                  "HND",
                  "HKG",
                  "HUN",
                  "ISL",
                  "IND",
                  "IDN",
                  "IRN",
                  "IRQ",
                  "IRL",
                  "IMN",
                  "ISR",
                  "ITA",
                  "JAM",
                  "JPN",
                  "JEY",
                  "JOR",
                  "KAZ",
                  "KEN",
                  "KIR",
                  "PRK",
                  "KOR",
                  "KWT",
                  "KGZ",
                  "LAO",
                  "LVA",
                  "LBN",
                  "LSO",
                  "LBR",
                  "LBY",
                  "LIE",
                  "LTU",
                  "LUX",
                  "MAC",
                  "MKD",
                  "MDG",
                  "MWI",
                  "MYS",
                  "MDV",
                  "MLI",
                  "MLT",
                  "MHL",
                  "MTQ",
                  "MRT",
                  "MUS",
                  "MYT",
                  "MEX",
                  "FSM",
                  "MDA",
                  "MCO",
                  "MNG",
                  "MNE",
                  "MSR",
                  "MAR",
                  "MOZ",
                  "MMR",
                  "NAM",
                  "NRU",
                  "NPL",
                  "NLD",
                  "NCL",
                  "NZL",
                  "NIC",
                  "NER",
                  "NGA",
                  "NIU",
                  "NFK",
                  "MNP",
                  "NOR",
                  "OMN",
                  "PAK",
                  "PLW",
                  "PSE",
                  "PAN",
                  "PNG",
                  "PRY",
                  "PER",
                  "PHL",
                  "PCN",
                  "POL",
                  "PRT",
                  "PRI",
                  "QAT",
                  "REU",
                  "ROU",
                  "RUS",
                  "RWA",
                  "BLM",
                  "SHN",
                  "KNA",
                  "LCA",
                  "MAF",
                  "SPM",
                  "VCT",
                  "WSM",
                  "SMR",
                  "STP",
                  "SAU",
                  "SEN",
                  "SRB",
                  "SYC",
                  "SLE",
                  "SGP",
                  "SXM",
                  "SVK",
                  "SVN",
                  "SLB",
                  "SOM",
                  "ZAF",
                  "SGS",
                  "SSD",
                  "ESP",
                  "LKA",
                  "SDN",
                  "SUR",
                  "SJM",
                  "SWZ",
                  "SWE",
                  "CHE",
                  "SYR",
                  "TWN",
                  "TJK",
                  "TZA",
                  "THA",
                  "TLS",
                  "TGO",
                  "TKL",
                  "TON",
                  "TTO",
                  "TUN",
                  "TUR",
                  "TKM",
                  "TCA",
                  "TUV",
                  "UGA",
                  "UKR",
                  "ARE",
                  "GBR",
                  "USA",
                  "UMI",
                  "URY",
                  "UZB",
                  "VUT",
                  "VEN",
                  "VNM",
                  "VGB",
                  "VIR",
                  "WLF",
                  "ESH",
                  "YEM",
                  "ZMB",
                  "ZWE",
                  "UNK",
                  "XKX",
                  "ANT"
                ],
                "maxLength": 3,
                "type": "string",
                "x-go-name": "ResidenceCountryCode"
              },
              "risk_profile": {
                "$ref": "#/definitions/APIRiskProfile"
              },
              "title": {
                "description": "Title",
                "enum": [
                  "Mr.",
                  "Ms.",
                  "Mrs.",
                  "Miss"
                ],
                "type": "string",
                "x-go-name": "Title"
              }
            },
            "required": [
              "first_name",
              "last_name",
              "birth_date",
              "residence_country_code",
              "is_represented_by_someone_else",
              "is_beneficial_owner"
            ],
            "type": "object"
          },
          {
            "properties": {
              "business_relationship_purpose": {
                "description": "Business relationship purpose",
                "maxLength": 255,
                "type": "string",
                "x-go-name": "BusinessRelationshipPurpose"
              },
              "created_at": {
                "description": "Date-time the person was created at\nTime must be in 2006-01-02T15:04:05Z format",
                "format": "date-time",
                "type": "string",
                "x-go-name": "CreatedAt"
              },
              "deactivated_at": {
                "description": "Date-time the person was deactivated at\nTime must be in 2006-01-02T15:04:05Z format",
                "format": "date-time",
                "type": "string",
                "x-go-name": "DeactivatedAt"
              },
              "id": {
                "description": "Person ID",
                "format": "uuid4",
                "type": "string",
                "x-go-name": "ID"
              },
              "kyc_status": {
                "$ref": "#/definitions/KYCStatus"
              },
              "push_notifications_enabled": {
                "description": "Are push notifications enabled for cardholder",
                "type": "boolean",
                "x-go-name": "PushNotificationsEnabled"
              },
              "status": {
                "description": "Person status. Can be \"Active\" or \"Deactivated\"",
                "enum": [
                  "Active",
                  "Deactivated",
                  "Rejected"
                ],
                "maxLength": 30,
                "type": "string",
                "x-go-name": "Status"
              },
              "updated_at": {
                "description": "Date-time the person was updated at\nTime must be in 2006-01-02T15:04:05Z format",
                "format": "date-time",
                "type": "string",
                "x-go-name": "UpdatedAt"
              }
            },
            "type": "object"
          }
        ],
        "title": "Person represents a person.",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Person3DSSettingsResponse": {
        "description": "Person3DSSettingsResponse",
        "properties": {
          "id": {
            "description": "ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "person_id": {
            "description": "Person ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "email": {
            "description": "Email",
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "description": "Mobile",
            "type": "string",
            "x-go-name": "Mobile"
          },
          "password": {
            "description": "Password",
            "type": "string",
            "x-go-name": "Password"
          },
          "force_usage": {
            "description": "ForceUsage",
            "type": "boolean",
            "x-go-name": "ForceUsage"
          },
          "card_default_settings": {
            "description": "CardDefaultSettings",
            "type": "boolean",
            "x-go-name": "CardDefaultSettings"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "PersonAdditionalInfo": {
        "allOf": [
          {
            "properties": {
              "key": {
                "description": "Key must be unique. Allowed case-insensitive characters: [a-z0-9]",
                "maxLength": 50,
                "type": "string",
                "x-go-name": "Key"
              },
              "value": {
                "description": "Value",
                "maxLength": 50,
                "type": "string",
                "x-go-name": "Value"
              }
            },
            "required": [
              "key"
            ],
            "type": "object"
          },
          {
            "properties": {
              "created_at": {
                "format": "date-time",
                "type": "string",
                "x-go-name": "CreatedAt"
              },
              "created_by": {
                "description": "ID of the user who has created person additional info",
                "type": "string",
                "x-go-name": "CreatedBy"
              },
              "deleted_at": {
                "format": "date-time",
                "type": "string",
                "x-go-name": "DeletedAt"
              },
              "deleted_by": {
                "description": "ID of the user who has deleted person additional info",
                "type": "string",
                "x-go-name": "DeletedBy"
              },
              "id": {
                "description": "ID",
                "format": "uuid4",
                "type": "string",
                "x-go-name": "ID"
              },
              "person_id": {
                "description": "Person ID",
                "format": "uuid4",
                "type": "string",
                "x-go-name": "PersonID"
              },
              "updated_at": {
                "format": "date-time",
                "type": "string",
                "x-go-name": "UpdatedAt"
              },
              "updated_by": {
                "description": "ID of the user who has updated person additional info",
                "type": "string",
                "x-go-name": "UpdatedBy"
              }
            },
            "type": "object"
          }
        ],
        "title": "PersonAdditionalInfo represents person additional info.",
        "x-go-package": "github.com/wallester/api/model"
      },
      "PersonAdditionalInfoFields": {
        "properties": {
          "key": {
            "description": "Key must be unique. Allowed case-insensitive characters: [a-z0-9]",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "Key"
          },
          "value": {
            "description": "Value",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "Value"
          }
        },
        "required": [
          "key"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "PersonAddress": {
        "properties": {
          "address1": {
            "description": "Address line 1",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "description": "Address line 2",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address2"
          },
          "city": {
            "description": "City",
            "maxLength": 35,
            "type": "string",
            "x-go-name": "City"
          },
          "postal_code": {
            "description": "Postal code",
            "maxLength": 10,
            "type": "string",
            "x-go-name": "PostalCode"
          },
          "country_code": {
            "description": "Country Code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "CountryCode"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "PersonFields": {
        "properties": {
          "personal_number": {
            "description": "Personal number must be unique for every person on product.",
            "maxLength": 20,
            "type": "string",
            "x-go-name": "PersonalNumber"
          },
          "personal_number_issuer": {
            "description": "Personal number issuer country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "PersonalNumberIssuer"
          },
          "title": {
            "description": "Title",
            "enum": [
              "Mr.",
              "Ms.",
              "Mrs.",
              "Miss"
            ],
            "type": "string",
            "x-go-name": "Title"
          },
          "first_name": {
            "description": "First name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "middle_name": {
            "description": "Middle name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "MiddleName"
          },
          "last_name": {
            "description": "Last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "LastName"
          },
          "birth_date": {
            "description": "Birthdate. Must be in 2006-01-02 format.",
            "format": "date",
            "type": "string",
            "x-go-name": "BirthDate"
          },
          "birth_country_code": {
            "description": "Birth country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "BirthCountryCode"
          },
          "gender": {
            "description": "Gender",
            "enum": [
              "MALE",
              "FEMALE"
            ],
            "maxLength": 6,
            "type": "string",
            "x-go-name": "Gender"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed. \u003cbr\u003e\n__Required if Email is empty.__",
            "type": "string",
            "x-go-name": "Mobile"
          },
          "email": {
            "description": "E-mail address. \u003cbr\u003e\n__Required if Mobile is empty.__",
            "format": "email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "external_id": {
            "description": "External ID must be unique for every person on product.",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "residence_country_code": {
            "description": "Residence country code. Must be in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "ResidenceCountryCode"
          },
          "is_represented_by_someone_else": {
            "description": "Whether the person is representative or not",
            "type": "boolean",
            "x-go-name": "IsRepresentedBySomeoneElse"
          },
          "is_beneficial_owner": {
            "description": "Whether the person is beneficial owner or not",
            "type": "boolean",
            "x-go-name": "IsBeneficialOwner"
          },
          "is_politically_exposed_person": {
            "description": "Whether the person is politically exposed or not. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsPoliticallyExposedPerson"
          },
          "politically_exposed_person_explanation": {
            "description": "Explanation of politically exposed person",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "PoliticallyExposedPersonExplanation"
          },
          "risk_profile": {
            "$ref": "#/definitions/APIRiskProfile"
          },
          "loyalty_number": {
            "description": "Loyalty number",
            "maxLength": 20,
            "minLength": 20,
            "type": "string",
            "x-go-name": "LoyaltyNumber"
          },
          "document_number": {
            "description": "Document number",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "DocumentNumber"
          },
          "address1": {
            "description": "DEPRECATED\nAddress line 1",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "description": "DEPRECATED\nAddress line 2",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address2"
          },
          "city": {
            "description": "DEPRECATED\nCity",
            "maxLength": 35,
            "type": "string",
            "x-go-name": "City"
          },
          "postal_code": {
            "description": "DEPRECATED\nPostal code",
            "maxLength": 10,
            "type": "string",
            "x-go-name": "PostalCode"
          },
          "address": {
            "$ref": "#/definitions/PersonAddress"
          },
          "is_sanctions_related": {
            "description": "Is Sanctions Related? \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "is_adverse_media_involved": {
            "description": "Is Adverse Media Involved? \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "preferred_language_code": {
            "description": "Preferred language code",
            "enum": [
              "ABK",
              "AAR",
              "AFR",
              "AKA",
              "SQI",
              "AMH",
              "ARA",
              "ARG",
              "HYE",
              "ASM",
              "AVA",
              "AVE",
              "AYM",
              "AZE",
              "BAM",
              "BAL",
              "BAK",
              "EUS",
              "BEL",
              "BEN",
              "BIH",
              "BIS",
              "BOS",
              "BRE",
              "BUL",
              "MYA",
              "CAT",
              "CHA",
              "CHE",
              "NYA",
              "ZHO",
              "CHV",
              "COR",
              "COS",
              "CRE",
              "HRV",
              "CES",
              "DAN",
              "DIV",
              "NLD",
              "DZO",
              "ENG",
              "EPO",
              "EST",
              "EWE",
              "FAO",
              "FIJ",
              "FIN",
              "FRA",
              "FUL",
              "GLG",
              "KAT",
              "DEU",
              "ELL",
              "GRN",
              "GUJ",
              "HAT",
              "HAU",
              "HEB",
              "HER",
              "HIN",
              "HMO",
              "HUN",
              "INA",
              "IND",
              "ILE",
              "GLE",
              "IBO",
              "IPK",
              "IDO",
              "ISL",
              "ITA",
              "IKU",
              "JPN",
              "JAV",
              "KAL",
              "KAN",
              "KAU",
              "KAS",
              "KAZ",
              "KHM",
              "KIK",
              "KIN",
              "KIR",
              "KOM",
              "KON",
              "KOR",
              "KUR",
              "KUA",
              "LAT",
              "LTZ",
              "LUG",
              "LIJ",
              "LIN",
              "LAO",
              "LIT",
              "LUB",
              "LAV",
              "GLV",
              "MKD",
              "MLG",
              "MSA",
              "MAL",
              "MLT",
              "MRI",
              "MAR",
              "MAH",
              "MON",
              "NAU",
              "NAV",
              "NDE",
              "NEP",
              "NDO",
              "NOB",
              "NNO",
              "NOR",
              "III",
              "NBL",
              "OCI",
              "OJI",
              "CHU",
              "ORM",
              "ORI",
              "OSS",
              "PAN",
              "PLI",
              "FAS",
              "POL",
              "PUS",
              "POR",
              "QUE",
              "ROH",
              "RUN",
              "RON",
              "RUS",
              "SAN",
              "SRD",
              "SND",
              "SME",
              "SMO",
              "SAG",
              "SRP",
              "GLA",
              "SNA",
              "SIN",
              "SLK",
              "SLV",
              "SOM",
              "SOT",
              "SPA",
              "SUN",
              "SWA",
              "SSW",
              "SWE",
              "TAM",
              "TEL",
              "TGK",
              "THA",
              "TIR",
              "BOD",
              "TUK",
              "TGL",
              "TSN",
              "TON",
              "TUR",
              "TSO",
              "TAT",
              "TWI",
              "TAH",
              "UIG",
              "UKR",
              "URD",
              "UZB",
              "VEN",
              "VIE",
              "VOL",
              "WLN",
              "CYM",
              "WOL",
              "FRY",
              "XHO",
              "YID",
              "YOR",
              "ZHA",
              "ZUL"
            ],
            "type": "string",
            "x-go-name": "PreferredLanguageCode"
          },
          "expected_turnover": {
            "description": "ExpectedTurnover",
            "enum": [
              "From0to1500",
              "From1501to3000",
              "From3001to5000",
              "From5001to15000",
              "From15001AndMore"
            ],
            "type": "string",
            "x-go-name": "ExpectedTurnover"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "birth_date",
          "residence_country_code",
          "is_represented_by_someone_else",
          "is_beneficial_owner"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "PersonalizationProductCodesResponse": {
        "properties": {
          "personalization_default_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationDefaultProductCode"
          },
          "personalization_virtual_default_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationVirtualDefaultProductCode"
          },
          "personalization_product_codes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "PersonalizationProductCodes"
          },
          "card_design_update_info": {
            "items": {
              "$ref": "#/definitions/CardDesignUpdateInfo"
            },
            "type": "array",
            "x-go-name": "CardDesignUpdateInfo"
          }
        },
        "title": "PersonalizationProductCodesResponse represents get personalization product codes response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "PersonalizeCardEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/PersonalizeCardEventView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "personalize"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "card"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "PersonalizeCardEventView": {
        "properties": {
          "3d_secure_settings": {
            "$ref": "#/definitions/CardEventCard3DSecureSettings"
          },
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_metadata_profile_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "card_processor_card_id": {
            "type": "string",
            "x-go-name": "CardProcessorCardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "delivery_address": {
            "$ref": "#/definitions/CardEventDeliveryAddress"
          },
          "embossing_name": {
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "expiry_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_disposable": {
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "is_paid": {
            "type": "boolean",
            "x-go-name": "IsPaid"
          },
          "limits": {
            "$ref": "#/definitions/CardEventLimits"
          },
          "masked_card_number": {
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "personalization_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "predecessor_card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "renew_automatically": {
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "security": {
            "$ref": "#/definitions/CardEventSecurity"
          },
          "status": {
            "enum": [
              "Personalized"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "type": {
            "enum": [
              "ChipAndPin",
              "ChipAndPinAnonymous",
              "Sticker",
              "Virtual"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "is_paid",
          "created_at",
          "created_by",
          "expiry_date",
          "is_disposable",
          "masked_card_number",
          "renew_automatically",
          "personalization_product_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "PingRequest": {
        "properties": {
          "message": {
            "description": "Ping message",
            "type": "string",
            "x-go-name": "Message"
          }
        },
        "required": [
          "message"
        ],
        "title": "PingRequest represents a test ping request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "PingResponse": {
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        },
        "title": "PingResponse represents a test ping response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Product": {
        "properties": {
          "id": {
            "description": "Product ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "client_id": {
            "description": "Client ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ClientID"
          },
          "code": {
            "description": "Product code",
            "type": "string",
            "x-go-name": "Code"
          },
          "deleted_at": {
            "description": "Date-time the client was deleted at\nTime must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DeletedAt"
          }
        },
        "title": "Product represents a product.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ProductFeesByProductIDResponse": {
        "properties": {
          "default_fee_complex_authorization_atm_withdrawal_fixed_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexAuthorizationATMWithdrawalFixedPart"
          },
          "default_fee_complex_authorization_atm_withdrawal_min": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexAuthorizationATMWithdrawalMin"
          },
          "default_fee_complex_authorization_atm_withdrawal_percentage_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexAuthorizationATMWithdrawalPercentagePart"
          },
          "default_fee_fixed_rate_authorization_atm_balance_inquiry": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateAuthorizationATMBalanceInquiry"
          },
          "default_fee_fixed_rate_authorization_atm_withdrawal": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateAuthorizationATMWithdrawal"
          },
          "default_fee_fixed_rate_authorization_declined": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateAuthorizationDeclined"
          },
          "default_fee_fixed_rate_authorization_declined_atm": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateAuthorizationDeclinedATM"
          },
          "default_fee_fixed_rate_card_replacement": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateCardReplacement"
          },
          "default_fee_fixed_rate_pin_change": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRatePINChange"
          },
          "default_fee_percentage_rate_authorization_atm_withdrawal": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeePercentageRateAuthorizationATMWithdrawal"
          },
          "default_fee_percentage_rate_authorization_atm_withdrawal_fixed_min": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeePercentageRateAuthorizationATMWithdrawalFixedMin"
          },
          "default_fee_percentage_rate_authorization_foreign_exchange": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeePercentageRateAuthorizationForeignExchange"
          },
          "default_fee_percentage_rate_authorization_foreign_exchange_fixed_min": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeePercentageRateAuthorizationForeignExchangeFixedMin"
          },
          "default_fee_fixed_rate_card_usage": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateCardUsage"
          },
          "default_fee_payment_percentage_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeePaymentPercentagePart"
          },
          "default_fee_payment_fixed_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeePaymentFixedPart"
          },
          "default_fee_payment_fixed_min": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeePaymentFixedMin"
          },
          "default_fee_complex_authorization_atm_withdrawal_eea_percentage_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexAuthorizationATMWithdrawalEEAPercentagePart"
          },
          "default_fee_complex_authorization_atm_withdrawal_eea_fixed_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexAuthorizationATMWithdrawalEEAFixedPart"
          },
          "default_fee_complex_authorization_atm_withdrawal_eea_min": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexAuthorizationATMWithdrawalEEAMin"
          },
          "default_fee_complex_authorization_atm_withdrawal_international_percentage_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexAuthorizationATMWithdrawalInternationalPercentagePart"
          },
          "default_fee_complex_authorization_atm_withdrawal_international_fixed_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexAuthorizationATMWithdrawalInternationalFixedPart"
          },
          "default_fee_complex_authorization_atm_withdrawal_international_min": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexAuthorizationATMWithdrawalInternationalMin"
          },
          "default_fee_complex_payment_eea_percentage_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexPaymentEEAPercentagePart"
          },
          "default_fee_complex_payment_eea_fixed_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexPaymentEEAFixedPart"
          },
          "default_fee_complex_payment_eea_min": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexPaymentEEAMin"
          },
          "default_fee_complex_payment_international_percentage_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexPaymentInternationalPercentagePart"
          },
          "default_fee_complex_payment_international_fixed_part": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexPaymentInternationalFixedPart"
          },
          "default_fee_complex_payment_international_min": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeComplexPaymentInternationalMin"
          },
          "default_fee_fixed_rate_remind_3ds_password": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateRemind3DSPassword"
          },
          "default_fee_fixed_rate_remind_pin": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateRemindPIN"
          },
          "default_fee_fixed_rate_card_express_delivery": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateCardExpressDelivery"
          },
          "default_fee_fixed_rate_payment_eea": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRatePaymentEEA"
          },
          "default_fee_fixed_rate_payment_international": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRatePaymentInternational"
          },
          "default_fee_fixed_rate_plastic_card_issuance": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRatePlasticCardIssuance"
          },
          "default_fee_fixed_rate_virtual_card_issuance": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateVirtualCardIssuance"
          },
          "default_fee_fixed_rate_authorization_eea": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateAuthorizationEEA"
          },
          "default_fee_fixed_rate_authorization_international": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateAuthorizationInternational"
          },
          "default_fee_percentage_rate_incoming_sepa_payment": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeePercentageRateIncomingSEPAPayment"
          },
          "default_fee_fixed_rate_incoming_sepa_payment": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateIncomingSEPAPayment"
          },
          "default_fee_percentage_rate_main_account_transfer": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeePercentageRateMainAccountTransfer"
          },
          "default_fee_fixed_rate_zero_authorization_eea": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateZeroAuthorizationEEA"
          },
          "default_fee_fixed_rate_zero_authorization_international": {
            "format": "double",
            "type": "number",
            "x-go-name": "DefaultFeeFixedRateZeroAuthorizationInternational"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Records": {
        "properties": {
          "paginated_accounts": {
            "items": {
              "$ref": "#/definitions/Account"
            },
            "type": "array",
            "x-go-name": "Accounts"
          },
          "paginated_cards": {
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          },
          "paginated_persons": {
            "items": {
              "$ref": "#/definitions/Person"
            },
            "type": "array",
            "x-go-name": "Persons"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "RecordsCount": {
        "properties": {
          "accounts_count": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "Accounts"
          },
          "cards_count": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "Cards"
          },
          "persons_count": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "Persons"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "RefundInfo": {
        "properties": {
          "is_partial": {
            "type": "boolean",
            "x-go-name": "IsPartial"
          },
          "comment": {
            "type": "string",
            "x-go-name": "Comment"
          }
        },
        "title": "RefundInfo represents an information about refund.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "RegisterCompanyFCMTokenRequest": {
        "properties": {
          "device_id": {
            "description": "Device ID",
            "maxLength": 4096,
            "type": "string",
            "x-go-name": "DeviceID"
          },
          "fcm_token": {
            "description": "Firebase token",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "FCMToken"
          }
        },
        "required": [
          "device_id",
          "fcm_token"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "RegisterCompanyFCMTokenResponse": {
        "properties": {
          "company_fcm_token": {
            "$ref": "#/definitions/CompanyFCMToken"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "RegisterFCMTokenRequest": {
        "properties": {
          "device_id": {
            "description": "Device ID",
            "maxLength": 4096,
            "type": "string",
            "x-go-name": "DeviceID"
          },
          "fcm_token": {
            "description": "Firebase token",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "FCMToken"
          }
        },
        "required": [
          "device_id",
          "fcm_token"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "RegisterFCMTokenResponse": {
        "properties": {
          "fcm_token": {
            "$ref": "#/definitions/FCMToken"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ReleaseAuthorizationView": {
        "properties": {
          "data": {
            "$ref": "#/definitions/EventAuthorization"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "notification"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "authorization_release"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "RemoveRepresentativeResponse": {
        "properties": {
          "representative": {
            "$ref": "#/definitions/Representative"
          }
        },
        "title": "RemoveRepresentativeResponse is the response to the request to remove existing representative.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "RenewCardEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/RenewCardEventView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "renew"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "card"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "RenewCardEventView": {
        "properties": {
          "3d_secure_settings": {
            "$ref": "#/definitions/CardEventCard3DSecureSettings"
          },
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_metadata_profile_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "card_processor_card_id": {
            "type": "string",
            "x-go-name": "CardProcessorCardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "delivery_address": {
            "$ref": "#/definitions/CardEventDeliveryAddress"
          },
          "embossing_name": {
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "expiry_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_disposable": {
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "is_paid": {
            "type": "boolean",
            "x-go-name": "IsPaid"
          },
          "limits": {
            "$ref": "#/definitions/CardEventLimits"
          },
          "masked_card_number": {
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "personalization_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "predecessor_card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "renew_automatically": {
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "security": {
            "$ref": "#/definitions/CardEventSecurity"
          },
          "status": {
            "enum": [
              "AwaitingRenewal"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "type": {
            "enum": [
              "ChipAndPin",
              "ChipAndPinAnonymous",
              "Sticker",
              "Virtual"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "is_paid",
          "created_at",
          "created_by",
          "expiry_date",
          "is_disposable",
          "masked_card_number",
          "renew_automatically",
          "personalization_product_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ReopenAccountResponse": {
        "properties": {
          "account": {
            "$ref": "#/definitions/Account"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ReplaceCardEvent": {
        "properties": {
          "data": {
            "$ref": "#/definitions/ReplaceCardEventView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "replace"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "card"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ReplaceCardEventView": {
        "properties": {
          "3d_secure_settings": {
            "$ref": "#/definitions/CardEventCard3DSecureSettings"
          },
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "card_metadata_profile_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "card_processor_card_id": {
            "type": "string",
            "x-go-name": "CardProcessorCardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "delivery_address": {
            "$ref": "#/definitions/CardEventDeliveryAddress"
          },
          "embossing_name": {
            "type": "string",
            "x-go-name": "EmbossingName"
          },
          "expiry_date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "ExpiryDate"
          },
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_disposable": {
            "type": "boolean",
            "x-go-name": "IsDisposable"
          },
          "is_paid": {
            "type": "boolean",
            "x-go-name": "IsPaid"
          },
          "limits": {
            "$ref": "#/definitions/CardEventLimits"
          },
          "masked_card_number": {
            "type": "string",
            "x-go-name": "MaskedCardNumber"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "personalization_product_code": {
            "type": "string",
            "x-go-name": "PersonalizationProductCode"
          },
          "predecessor_card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PredecessorCardID"
          },
          "renew_automatically": {
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          },
          "security": {
            "$ref": "#/definitions/CardEventSecurity"
          },
          "status": {
            "enum": [
              "AwaitingRenewal"
            ],
            "type": "string",
            "x-go-name": "Status"
          },
          "type": {
            "enum": [
              "ChipAndPin",
              "ChipAndPinAnonymous",
              "Sticker",
              "Virtual"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "is_paid",
          "created_at",
          "created_by",
          "expiry_date",
          "is_disposable",
          "masked_card_number",
          "renew_automatically",
          "personalization_product_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ReplaceCardResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "ReplaceCardResponse is the response to the request to replace a card.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ReplaceCardsBatchRequest": {
        "properties": {
          "card_ids": {
            "description": "Card IDs",
            "items": {
              "format": "uuid4",
              "type": "string"
            },
            "type": "array",
            "x-go-name": "CardIDs"
          }
        },
        "required": [
          "card_ids"
        ],
        "title": "ReplaceCardsBatchRequest is the response to the request to replace a cards.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ReplaceCardsBatchResponse": {
        "properties": {
          "cards": {
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          }
        },
        "title": "ReplaceCardsBatchResponse is the response to the request to replace a cards.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Representative": {
        "allOf": [
          {
            "properties": {
              "birth_date": {
                "description": "Birthdate. Must be in 2006-01-02 format. Must be at least 16 years old.",
                "format": "date",
                "type": "string",
                "x-go-name": "BirthDate"
              },
              "email": {
                "description": "Email.",
                "maxLength": 255,
                "type": "string",
                "x-go-name": "Email"
              },
              "first_name": {
                "description": "Representative first name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "FirstName"
              },
              "is_adverse_media_involved": {
                "description": "Is Adverse Media Involved. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsAdverseMediaInvolved"
              },
              "is_member_of_the_board": {
                "description": "Is member of the board?",
                "type": "boolean",
                "x-go-name": "IsMemberOfTheBoard"
              },
              "is_politically_exposed": {
                "description": "Is Politically Exposed. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsPoliticallyExposed"
              },
              "is_representative": {
                "description": "Is representative?",
                "type": "boolean",
                "x-go-name": "IsRepresentative"
              },
              "is_sanctions_related": {
                "description": "Is Sanctions Related. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
                "type": "boolean",
                "x-go-name": "IsSanctionsRelated"
              },
              "is_shareholder": {
                "description": "Is shareholder",
                "type": "boolean",
                "x-go-name": "IsShareholder"
              },
              "is_ultimate_beneficial_owner": {
                "description": "Is ultimate beneficial owner?",
                "type": "boolean",
                "x-go-name": "IsUltimateBeneficialOwner"
              },
              "last_name": {
                "description": "Representative last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "LastName"
              },
              "middle_name": {
                "description": "Representative middle name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "MiddleName"
              },
              "mobile": {
                "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
                "type": "string",
                "x-go-name": "Mobile"
              },
              "percentage_owned": {
                "description": "Percentage owned. \u003cbr\u003e\n__If representative is shareholder, minimum value is 1.__",
                "format": "float",
                "maximum": 100,
                "minimum": 0,
                "type": "number",
                "x-go-name": "PercentageOwned"
              },
              "position": {
                "description": "Representative position. \u003cbr\u003e\n__Field is required for NonRegulated WhiteLabel partners.__",
                "maxLength": 100,
                "type": "string",
                "x-go-name": "Position"
              },
              "residence_country_code": {
                "description": "Residence country code. Must be in ISO 3166-1 Alpha-3 code standard",
                "enum": [
                  "AFG",
                  "ALA",
                  "ALB",
                  "DZA",
                  "ASM",
                  "AND",
                  "AGO",
                  "AIA",
                  "ATA",
                  "ATG",
                  "ARG",
                  "ARM",
                  "ABW",
                  "AUS",
                  "AUT",
                  "AZE",
                  "BHS",
                  "BHR",
                  "BGD",
                  "BRB",
                  "BLR",
                  "BEL",
                  "BLZ",
                  "BEN",
                  "BMU",
                  "BTN",
                  "BOL",
                  "BES",
                  "BIH",
                  "BWA",
                  "BVT",
                  "BRA",
                  "IOT",
                  "BRN",
                  "BGR",
                  "BFA",
                  "BDI",
                  "CPV",
                  "KHM",
                  "CMR",
                  "CAN",
                  "CYM",
                  "CAF",
                  "TCD",
                  "CHL",
                  "CHN",
                  "CXR",
                  "CCK",
                  "COL",
                  "COM",
                  "COG",
                  "COD",
                  "COK",
                  "CRI",
                  "CIV",
                  "HRV",
                  "CUB",
                  "CUW",
                  "CYP",
                  "CZE",
                  "DNK",
                  "DJI",
                  "DMA",
                  "DOM",
                  "ECU",
                  "EGY",
                  "SLV",
                  "GNQ",
                  "ERI",
                  "EST",
                  "ETH",
                  "FLK",
                  "FRO",
                  "FJI",
                  "FIN",
                  "FRA",
                  "GUF",
                  "PYF",
                  "ATF",
                  "GAB",
                  "GMB",
                  "GEO",
                  "DEU",
                  "GHA",
                  "GIB",
                  "GRC",
                  "GRL",
                  "GRD",
                  "GLP",
                  "GUM",
                  "GTM",
                  "GGY",
                  "GIN",
                  "GNB",
                  "GUY",
                  "HTI",
                  "HMD",
                  "VAT",
                  "HND",
                  "HKG",
                  "HUN",
                  "ISL",
                  "IND",
                  "IDN",
                  "IRN",
                  "IRQ",
                  "IRL",
                  "IMN",
                  "ISR",
                  "ITA",
                  "JAM",
                  "JPN",
                  "JEY",
                  "JOR",
                  "KAZ",
                  "KEN",
                  "KIR",
                  "PRK",
                  "KOR",
                  "KWT",
                  "KGZ",
                  "LAO",
                  "LVA",
                  "LBN",
                  "LSO",
                  "LBR",
                  "LBY",
                  "LIE",
                  "LTU",
                  "LUX",
                  "MAC",
                  "MKD",
                  "MDG",
                  "MWI",
                  "MYS",
                  "MDV",
                  "MLI",
                  "MLT",
                  "MHL",
                  "MTQ",
                  "MRT",
                  "MUS",
                  "MYT",
                  "MEX",
                  "FSM",
                  "MDA",
                  "MCO",
                  "MNG",
                  "MNE",
                  "MSR",
                  "MAR",
                  "MOZ",
                  "MMR",
                  "NAM",
                  "NRU",
                  "NPL",
                  "NLD",
                  "NCL",
                  "NZL",
                  "NIC",
                  "NER",
                  "NGA",
                  "NIU",
                  "NFK",
                  "MNP",
                  "NOR",
                  "OMN",
                  "PAK",
                  "PLW",
                  "PSE",
                  "PAN",
                  "PNG",
                  "PRY",
                  "PER",
                  "PHL",
                  "PCN",
                  "POL",
                  "PRT",
                  "PRI",
                  "QAT",
                  "REU",
                  "ROU",
                  "RUS",
                  "RWA",
                  "BLM",
                  "SHN",
                  "KNA",
                  "LCA",
                  "MAF",
                  "SPM",
                  "VCT",
                  "WSM",
                  "SMR",
                  "STP",
                  "SAU",
                  "SEN",
                  "SRB",
                  "SYC",
                  "SLE",
                  "SGP",
                  "SXM",
                  "SVK",
                  "SVN",
                  "SLB",
                  "SOM",
                  "ZAF",
                  "SGS",
                  "SSD",
                  "ESP",
                  "LKA",
                  "SDN",
                  "SUR",
                  "SJM",
                  "SWZ",
                  "SWE",
                  "CHE",
                  "SYR",
                  "TWN",
                  "TJK",
                  "TZA",
                  "THA",
                  "TLS",
                  "TGO",
                  "TKL",
                  "TON",
                  "TTO",
                  "TUN",
                  "TUR",
                  "TKM",
                  "TCA",
                  "TUV",
                  "UGA",
                  "UKR",
                  "ARE",
                  "GBR",
                  "USA",
                  "UMI",
                  "URY",
                  "UZB",
                  "VUT",
                  "VEN",
                  "VNM",
                  "VGB",
                  "VIR",
                  "WLF",
                  "ESH",
                  "YEM",
                  "ZMB",
                  "ZWE",
                  "UNK",
                  "XKX",
                  "ANT"
                ],
                "maxLength": 3,
                "type": "string",
                "x-go-name": "ResidenceCountryCode"
              },
              "title": {
                "description": "Representative title. \u003cbr\u003e\n__Field is required for NonRegulated WhiteLabel partners.__",
                "enum": [
                  "Mr.",
                  "Ms.",
                  "Mrs.",
                  "Miss"
                ],
                "maxLength": 4,
                "type": "string",
                "x-go-name": "Title"
              }
            },
            "required": [
              "first_name",
              "last_name",
              "birth_date",
              "residence_country_code"
            ],
            "type": "object"
          },
          {
            "properties": {
              "created_at": {
                "format": "date-time",
                "type": "string",
                "x-go-name": "CreatedAt"
              },
              "created_by": {
                "description": "Created by",
                "type": "string",
                "x-go-name": "CreatedBy"
              },
              "deleted_at": {
                "format": "date-time",
                "type": "string",
                "x-go-name": "DeletedAt"
              },
              "deleted_by": {
                "description": "Deleted by",
                "type": "string",
                "x-go-name": "DeletedBy"
              },
              "id": {
                "description": "Representative ID",
                "format": "uuid4",
                "type": "string",
                "x-go-name": "ID"
              },
              "kyc_status": {
                "$ref": "#/definitions/KYCStatus"
              },
              "updated_at": {
                "format": "date-time",
                "type": "string",
                "x-go-name": "UpdatedAt"
              },
              "updated_by": {
                "description": "Updated by",
                "type": "string",
                "x-go-name": "UpdatedBy"
              }
            },
            "type": "object"
          }
        ],
        "x-go-package": "github.com/wallester/api/model"
      },
      "RepresentativeFields": {
        "properties": {
          "title": {
            "description": "Representative title. \u003cbr\u003e\n__Field is required for NonRegulated WhiteLabel partners.__",
            "enum": [
              "Mr.",
              "Ms.",
              "Mrs.",
              "Miss"
            ],
            "maxLength": 4,
            "type": "string",
            "x-go-name": "Title"
          },
          "first_name": {
            "description": "Representative first name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "middle_name": {
            "description": "Representative middle name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "MiddleName"
          },
          "last_name": {
            "description": "Representative last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "LastName"
          },
          "position": {
            "description": "Representative position. \u003cbr\u003e\n__Field is required for NonRegulated WhiteLabel partners.__",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Position"
          },
          "is_member_of_the_board": {
            "description": "Is member of the board?",
            "type": "boolean",
            "x-go-name": "IsMemberOfTheBoard"
          },
          "is_representative": {
            "description": "Is representative?",
            "type": "boolean",
            "x-go-name": "IsRepresentative"
          },
          "is_ultimate_beneficial_owner": {
            "description": "Is ultimate beneficial owner?",
            "type": "boolean",
            "x-go-name": "IsUltimateBeneficialOwner"
          },
          "birth_date": {
            "description": "Birthdate. Must be in 2006-01-02 format. Must be at least 16 years old.",
            "format": "date",
            "type": "string",
            "x-go-name": "BirthDate"
          },
          "residence_country_code": {
            "description": "Residence country code. Must be in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "ResidenceCountryCode"
          },
          "is_sanctions_related": {
            "description": "Is Sanctions Related. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "is_politically_exposed": {
            "description": "Is Politically Exposed. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsPoliticallyExposed"
          },
          "is_adverse_media_involved": {
            "description": "Is Adverse Media Involved. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "is_shareholder": {
            "description": "Is shareholder",
            "type": "boolean",
            "x-go-name": "IsShareholder"
          },
          "percentage_owned": {
            "description": "Percentage owned. \u003cbr\u003e\n__If representative is shareholder, minimum value is 1.__",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "x-go-name": "PercentageOwned"
          },
          "email": {
            "description": "Email.",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "type": "string",
            "x-go-name": "Mobile"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "birth_date",
          "residence_country_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "RepresentativeFieldsSwaggerModel": {
        "properties": {
          "title": {
            "description": "Representative title. \u003cbr\u003e\n__Field is required for NonRegulated WhiteLabel partners.__",
            "enum": [
              "Mr.",
              "Ms.",
              "Mrs.",
              "Miss"
            ],
            "maxLength": 4,
            "type": "string",
            "x-go-name": "Title"
          },
          "first_name": {
            "description": "Representative first name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "middle_name": {
            "description": "Representative middle name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "MiddleName"
          },
          "last_name": {
            "description": "Representative last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "LastName"
          },
          "position": {
            "description": "Representative position. \u003cbr\u003e\n__Field is required for NonRegulated WhiteLabel partners.__",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Position"
          },
          "is_member_of_the_board": {
            "description": "Is member of the board?",
            "type": "boolean",
            "x-go-name": "IsMemberOfTheBoard"
          },
          "is_representative": {
            "description": "Is representative?",
            "type": "boolean",
            "x-go-name": "IsRepresentative"
          },
          "is_ultimate_beneficial_owner": {
            "description": "Is ultimate beneficial owner?",
            "type": "boolean",
            "x-go-name": "IsUltimateBeneficialOwner"
          },
          "birth_date": {
            "description": "Birthdate. Must be in 2006-01-02 format. Must be at least 16 years old.",
            "format": "date",
            "type": "string",
            "x-go-name": "BirthDate"
          },
          "residence_country_code": {
            "description": "Residence country code. Must be in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "ResidenceCountryCode"
          },
          "is_sanctions_related": {
            "description": "Is Sanctions Related. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "is_politically_exposed": {
            "description": "Is Politically Exposed. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsPoliticallyExposed"
          },
          "is_adverse_media_involved": {
            "description": "Is Adverse Media Involved. \u003cbr\u003e\n__Required for Regulated and RegulatedVASP partners.__ \u003cbr\u003e\n__Field must be empty for NonRegulated partners.__",
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "is_shareholder": {
            "description": "Is shareholder",
            "type": "boolean",
            "x-go-name": "IsShareholder"
          },
          "percentage_owned": {
            "description": "Percentage owned. \u003cbr\u003e\n__If representative is shareholder, minimum value is 1.__",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "x-go-name": "PercentageOwned"
          },
          "email": {
            "description": "Email.",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "type": "string",
            "x-go-name": "Mobile"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "birth_date",
          "residence_country_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "RequestCardFee": {
        "properties": {
          "type": {
            "$ref": "#/definitions/APIModelFeeType"
          },
          "percentage_part": {
            "description": "Percentage part",
            "format": "double",
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "x-go-name": "PercentagePart"
          },
          "fixed_part": {
            "description": "Fixed part",
            "format": "double",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "x-go-name": "FixedPart"
          },
          "min_amount": {
            "description": "Min amount",
            "format": "double",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "x-go-name": "MinAmount"
          }
        },
        "required": [
          "type"
        ],
        "title": "RequestCardFee represents card fee.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ResponseError": {
        "properties": {
          "message": {
            "description": "Message represents base error with generic message and status.",
            "type": "string",
            "x-go-name": "GenericMessage"
          }
        },
        "title": "ResponseError represents base error with generic message and status.",
        "type": "object",
        "x-go-package": "github.com/wallester/common/http"
      },
      "ResumeTokenRequest": {
        "properties": {
          "reason": {
            "description": "Resume reason.",
            "maxLength": 254,
            "type": "string",
            "x-go-name": "Reason"
          }
        },
        "required": [
          "reason"
        ],
        "title": "ResumeTokenRequest represents deactivate token request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ResumeTokenResponse": {
        "properties": {
          "token": {
            "$ref": "#/definitions/Token"
          }
        },
        "title": "ResumeTokenResponse returns related token.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ReversalAuthorization": {
        "properties": {
          "account_amount": {
            "format": "double",
            "minimum": 0.01,
            "type": "number",
            "x-go-name": "AccountAmount"
          },
          "account_currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "AccountCurrencyCode"
          },
          "acquiring_institution_country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "AcquiringInstitutionCountryCode"
          },
          "acquiring_institution_id": {
            "type": "string",
            "x-go-name": "AcquiringInstitutionID"
          },
          "approval_code": {
            "type": "string",
            "x-go-name": "ApprovalCode"
          },
          "approved_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "ApprovedAmount"
          },
          "card": {
            "$ref": "#/definitions/AuthorizationCard"
          },
          "card_3d_secure_authentication_type": {
            "type": "string",
            "x-go-name": "Card3DSecureAuthenticationType"
          },
          "card_3d_secure_cavv_validation_result": {
            "type": "string",
            "x-go-name": "Card3DSecureCAVVValidationResult"
          },
          "card_3d_secure_indicator": {
            "type": "string",
            "x-go-name": "Card3DSecureIndicator"
          },
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "date": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "Date"
          },
          "does_terminal_support_partial_approvals": {
            "type": "boolean",
            "x-go-name": "DoesTerminalSupportPartialApprovals"
          },
          "fees_amount": {
            "format": "double",
            "type": "number",
            "x-go-name": "FeesAmount"
          },
          "group": {
            "enum": [
              "Withdraw",
              "Deposit",
              "Purchase",
              "InternetPurchase",
              "Other",
              "PINManagement",
              "Refund"
            ],
            "type": "string",
            "x-go-name": "Group"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "is_contactless": {
            "type": "boolean",
            "x-go-name": "IsContactless"
          },
          "is_declined": {
            "type": "boolean",
            "x-go-name": "IsDeclined"
          },
          "is_mass_transit": {
            "type": "boolean",
            "x-go-name": "IsMassTransit"
          },
          "is_reversal": {
            "type": "boolean",
            "x-go-name": "IsReversal"
          },
          "merchant_category_code": {
            "type": "string",
            "x-go-name": "MerchantCategoryCode"
          },
          "merchant_city": {
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "merchant_id": {
            "type": "string",
            "x-go-name": "MerchantID"
          },
          "merchant_name": {
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "original_authorization_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "OriginalAuthorizationID"
          },
          "response_code": {
            "type": "string",
            "x-go-name": "ResponseCode"
          },
          "retrieval_reference_number": {
            "type": "string",
            "x-go-name": "RetrievalReferenceNumber"
          },
          "terminal_id": {
            "type": "string",
            "x-go-name": "TerminalID"
          },
          "transaction_amount": {
            "format": "double",
            "minimum": 0.01,
            "type": "number",
            "x-go-name": "TransactionAmount"
          },
          "transaction_currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "TransactionCurrencyCode"
          },
          "type": {
            "enum": [
              "Unknown",
              "payWaveLowValuePurchase",
              "payWaveHighValuePurchase",
              "eCommercePurchase",
              "AccountVerification",
              "UnattendedCardholderActivatedTerminal",
              "AutomatedFuelDispenser",
              "AutomatedFuelDispenserConfirmation",
              "ATMWithdrawal",
              "ATMBalanceInquiry",
              "MOTOPurchase",
              "RecurringPayment",
              "StatusCheck",
              "POSPurchase",
              "ManualCashPurchase",
              "PurchaseWithCashback",
              "QuasiCashPurchase",
              "PINChange",
              "PINUnblock",
              "CreditVoucherAndMerchandiseReturn",
              "CardToCardPaymentCredit",
              "CardToCardPaymentDebit"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "id",
          "card_id",
          "date",
          "account_amount",
          "account_currency_code",
          "group",
          "is_contactless",
          "is_mass_transit",
          "transaction_amount",
          "transaction_currency_code",
          "is_reversal",
          "is_declined",
          "does_terminal_support_partial_approvals"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ReversalAuthorizationView": {
        "properties": {
          "data": {
            "$ref": "#/definitions/ReversalAuthorization"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "notification"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "authorization"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "RiskStatus": {
        "enum": [
          "Approved",
          "Declined",
          "FreezeCard",
          "Suspicious",
          "Unknown"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "RiskZone": {
        "enum": [
          "High",
          "Low",
          "Medium"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "Scoring": {
        "properties": {
          "non_neighboring_country": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "NonNeighboringCountry"
          },
          "reversal_refund": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "ReversalRefund"
          },
          "high_risk_country_decline_all": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "HighRiskCountryDeclineAll"
          },
          "magnetic_stripe_on_chip_capable_terminal": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "MagneticStripeOnChipCapableTerminal"
          },
          "last_month_refund": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "LastMonthRefund"
          },
          "sequence_declines": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "SequenceDeclines"
          },
          "not_enough_funds": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "NotEnoughFunds"
          },
          "black_list": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "BlackList"
          },
          "magnetic_stripe_and_card_data_entered_manually": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "MagneticStripeAndCardDataEnteredManually"
          },
          "large_amount": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "LargeAmount"
          },
          "avg_month_amount": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "AvgMonthAmount"
          },
          "diff_currencies": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "DiffCurrencies"
          },
          "high_risk_country": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "HighRiskCountry"
          },
          "within_1_minute_transactions_count": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "Within1MinuteTransactionsCount"
          },
          "magnetic_stripe": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "MagneticStripe"
          },
          "country_change_within_24h": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "CountryChangeWithin24H"
          },
          "transaction_frequency": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "TransactionFrequency"
          },
          "last_month_high_risk_country": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "LastMonthHighRiskCountry"
          },
          "account_velocity_amounts": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "AccountVelocityAmounts"
          },
          "account_velocity_counts": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "AccountVelocityCounts"
          },
          "high_cash_volume": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "HighCashVolume"
          },
          "high_number_of_declines": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "HighNumberOfDeclines"
          },
          "high_risk_mcc_purchase": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "HighRiskMccPurchase"
          },
          "high_risk_country_decline_atm": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "HighRiskCountryDeclineAtm"
          },
          "high_risk_country_mark_suspicious": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "HighRiskCountryMarkSuspicious"
          },
          "invalid_pin": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "InvalidPin"
          },
          "same_merchant_1_minutes": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "SameMerchant1Minutes"
          },
          "same_merchant_24h": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "SameMerchant24H"
          },
          "within_1_minute": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "Within1Minute"
          },
          "wrong_cvv": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "WrongCvv"
          },
          "last_month_declines": {
            "format": "int32",
            "type": "integer",
            "x-go-name": "LastMonthDeclines"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "SearchAccountAdjustmentsResponse": {
        "properties": {
          "account_adjustments": {
            "description": "List of account adjustments",
            "items": {
              "$ref": "#/definitions/AccountAdjustment"
            },
            "type": "array",
            "x-go-name": "AccountAdjustments"
          },
          "total_records_number": {
            "description": "Total number of records",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "SearchAccountAdjustmentsResponse returns specific account adjustment information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "SearchAccountsResponse": {
        "properties": {
          "accounts": {
            "description": "List of found accounts",
            "items": {
              "$ref": "#/definitions/Account"
            },
            "type": "array",
            "x-go-name": "Accounts"
          },
          "total_records_number": {
            "description": "Total number of found accounts satisfying given criteria",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "SearchCardsResponse": {
        "properties": {
          "cards": {
            "description": "List of found cards",
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          },
          "total_records_number": {
            "description": "Total number of found cards satisfying given criteria",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "SearchCardsResponse returns cards.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "SearchCompaniesResponse": {
        "properties": {
          "company": {
            "description": "List of found companies",
            "items": {
              "$ref": "#/definitions/Company"
            },
            "type": "array",
            "x-go-name": "Companies"
          },
          "total_records_number": {
            "description": "Total number of found companies satisfying given criteria",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "SearchPersonsResponse": {
        "properties": {
          "persons": {
            "description": "List of found persons",
            "items": {
              "$ref": "#/definitions/Person"
            },
            "type": "array",
            "x-go-name": "Persons"
          },
          "total_records_number": {
            "description": "Total number of found persons satisfying given criteria",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "SearchPersonsResponse returns persons.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "SearchResponse": {
        "properties": {
          "records": {
            "$ref": "#/definitions/Records"
          },
          "records_count": {
            "$ref": "#/definitions/RecordsCount"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Send3DSOTPRequest": {
        "properties": {
          "otp": {
            "description": "OTP",
            "maxLength": 6,
            "type": "string",
            "x-go-name": "OTP"
          },
          "merchant_name": {
            "description": "Merchant name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "amount": {
            "description": "Amount",
            "format": "double",
            "maximum": 100000,
            "minimum": 0,
            "type": "number",
            "x-go-name": "Amount"
          },
          "currency_code": {
            "description": "Currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "CurrencyCode"
          },
          "purchase_date": {
            "description": "Purchase date. Time must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "PurchaseDate"
          }
        },
        "required": [
          "otp",
          "merchant_name",
          "amount",
          "currency_code",
          "purchase_date"
        ],
        "title": "Send3DSOTPRequest is a request to send 3DS OTP.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "SeparatedEmbossingName": {
        "properties": {
          "first_name": {
            "description": "First name",
            "maxLength": 21,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "last_name": {
            "description": "Last name",
            "maxLength": 21,
            "type": "string",
            "x-go-name": "LastName"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Service": {
        "description": "Service represents service fields",
        "properties": {
          "id": {
            "description": "ID",
            "format": "int64",
            "type": "integer",
            "x-go-name": "ID"
          },
          "description": {
            "description": "Description",
            "type": "string",
            "x-go-name": "Description"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ServiceUnavailable": {
        "properties": {
          "message": {
            "description": "Message represents base error with generic message and status.",
            "type": "string",
            "x-go-name": "GenericMessage"
          }
        },
        "title": "ServiceUnavailable maps to HTTP status service unavailable.",
        "type": "object",
        "x-go-package": "github.com/wallester/common/http"
      },
      "SingleCardDispatchMethod": {
        "enum": [
          "DHLExpress",
          "DHLGlobalMail",
          "DHLGlobalMailTracked",
          "DPDExpress",
          "StandardLatvianPostMail"
        ],
        "title": "Card dispatch method.",
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "StatementTotalFields": {
        "properties": {
          "total_records_number": {
            "description": "Total number of statement records satisfying given criteria",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          },
          "pending_amount": {
            "description": "Total pending money flow for statement records",
            "format": "double",
            "type": "number",
            "x-go-name": "PendingAmount"
          },
          "debit_turnover": {
            "description": "Total debit money flow for statement records",
            "format": "double",
            "type": "number",
            "x-go-name": "DebitTurnover"
          },
          "credit_turnover": {
            "description": "Total credit money flow for statement records",
            "format": "double",
            "type": "number",
            "x-go-name": "CreditTurnover"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "SubmitCompanyAgreementRequest": {
        "properties": {
          "agreement_id": {
            "description": "Agreement ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AgreementID"
          },
          "signed_at": {
            "description": "Signed at. Time must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "SignedAt"
          }
        },
        "required": [
          "agreement_id",
          "signed_at"
        ],
        "title": "SubmitCompanyAgreementRequest is a request to submit company agreement.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "SubmitCompanyAgreementResponse": {
        "properties": {
          "company": {
            "$ref": "#/definitions/Company"
          }
        },
        "title": "SubmitCompanyAgreementResponse returns company.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "SuspendTokenRequest": {
        "properties": {
          "reason": {
            "description": "Suspend reason.",
            "maxLength": 254,
            "type": "string",
            "x-go-name": "Reason"
          }
        },
        "required": [
          "reason"
        ],
        "title": "SuspendTokenRequest represents suspend token request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "SuspendTokenResponse": {
        "properties": {
          "token": {
            "$ref": "#/definitions/Token"
          }
        },
        "title": "SuspendTokenResponse returns related token.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Template": {
        "properties": {
          "id": {
            "description": "Template ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "product_id": {
            "description": "Product ID template belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ProductID"
          },
          "message_type": {
            "description": "Template message type",
            "enum": [
              "NotifyCardholderOnChipAndPinCardActivation",
              "NotifyCardholderOnDisabledInternetPurchase",
              "NotifyCardholderOnInsufficientFunds",
              "NotifyCardholderOnStickerActivation",
              "NotifyCardOrder",
              "SendAdjustAccountBalanceToCardholder",
              "SendForgotPasswordLinkToCardholder",
              "SendPINToCardholderForChipAndPin",
              "SendPINToCardholderForSticker",
              "SendTokenAuthenticationOTP",
              "SendLinkToSetPasswordToCardholder",
              "Send3DSPasswordOnInternetPurchasesEnabled",
              "Send3DSOTP",
              "Send3DSPasswordOnCardCreation",
              "Send3DSPasswordOnCardActivation",
              "Send3DSPasswordToCardholder",
              "SendCardBlockNotificationToCardholder",
              "SendTokenCreateNotificationToCardHolder",
              "SendTokenCreateApplePayNotificationToCardHolder",
              "SendVerificationSMSToCardholder",
              "SendVerificationEmailToCardholder",
              "SendApplePayCardRemovedNotification",
              "SendApplePayCardRenewedNotification",
              "SendOTPToCardholderIPhone",
              "SendOTPToCardholderIPad",
              "SendOTPToCardholderAppleWatch",
              "SendOTPToCardholderIMac",
              "SendVerificationEmailToClient",
              "SendInactiveCustomerApplePayNotificationToCardHolder",
              "SendDeclinedAuthorizationNotificationToCardholder",
              "SendFraudDeclinedAuthorizationApplePayNotificationToCardholder",
              "SendPaymentNotificationToCardholder",
              "SendCustomNotificationToCardholder",
              "SendAbandonedProvisioningApplePayNotificationToCardholder",
              "SendPendingProvisioningApplePayNotificationToCardholder",
              "SendLowSettlementRiskLimitNotification",
              "ShareholderBoardMemberKYCVerfication",
              "NotifyClientOnSuccessfulVerification",
              "SendInvitationSMSToEmployee",
              "NotifyClientOnRejection",
              "SendActivationOTPCode",
              "SendInvitationToCardUser",
              "SendRepresentativeVerificationLink",
              "NotifyClientOnRejectionOfVerificationFields",
              "CompanyRequestedAddPersonAsEmployee",
              "CompanyInvitedEmployee",
              "CompanyDeletedEmployee",
              "NotifyClientAboutVibanCreation",
              "ClientFrozen",
              "ClientUnfrozen",
              "TerminateByClient",
              "TerminateByServiceProvider",
              "TerminateByRegulator",
              "RaiseCompanyLimitsRequest",
              "RaiseCompanyLimitsThanks",
              "TopUpNotification",
              "SendMultiCurrencyRequest",
              "PaymentReminderNotification",
              "SendFraudAlert",
              "SendCloseClientCancellation",
              "SendSuccessfulOnboardingNotification",
              "DebtNegativeBalanceNotification",
              "DebtNegativeBalanceNotificationReminder",
              "FeesStatementNotification",
              "SendMobileOTP",
              "SendStatementToUser",
              "Send3DSAttemptNotification",
              "CompleteRegistrationReminder",
              "UploadCorporateDocumentsReminder",
              "IdentityVerificationReminder",
              "SignAgreementReminder",
              "UnableToProcessPaymentNotification",
              "UnableToProcessPaymentRepeatNotification",
              "ReceiptsReminder",
              "SendPurchasePaymentNotificationToCardholder",
              "SendWithdrawalPaymentNotificationToCardholder",
              "SendZeroPaymentNotificationToCardholder",
              "SendReversalPaymentNotificationToCardholder",
              "NotifyAboutCardActivation"
            ],
            "type": "string",
            "x-go-name": "MessageType"
          },
          "delivery_type": {
            "$ref": "#/definitions/DeliveryType"
          },
          "language_code": {
            "description": "Template language code",
            "enum": [
              "ABK",
              "AAR",
              "AFR",
              "AKA",
              "SQI",
              "AMH",
              "ARA",
              "ARG",
              "HYE",
              "ASM",
              "AVA",
              "AVE",
              "AYM",
              "AZE",
              "BAM",
              "BAL",
              "BAK",
              "EUS",
              "BEL",
              "BEN",
              "BIH",
              "BIS",
              "BOS",
              "BRE",
              "BUL",
              "MYA",
              "CAT",
              "CHA",
              "CHE",
              "NYA",
              "ZHO",
              "CHV",
              "COR",
              "COS",
              "CRE",
              "HRV",
              "CES",
              "DAN",
              "DIV",
              "NLD",
              "DZO",
              "ENG",
              "EPO",
              "EST",
              "EWE",
              "FAO",
              "FIJ",
              "FIN",
              "FRA",
              "FUL",
              "GLG",
              "KAT",
              "DEU",
              "ELL",
              "GRN",
              "GUJ",
              "HAT",
              "HAU",
              "HEB",
              "HER",
              "HIN",
              "HMO",
              "HUN",
              "INA",
              "IND",
              "ILE",
              "GLE",
              "IBO",
              "IPK",
              "IDO",
              "ISL",
              "ITA",
              "IKU",
              "JPN",
              "JAV",
              "KAL",
              "KAN",
              "KAU",
              "KAS",
              "KAZ",
              "KHM",
              "KIK",
              "KIN",
              "KIR",
              "KOM",
              "KON",
              "KOR",
              "KUR",
              "KUA",
              "LAT",
              "LTZ",
              "LUG",
              "LIJ",
              "LIN",
              "LAO",
              "LIT",
              "LUB",
              "LAV",
              "GLV",
              "MKD",
              "MLG",
              "MSA",
              "MAL",
              "MLT",
              "MRI",
              "MAR",
              "MAH",
              "MON",
              "NAU",
              "NAV",
              "NDE",
              "NEP",
              "NDO",
              "NOB",
              "NNO",
              "NOR",
              "III",
              "NBL",
              "OCI",
              "OJI",
              "CHU",
              "ORM",
              "ORI",
              "OSS",
              "PAN",
              "PLI",
              "FAS",
              "POL",
              "PUS",
              "POR",
              "QUE",
              "ROH",
              "RUN",
              "RON",
              "RUS",
              "SAN",
              "SRD",
              "SND",
              "SME",
              "SMO",
              "SAG",
              "SRP",
              "GLA",
              "SNA",
              "SIN",
              "SLK",
              "SLV",
              "SOM",
              "SOT",
              "SPA",
              "SUN",
              "SWA",
              "SSW",
              "SWE",
              "TAM",
              "TEL",
              "TGK",
              "THA",
              "TIR",
              "BOD",
              "TUK",
              "TGL",
              "TSN",
              "TON",
              "TUR",
              "TSO",
              "TAT",
              "TWI",
              "TAH",
              "UIG",
              "UKR",
              "URD",
              "UZB",
              "VEN",
              "VIE",
              "VOL",
              "WLN",
              "CYM",
              "WOL",
              "FRY",
              "XHO",
              "YID",
              "YOR",
              "ZHA",
              "ZUL"
            ],
            "type": "string",
            "x-go-name": "LanguageCode"
          },
          "body": {
            "description": "Template body",
            "type": "string",
            "x-go-name": "Body"
          },
          "subject": {
            "description": "Template subject",
            "type": "string",
            "x-go-name": "Subject"
          },
          "created_at": {
            "description": "Date-time when template was created",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "User ID who has created template",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "updated_at": {
            "description": "Date-time when template was updated",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "description": "User who updated the template",
            "type": "string",
            "x-go-name": "UpdatedBy"
          },
          "deleted_at": {
            "description": "Date-time when template was deleted",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DeletedAt"
          },
          "deleted_by": {
            "description": "User who deleted the template",
            "type": "string",
            "x-go-name": "DeletedBy"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "ThreeDSCard": {
        "properties": {
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "last_four_digits": {
            "type": "string",
            "x-go-name": "LastFourDigits"
          }
        },
        "required": [
          "id",
          "last_four_digits"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ThreeDSInitiateAction": {
        "properties": {
          "card": {
            "$ref": "#/definitions/ThreeDSCard"
          },
          "merchant": {
            "$ref": "#/definitions/ThreeDSMerchant"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestID"
          },
          "transaction": {
            "$ref": "#/definitions/ThreeDSTransaction"
          }
        },
        "required": [
          "request_id",
          "card",
          "merchant",
          "transaction"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ThreeDSMerchant": {
        "properties": {
          "category_code": {
            "type": "string",
            "x-go-name": "CategoryCode"
          },
          "country_code": {
            "type": "string",
            "x-go-name": "CountryCode"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ThreeDSOTPNotificationView": {
        "properties": {
          "amount": {
            "type": "string",
            "x-go-name": "Amount"
          },
          "card_id": {
            "type": "string",
            "x-go-name": "CardID"
          },
          "currency": {
            "type": "string",
            "x-go-name": "Currency"
          },
          "last_four_digits": {
            "type": "string",
            "x-go-name": "LastFourDigits"
          },
          "merchant_name": {
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "otp": {
            "type": "string",
            "x-go-name": "OTP"
          },
          "purchase_date": {
            "example": "14/12/2022 12:01 CET",
            "type": "string",
            "x-go-name": "PurchaseDate"
          }
        },
        "required": [
          "card_id",
          "otp",
          "merchant_name",
          "amount",
          "currency",
          "purchase_date",
          "last_four_digits"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ThreeDSTransaction": {
        "properties": {
          "amount": {
            "type": "string",
            "x-go-name": "Amount"
          },
          "currency": {
            "type": "string",
            "x-go-name": "Currency"
          },
          "time": {
            "description": "Time in UTC",
            "example": "2023-03-21T20:55:49.000Z",
            "type": "string",
            "x-go-name": "Time"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ThreeDSValidate": {
        "properties": {
          "data": {
            "$ref": "#/definitions/ThreeDSValidateView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "validate"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "3ds"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ThreeDSValidateView": {
        "properties": {
          "request_id": {
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "request_id"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "ThreeDSecureOTP": {
        "properties": {
          "data": {
            "$ref": "#/definitions/ThreeDSOTPNotificationView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "notification"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "3dsotp"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "TimeFrameParamsRequired": {
        "properties": {
          "from_date": {
            "description": "Time must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "FromDate"
          },
          "to_date": {
            "description": "Time must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "ToDate"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Token": {
        "properties": {
          "id": {
            "description": "Token ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "reference_id": {
            "description": "Reference ID represents unique ID associated with the PAN",
            "type": "string",
            "x-go-name": "ReferenceID"
          },
          "card_id": {
            "description": "Card ID to which this token belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "card_metadata_profile_id": {
            "description": "CardMetadataProfileID is associated with the card",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardMetadataProfileID"
          },
          "requestor_id": {
            "description": "RequestorID is unique ID assigned to the initiator of the token request",
            "format": "int64",
            "type": "integer",
            "x-go-name": "RequestorID"
          },
          "pan_reference_id": {
            "description": "PANReferenceID unique ID for the PAN",
            "type": "string",
            "x-go-name": "PANReferenceID"
          },
          "type": {
            "$ref": "#/definitions/TokenType"
          },
          "status": {
            "$ref": "#/definitions/TokenStatus"
          },
          "expiration": {
            "description": "Expiration the date upon which the token is set to expire",
            "format": "date-time",
            "type": "string",
            "x-go-name": "Expiration"
          },
          "original_token": {
            "description": "OriginalToken is token account number. This field is populated when performing token-for-token provisioning only.",
            "type": "string",
            "x-go-name": "OriginalToken"
          },
          "original_token_requestor_id": {
            "description": "OriginalTokenRequestorID is unique ID assigned to the initiator of the token request. This field is populated when performing token-for-token provisioning only.",
            "format": "int64",
            "type": "integer",
            "x-go-name": "OriginalTokenRequestorID"
          },
          "original_token_reference_id": {
            "description": "OriginalTokenReferenceID is unique ID for the token associated with the PAN. This field is populated when performing token-for-token provisioning only.",
            "type": "string",
            "x-go-name": "OriginalTokenReferenceID"
          },
          "original_token_assurance_level": {
            "description": "OriginalTokenAssuranceLevel assurance level of the Token to PAN binding. This field is populated when performing token-for-token provisioning only.",
            "type": "string",
            "x-go-name": "OriginalTokenAssuranceLevel"
          },
          "wallet_account_email_address_hash": {
            "description": "WalletAccountEmailAddressHash is hash of email address linked to their wallet account login",
            "type": "string",
            "x-go-name": "WalletAccountEmailAddressHash"
          },
          "cvv_2_result_code": {
            "$ref": "#/definitions/CVV2Result"
          },
          "address_verification_result_code": {
            "description": "AddressVerificationResultCode is code that describes the result of an address verification",
            "type": "string",
            "x-go-name": "AddressVerificationResultCode"
          },
          "locale": {
            "description": "Locale is language in which the app communicates with the customer, based on the",
            "type": "string",
            "x-go-name": "Locale"
          },
          "consumer_entry_mode_id": {
            "$ref": "#/definitions/ConsumerEntryMode"
          },
          "client_wallet_account_id": {
            "description": "ClientWalletAccountID identifying the wallet account-holder entity",
            "type": "string",
            "x-go-name": "ClientWalletAccountID"
          },
          "stip_reason_code": {
            "description": "STIPReasonCode this field contains a code that identifies why STIP responded for the issuer",
            "type": "string",
            "x-go-name": "STIPReasonCode"
          },
          "action_code": {
            "$ref": "#/definitions/VisaActionCode"
          },
          "created_at": {
            "description": "Date-time when token appeared in the system",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "description": "ID of the user who has created the token",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "updated_at": {
            "description": "Date-time the token was updated at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "description": "ID of the user who has updated the token",
            "type": "string",
            "x-go-name": "UpdatedBy"
          },
          "deleted_at": {
            "description": "Date-time the token was deleted at",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DeletedAt"
          },
          "deleted_by": {
            "description": "ID of the user who deleted the token",
            "type": "string",
            "x-go-name": "DeletedBy"
          },
          "token_value": {
            "description": "TokenValue is digital PAN",
            "type": "string",
            "x-go-name": "TokenValue"
          },
          "device_information_list": {
            "description": "Device information list from which the token was requested",
            "items": {
              "$ref": "#/definitions/TokenDeviceInformation"
            },
            "type": "array",
            "x-go-name": "DeviceInformationList"
          }
        },
        "title": "Token represents the token associated with the PAN.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "TokenByIDResponse": {
        "properties": {
          "token": {
            "$ref": "#/definitions/Token"
          }
        },
        "title": "TokenByIDResponse returns card related token.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "TokenDeviceInformation": {
        "properties": {
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "token_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "TokenID"
          },
          "device_id": {
            "type": "string",
            "x-go-name": "DeviceID"
          },
          "device_id_type": {
            "type": "string",
            "x-go-name": "DeviceIDType"
          },
          "language_code": {
            "type": "string",
            "x-go-name": "LanguageCode"
          },
          "type_id": {
            "$ref": "#/definitions/DeviceType"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "number": {
            "type": "string",
            "x-go-name": "Number"
          },
          "os_type_id": {
            "$ref": "#/definitions/OSType"
          },
          "os_version": {
            "type": "string",
            "x-go-name": "OSVersion"
          },
          "os_build_id": {
            "type": "string",
            "x-go-name": "OSBuildID"
          },
          "manufacturer": {
            "type": "string",
            "x-go-name": "Manufacturer"
          },
          "model": {
            "type": "string",
            "x-go-name": "Model"
          },
          "brand": {
            "type": "string",
            "x-go-name": "Brand"
          },
          "location": {
            "type": "string",
            "x-go-name": "Location"
          },
          "location_source_id": {
            "$ref": "#/definitions/LocationSource"
          },
          "device_index": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "Index"
          },
          "ip_address_v4": {
            "type": "string",
            "x-go-name": "IPAddressV4"
          },
          "token_protection_method_id": {
            "$ref": "#/definitions/TokenProtectionMethod"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "type": "string",
            "x-go-name": "UpdatedBy"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "DeletedAt"
          },
          "deleted_by": {
            "type": "string",
            "x-go-name": "DeletedBy"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "TokenProtectionMethod": {
        "enum": [
          "CLOUD",
          "SECURE_ELEMENT",
          "SOFTWARE",
          "TRUSTED_EXECUTION_ENVIRONMENT"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "TokenStatus": {
        "enum": [
          "",
          "ACTIVE",
          "DEACTIVATED",
          "INACTIVE",
          "SUSPENDED"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "TokenType": {
        "enum": [
          "",
          "CARD_ON_FILE",
          "ECOMMERCE",
          "HCE",
          "QRC",
          "SECURE_ELEMENT"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "TokensByCardIDResponse": {
        "properties": {
          "tokens": {
            "description": "List of tokens",
            "items": {
              "$ref": "#/definitions/Token"
            },
            "type": "array",
            "x-go-name": "Tokens"
          },
          "total_records_number": {
            "description": "Total number of found tokens satisfying given criteria",
            "format": "int64",
            "type": "integer",
            "x-go-name": "TotalRecordsNumber"
          }
        },
        "title": "TokensByCardIDResponse returns card related tokens.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Transaction": {
        "properties": {
          "id": {
            "description": "Transaction ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "card_id": {
            "description": "Card ID to which this transaction belongs to",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "purchase_date": {
            "description": "Date-time of the transaction",
            "format": "date-time",
            "type": "string",
            "x-go-name": "PurchaseDate"
          },
          "group": {
            "$ref": "#/definitions/TransactionGroup"
          },
          "transaction_amount": {
            "description": "Transaction amount",
            "format": "double",
            "type": "number",
            "x-go-name": "TransactionAmount"
          },
          "transaction_currency_code": {
            "description": "Transaction currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "TransactionCurrencyCode"
          },
          "account_amount": {
            "description": "Account amount",
            "format": "double",
            "type": "number",
            "x-go-name": "AccountAmount"
          },
          "account_currency_code": {
            "description": "Account currency code in ISO 4217 standard",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "AccountCurrencyCode"
          },
          "merchant_category_code": {
            "description": "Merchant category code",
            "type": "string",
            "x-go-name": "MerchantCategoryCode"
          },
          "merchant_id": {
            "description": "Merchant ID",
            "type": "string",
            "x-go-name": "MerchantID"
          },
          "terminal_id": {
            "description": "Terminal ID",
            "type": "string",
            "x-go-name": "TerminalID"
          },
          "merchant_name": {
            "description": "Merchant name",
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "merchant_postal_code": {
            "description": "Merchant postal code",
            "type": "string",
            "x-go-name": "MerchantPostalCode"
          },
          "merchant_city": {
            "description": "Merchant city",
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_country_code": {
            "description": "Merchant country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "acquirer_reference_number": {
            "description": "Acquirer transaction reference number",
            "type": "string",
            "x-go-name": "AcquirerReferenceNumber"
          },
          "acquirer_business_id": {
            "description": "Acquirer business ID",
            "type": "string",
            "x-go-name": "AcquirerBusinessID"
          },
          "transaction_code": {
            "description": "Transaction code",
            "type": "string",
            "x-go-name": "TransactionCode"
          },
          "transaction_identifier": {
            "description": "Transaction identifier",
            "type": "string",
            "x-go-name": "TransactionIdentifier"
          },
          "authorization_id": {
            "description": "Authorization ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AuthorizationID"
          },
          "marked_for_dispute_at": {
            "description": "Date-time the transaction was marked for dispute",
            "format": "date-time",
            "type": "string",
            "x-go-name": "MarkedForDisputeAt"
          },
          "marked_for_dispute_by": {
            "description": "Marked for dispute by",
            "type": "string",
            "x-go-name": "MarkedForDisputeBy"
          },
          "created_at": {
            "description": "Date-time when transaction appeared in the system",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "processed_at": {
            "description": "Date-time when transaction has been processed",
            "format": "date-time",
            "type": "string",
            "x-go-name": "ProcessedAt"
          },
          "is_failed": {
            "description": "Is failed",
            "type": "boolean",
            "x-go-name": "IsFailed"
          },
          "central_processing_date": {
            "description": "Date-time when transaction has been processed in the payment system",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CentralProcessingDate"
          },
          "exchange_rate": {
            "description": "Exchange rate of transaction",
            "format": "double",
            "type": "number",
            "x-go-name": "ExchangeRate"
          },
          "authorization_code": {
            "description": "Authorization code",
            "type": "string",
            "x-go-name": "AuthorizationCode"
          },
          "has_payment_document_files": {
            "description": "Shows whether this transaction has payment document files attached to it",
            "type": "boolean",
            "x-go-name": "HasPaymentDocumentFiles"
          },
          "has_payment_notes": {
            "description": "Shows whether this record has payment notes",
            "type": "boolean",
            "x-go-name": "HasPaymentNotes"
          },
          "total_amount": {
            "description": "Total amount",
            "format": "double",
            "type": "number",
            "x-go-name": "TotalAmount"
          }
        },
        "title": "Transaction represents a card transaction.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "TransactionClearing": {
        "properties": {
          "data": {
            "$ref": "#/definitions/EventTransaction"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "notification"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "transaction"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "TransactionCode": {
        "format": "int64",
        "type": "integer",
        "x-go-package": "github.com/wallester/common/model"
      },
      "TransactionGroup": {
        "enum": [
          "Deposit",
          "InternetPurchase",
          "Other",
          "Purchase",
          "Refund",
          "Withdraw"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "TransactionWithEnrichedMerchant": {
        "allOf": [
          {
            "$ref": "#/definitions/Transaction"
          },
          {
            "properties": {
              "enriched_merchant_data": {
                "$ref": "#/definitions/EnrichedMerchantData"
              }
            },
            "type": "object"
          }
        ],
        "title": "TransactionWithEnrichedMerchant represents a card transaction.",
        "x-go-package": "github.com/wallester/api/model"
      },
      "TransactionsSummaryResponse": {
        "properties": {
          "account_amount": {
            "description": "Total amount of transactions",
            "format": "double",
            "type": "number",
            "x-go-name": "Amount"
          },
          "count": {
            "description": "Total number of transactions",
            "format": "int64",
            "type": "integer",
            "x-go-name": "Count"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UnblockCardResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "UnblockCardResponse is the response to the request to unblock a card.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UnblockCardsBatchRequest": {
        "properties": {
          "card_ids": {
            "description": "Card IDs",
            "items": {
              "format": "uuid4",
              "type": "string"
            },
            "type": "array",
            "x-go-name": "CardIDs"
          }
        },
        "required": [
          "card_ids"
        ],
        "title": "UnblockCardsBatchRequest is a request to unblock a batch of credit cards.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UnblockCardsBatchResponse": {
        "properties": {
          "cards": {
            "items": {
              "$ref": "#/definitions/Card"
            },
            "type": "array",
            "x-go-name": "Cards"
          }
        },
        "title": "UnblockCardsBatchResponse is the response to the request to unblock a batch of credit cards.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UnenrolCardFrom3DSecureResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "UnenrolCardFrom3DSecureResponse is the response to the request to unenrol card from 3D secure.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UnprocessableEntity": {
        "description": "UnprocessableEntity maps to HTTP status unprocessable entity\nUsed to report business errors.",
        "properties": {
          "error_code": {
            "description": "Error code associated with error occurred during this request.",
            "format": "int64",
            "type": "integer",
            "x-go-name": "Code"
          },
          "error_text": {
            "description": "Human-readable error that occurred during this request.",
            "type": "string",
            "x-go-name": "Text"
          },
          "message": {
            "description": "Message represents base error with generic message and status.",
            "type": "string",
            "x-go-name": "GenericMessage"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/common/http"
      },
      "UnsupportedMediaType": {
        "properties": {
          "message": {
            "description": "Message represents base error with generic message and status.",
            "type": "string",
            "x-go-name": "GenericMessage"
          }
        },
        "title": "UnsupportedMediaType maps to HTTP status 415.",
        "type": "object",
        "x-go-package": "github.com/wallester/common/http"
      },
      "Update3DSecureSettingsRequest": {
        "properties": {
          "type": {
            "$ref": "#/definitions/APICard3DSecureType"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "type": "string",
            "x-go-name": "Mobile"
          },
          "language_code": {
            "$ref": "#/definitions/ACSLanguageCode"
          },
          "password": {
            "description": "Password. Allowed to use characters: A-Z a-z 0-9 ! \" # ; : ? * \u0026 ( ) + = / \\ , . [ ] { }.\nMasked value returned if password is set.",
            "maxLength": 36,
            "minLength": 8,
            "type": "string",
            "x-go-name": "Password"
          },
          "email": {
            "description": "Email",
            "format": "email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "out_of_band_enabled": {
            "description": "Out of Band enabled",
            "type": "boolean",
            "x-go-name": "OutOfBandEnabled"
          },
          "out_of_band_id": {
            "description": "Out of Band ID. Which basically is ID of User.",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "OutOfBandID"
          }
        },
        "title": "Update3DSecureSettingsRequest is a request to update card 3D secure settings.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "Update3DSecureSettingsResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "Update3DSecureSettingsResponse returns card information after updating 3D secure settings.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateAccountAdjustmentExternalIDRequest": {
        "properties": {
          "external_id": {
            "description": "External ID",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "ExternalID"
          }
        },
        "title": "UpdateAccountAdjustmentExternalIDRequest represents update account adjustment external ID request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateAccountAdjustmentExternalIDResponse": {
        "properties": {
          "account_adjustment": {
            "$ref": "#/definitions/AccountAdjustment"
          }
        },
        "title": "UpdateAccountAdjustmentExternalIDResponse represents update account adjustment external ID response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateAccountExternalIDRequest": {
        "properties": {
          "external_id": {
            "description": "External ID",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "ExternalID"
          }
        },
        "title": "UpdateAccountExternalIDRequest represents update account external ID request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateAccountExternalIDResponse": {
        "properties": {
          "account": {
            "$ref": "#/definitions/Account"
          }
        },
        "title": "UpdateAccountExternalIDResponse represents update account external ID response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateAccountLimitsRequest": {
        "properties": {
          "limits": {
            "$ref": "#/definitions/AccountLimits"
          }
        },
        "required": [
          "limits"
        ],
        "title": "UpdateAccountLimitsRequest represents update account limits request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateAccountLimitsResponse": {
        "properties": {
          "account": {
            "$ref": "#/definitions/Account"
          }
        },
        "title": "UpdateAccountLimitsResponse represents update account limits response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateAccountNameRequest": {
        "properties": {
          "name": {
            "description": "Account name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "title": "UpdateAccountNameRequest represents update account name request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateAccountNameResponse": {
        "properties": {
          "account": {
            "$ref": "#/definitions/Account"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateAccountTopUpDetailsRequest": {
        "properties": {
          "top_up_details": {
            "$ref": "#/definitions/AccountTopUpDetails"
          }
        },
        "required": [
          "top_up_details"
        ],
        "title": "UpdateAccountTopUpDetailsRequest represents update account top up details request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateAccountTopUpDetailsResponse": {
        "properties": {
          "account": {
            "$ref": "#/definitions/Account"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateAddress": {
        "description": "Address",
        "properties": {
          "country_code": {
            "description": "Country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "CountryCode"
          },
          "address1": {
            "description": "Address",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address1"
          },
          "address2": {
            "description": "Address 2",
            "maxLength": 45,
            "type": "string",
            "x-go-name": "Address2"
          },
          "city": {
            "description": "City",
            "maxLength": 35,
            "type": "string",
            "x-go-name": "City"
          },
          "postal_code": {
            "description": "Postal code",
            "maxLength": 10,
            "type": "string",
            "x-go-name": "PostalCode"
          }
        },
        "required": [
          "country_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardDeliveryAddressRequest": {
        "properties": {
          "delivery_address": {
            "$ref": "#/definitions/DeliveryAddressForUpdate"
          }
        },
        "title": "UpdateCardDeliveryAddressRequest is a request to update card delivery address.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardDeliveryAddressResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardExternalIDRequest": {
        "properties": {
          "external_id": {
            "description": "External ID",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "ExternalID"
          }
        },
        "title": "UpdateCardExternalIDRequest represents update card external ID request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardExternalIDResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "UpdateCardExternalIDResponse represents update card external ID response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardFeeWaiver": {
        "properties": {
          "card_id": {
            "description": "Card ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "limit_amount": {
            "description": "Limit amount, required when quantity limit is not set",
            "format": "double",
            "maximum": 9999999999.99,
            "minimum": 1,
            "type": "number",
            "x-go-name": "LimitAmount"
          },
          "limit_quantity": {
            "description": "Limit quantity, required when amount limit is not set",
            "format": "int64",
            "maximum": 9999999999,
            "minimum": 1,
            "type": "integer",
            "x-go-name": "LimitQuantity"
          },
          "fee_waiver_authorization_type": {
            "$ref": "#/definitions/FeeWaiverAuthorizationType"
          }
        },
        "required": [
          "card_id",
          "fee_waiver_authorization_type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardFeeWaiversRequest": {
        "properties": {
          "card_fee_waivers": {
            "items": {
              "$ref": "#/definitions/UpdateCardFeeWaiver"
            },
            "type": "array",
            "x-go-name": "CardFeeWaivers"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardFeeWaiversResponse": {
        "properties": {
          "card_fee_waivers": {
            "items": {
              "$ref": "#/definitions/CardFeeWaiver"
            },
            "type": "array",
            "x-go-name": "CardFeeWaivers"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardFeesBatchRequest": {
        "properties": {
          "card_fees_batch": {
            "description": "Card fees",
            "items": {
              "$ref": "#/definitions/CardFeesBatch"
            },
            "type": "array",
            "x-go-name": "CardFeesBatch"
          }
        },
        "required": [
          "card_fees_batch"
        ],
        "title": "UpdateCardFeesBatchRequest represents update card fees batch request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardFeesBatchResponse": {
        "properties": {
          "card_fees_batch": {
            "items": {
              "$ref": "#/definitions/CardFeesBatch"
            },
            "type": "array",
            "x-go-name": "CardFeesBatch"
          }
        },
        "title": "UpdateCardFeesBatchResponse represents update card fees batch response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardFeesRequest": {
        "properties": {
          "card_fees": {
            "description": "Card fees",
            "items": {
              "$ref": "#/definitions/RequestCardFee"
            },
            "type": "array",
            "x-go-name": "CardFees"
          }
        },
        "required": [
          "card_fees"
        ],
        "title": "UpdateCardFeesRequest represents update card fees request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardFeesResponse": {
        "properties": {
          "card_fees": {
            "description": "List of card fees",
            "items": {
              "$ref": "#/definitions/RequestCardFee"
            },
            "type": "array",
            "x-go-name": "CardFees"
          }
        },
        "title": "UpdateCardFeesResponse represents update card fees response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardLimitsRequest": {
        "properties": {
          "limits": {
            "$ref": "#/definitions/CardLimits"
          }
        },
        "required": [
          "limits"
        ],
        "title": "UpdateCardLimitsRequest represents update card limits request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardLimitsResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "UpdateCardLimitsResponse represents update card limits response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardNameRequest": {
        "properties": {
          "name": {
            "description": "Card name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardNameResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardNotificationSettingsRequest": {
        "properties": {
          "receipts_reminder_enabled": {
            "description": "Receipts reminder enabled\n(required without instant_spend_update_enabled)",
            "type": "boolean",
            "x-go-name": "ReceiptsReminderEnabled"
          },
          "instant_spend_update_enabled": {
            "description": "Instant spend update enabled\n(required without receipts_reminder_enabled)",
            "type": "boolean",
            "x-go-name": "InstantSpendUpdateEnabled"
          }
        },
        "title": "UpdateCardNotificationSettingsRequest is the request to update card notification settings.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardNotificationSettingsResponse": {
        "properties": {
          "card_notification_settings": {
            "$ref": "#/definitions/CardNotificationSettings"
          }
        },
        "title": "UpdateCardNotificationSettingsResponse is response to a request to update card notification settings.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardRenewAutomaticallyRequest": {
        "properties": {
          "renew_automatically": {
            "description": "Renew automatically.",
            "type": "boolean",
            "x-go-name": "RenewAutomatically"
          }
        },
        "required": [
          "renew_automatically"
        ],
        "title": "UpdateCardRenewAutomaticallyRequest represents update card renew automatically request.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardRenewAutomaticallyResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "UpdateCardRenewAutomaticallyResponse represents update card renew automatically response.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardSecurityRequest": {
        "properties": {
          "contactless_enabled": {
            "description": "Contactless enabled",
            "type": "boolean",
            "x-go-name": "ContactlessEnabled"
          },
          "withdrawal_enabled": {
            "description": "Withdrawal enabled",
            "type": "boolean",
            "x-go-name": "WithdrawalEnabled"
          },
          "internet_purchase_enabled": {
            "description": "Internet purchase enabled",
            "type": "boolean",
            "x-go-name": "InternetPurchaseEnabled"
          },
          "overall_limits_enabled": {
            "description": "Overall limits enabled. Cannot be enabled together with all time limits.",
            "type": "boolean",
            "x-go-name": "OverallLimitsEnabled"
          },
          "all_time_limits_enabled": {
            "description": "All time limits enabled. Cannot be enabled together with overall limits.",
            "type": "boolean",
            "x-go-name": "AllTimeLimitsEnabled"
          }
        },
        "title": "UpdateCardSecurityRequest is a request to update card security.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardSecurityResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "UpdateCardSecurityResponse returns card information after updating card security.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardStatusRequest": {
        "properties": {
          "status": {
            "enum": [
              "Created",
              "Ordered",
              "Personalized",
              "Dispatched",
              "Active",
              "Blocked",
              "Closing",
              "Closed",
              "Expired",
              "AwaitingRenewal"
            ],
            "type": "string",
            "x-go-name": "CardStatus"
          },
          "block_type": {
            "enum": [
              "BlockedByCardholder",
              "BlockedByCardholderViaPhone",
              "BlockedByCardUser",
              "BlockedByClient",
              "BlockedByIssuer",
              "Counterfeit",
              "Fraudulent",
              "Lost",
              "Stolen"
            ],
            "type": "string",
            "x-go-name": "BlockType"
          }
        },
        "title": "UpdateCardStatusRequest is a request to update card status.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardStatusResponse": {
        "properties": {
          "card": {
            "$ref": "#/definitions/Card"
          }
        },
        "title": "UpdateCardStatusResponse is the response to the request to update card status.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCardholder3DSSettingsRequest": {
        "properties": {
          "email": {
            "description": "Email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "type": "string",
            "x-go-name": "Mobile"
          },
          "password": {
            "description": "Password. Allowed to use characters: A-Z a-z 0-9 ! \" # ; : ? * \u0026 ( ) + = / \\ , . [ ] { }.",
            "maxLength": 36,
            "minLength": 8,
            "type": "string",
            "x-go-name": "Password"
          },
          "force_usage": {
            "description": "ForceUsage is using to force cardholder settings for 3DS step-up methods",
            "type": "boolean",
            "x-go-name": "ForceUsage"
          },
          "card_default_settings": {
            "description": "CardDefaultSettings is using to ensure that new cards are created with cardholder 3DS settings",
            "type": "boolean",
            "x-go-name": "CardDefaultSettings"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCompanyFCMTokenPushNotificationsEnabledResponse": {
        "properties": {
          "company_fcm_token": {
            "$ref": "#/definitions/CompanyFCMToken"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCompanyLimitsRequest": {
        "properties": {
          "limits": {
            "$ref": "#/definitions/CompanyLimits"
          }
        },
        "required": [
          "limits"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCompanyLimitsResponse": {
        "properties": {
          "company": {
            "$ref": "#/definitions/Company"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCompanyPushNotificationsEnabledRequest": {
        "properties": {
          "push_notifications_enabled": {
            "description": "Are push notifications enabled for company",
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          }
        },
        "required": [
          "push_notifications_enabled"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCompanyPushNotificationsEnabledResponse": {
        "properties": {
          "company": {
            "$ref": "#/definitions/Company"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCompanyRequest": {
        "properties": {
          "name": {
            "description": "Company name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Name"
          },
          "registration_number": {
            "description": "Registration number",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "RegistrationNumber"
          },
          "registration_address": {
            "$ref": "#/definitions/UpdateAddress"
          },
          "headquarter_address": {
            "$ref": "#/definitions/UpdateAddress"
          },
          "risk_profile": {
            "$ref": "#/definitions/APIRiskProfile"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Mobile"
          },
          "email": {
            "description": "Email",
            "format": "email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "industry_type": {
            "$ref": "#/definitions/ActivityType"
          },
          "date_of_incorporation": {
            "description": "Date Of Incorporation",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DateOfIncorporation"
          },
          "is_sanctions_related": {
            "description": "Is Sanctions Related",
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "is_adverse_media_involved": {
            "description": "Is Adverse Media Involved",
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "push_notifications_enabled": {
            "description": "Is push notifications enabled",
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          },
          "preferred_language_code": {
            "description": "Preferred language code",
            "enum": [
              "ABK",
              "AAR",
              "AFR",
              "AKA",
              "SQI",
              "AMH",
              "ARA",
              "ARG",
              "HYE",
              "ASM",
              "AVA",
              "AVE",
              "AYM",
              "AZE",
              "BAM",
              "BAL",
              "BAK",
              "EUS",
              "BEL",
              "BEN",
              "BIH",
              "BIS",
              "BOS",
              "BRE",
              "BUL",
              "MYA",
              "CAT",
              "CHA",
              "CHE",
              "NYA",
              "ZHO",
              "CHV",
              "COR",
              "COS",
              "CRE",
              "HRV",
              "CES",
              "DAN",
              "DIV",
              "NLD",
              "DZO",
              "ENG",
              "EPO",
              "EST",
              "EWE",
              "FAO",
              "FIJ",
              "FIN",
              "FRA",
              "FUL",
              "GLG",
              "KAT",
              "DEU",
              "ELL",
              "GRN",
              "GUJ",
              "HAT",
              "HAU",
              "HEB",
              "HER",
              "HIN",
              "HMO",
              "HUN",
              "INA",
              "IND",
              "ILE",
              "GLE",
              "IBO",
              "IPK",
              "IDO",
              "ISL",
              "ITA",
              "IKU",
              "JPN",
              "JAV",
              "KAL",
              "KAN",
              "KAU",
              "KAS",
              "KAZ",
              "KHM",
              "KIK",
              "KIN",
              "KIR",
              "KOM",
              "KON",
              "KOR",
              "KUR",
              "KUA",
              "LAT",
              "LTZ",
              "LUG",
              "LIJ",
              "LIN",
              "LAO",
              "LIT",
              "LUB",
              "LAV",
              "GLV",
              "MKD",
              "MLG",
              "MSA",
              "MAL",
              "MLT",
              "MRI",
              "MAR",
              "MAH",
              "MON",
              "NAU",
              "NAV",
              "NDE",
              "NEP",
              "NDO",
              "NOB",
              "NNO",
              "NOR",
              "III",
              "NBL",
              "OCI",
              "OJI",
              "CHU",
              "ORM",
              "ORI",
              "OSS",
              "PAN",
              "PLI",
              "FAS",
              "POL",
              "PUS",
              "POR",
              "QUE",
              "ROH",
              "RUN",
              "RON",
              "RUS",
              "SAN",
              "SRD",
              "SND",
              "SME",
              "SMO",
              "SAG",
              "SRP",
              "GLA",
              "SNA",
              "SIN",
              "SLK",
              "SLV",
              "SOM",
              "SOT",
              "SPA",
              "SUN",
              "SWA",
              "SSW",
              "SWE",
              "TAM",
              "TEL",
              "TGK",
              "THA",
              "TIR",
              "BOD",
              "TUK",
              "TGL",
              "TSN",
              "TON",
              "TUR",
              "TSO",
              "TAT",
              "TWI",
              "TAH",
              "UIG",
              "UKR",
              "URD",
              "UZB",
              "VEN",
              "VIE",
              "VOL",
              "WLN",
              "CYM",
              "WOL",
              "FRY",
              "XHO",
              "YID",
              "YOR",
              "ZHA",
              "ZUL"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "PreferredLanguageCode"
          },
          "vat_number": {
            "description": "VAT Number",
            "maxLength": 30,
            "type": "string",
            "x-go-name": "VATNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCompanyResponse": {
        "properties": {
          "company": {
            "$ref": "#/definitions/Company"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCompanySwaggerModel": {
        "properties": {
          "name": {
            "description": "Company name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Name"
          },
          "registration_number": {
            "description": "Registration number",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "RegistrationNumber"
          },
          "registration_address": {
            "$ref": "#/definitions/UpdateAddress"
          },
          "headquarter_address": {
            "$ref": "#/definitions/UpdateAddress"
          },
          "risk_profile": {
            "description": "Company risk profile.",
            "enum": [
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "x-go-name": "RiskProfile"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Mobile"
          },
          "email": {
            "description": "Email",
            "format": "email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "industry_type": {
            "$ref": "#/definitions/ActivityType"
          },
          "date_of_incorporation": {
            "description": "Date Of Incorporation",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DateOfIncorporation"
          },
          "is_sanctions_related": {
            "description": "Is Sanctions Related",
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "is_adverse_media_involved": {
            "description": "Is Adverse Media Involved",
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "push_notifications_enabled": {
            "description": "Is push notifications enabled",
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          },
          "preferred_language_code": {
            "description": "Preferred language code",
            "enum": [
              "ABK",
              "AAR",
              "AFR",
              "AKA",
              "SQI",
              "AMH",
              "ARA",
              "ARG",
              "HYE",
              "ASM",
              "AVA",
              "AVE",
              "AYM",
              "AZE",
              "BAM",
              "BAL",
              "BAK",
              "EUS",
              "BEL",
              "BEN",
              "BIH",
              "BIS",
              "BOS",
              "BRE",
              "BUL",
              "MYA",
              "CAT",
              "CHA",
              "CHE",
              "NYA",
              "ZHO",
              "CHV",
              "COR",
              "COS",
              "CRE",
              "HRV",
              "CES",
              "DAN",
              "DIV",
              "NLD",
              "DZO",
              "ENG",
              "EPO",
              "EST",
              "EWE",
              "FAO",
              "FIJ",
              "FIN",
              "FRA",
              "FUL",
              "GLG",
              "KAT",
              "DEU",
              "ELL",
              "GRN",
              "GUJ",
              "HAT",
              "HAU",
              "HEB",
              "HER",
              "HIN",
              "HMO",
              "HUN",
              "INA",
              "IND",
              "ILE",
              "GLE",
              "IBO",
              "IPK",
              "IDO",
              "ISL",
              "ITA",
              "IKU",
              "JPN",
              "JAV",
              "KAL",
              "KAN",
              "KAU",
              "KAS",
              "KAZ",
              "KHM",
              "KIK",
              "KIN",
              "KIR",
              "KOM",
              "KON",
              "KOR",
              "KUR",
              "KUA",
              "LAT",
              "LTZ",
              "LUG",
              "LIJ",
              "LIN",
              "LAO",
              "LIT",
              "LUB",
              "LAV",
              "GLV",
              "MKD",
              "MLG",
              "MSA",
              "MAL",
              "MLT",
              "MRI",
              "MAR",
              "MAH",
              "MON",
              "NAU",
              "NAV",
              "NDE",
              "NEP",
              "NDO",
              "NOB",
              "NNO",
              "NOR",
              "III",
              "NBL",
              "OCI",
              "OJI",
              "CHU",
              "ORM",
              "ORI",
              "OSS",
              "PAN",
              "PLI",
              "FAS",
              "POL",
              "PUS",
              "POR",
              "QUE",
              "ROH",
              "RUN",
              "RON",
              "RUS",
              "SAN",
              "SRD",
              "SND",
              "SME",
              "SMO",
              "SAG",
              "SRP",
              "GLA",
              "SNA",
              "SIN",
              "SLK",
              "SLV",
              "SOM",
              "SOT",
              "SPA",
              "SUN",
              "SWA",
              "SSW",
              "SWE",
              "TAM",
              "TEL",
              "TGK",
              "THA",
              "TIR",
              "BOD",
              "TUK",
              "TGL",
              "TSN",
              "TON",
              "TUR",
              "TSO",
              "TAT",
              "TWI",
              "TAH",
              "UIG",
              "UKR",
              "URD",
              "UZB",
              "VEN",
              "VIE",
              "VOL",
              "WLN",
              "CYM",
              "WOL",
              "FRY",
              "XHO",
              "YID",
              "YOR",
              "ZHA",
              "ZUL"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "PreferredLanguageCode"
          },
          "vat_number": {
            "description": "VAT Number",
            "maxLength": 30,
            "type": "string",
            "x-go-name": "VATNumber"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCreditLimitRequest": {
        "properties": {
          "credit_limit": {
            "description": "Credit limit",
            "format": "double",
            "minimum": 0,
            "type": "number",
            "x-go-name": "CreditLimit"
          },
          "description": {
            "description": "Description, change reason, etc.",
            "maxLength": 256,
            "type": "string",
            "x-go-name": "Description"
          }
        },
        "required": [
          "description"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateCreditLimitResponse": {
        "properties": {
          "account": {
            "$ref": "#/definitions/Account"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateFCMTokenPushNotificationsEnabledResponse": {
        "properties": {
          "fcm_token": {
            "$ref": "#/definitions/FCMToken"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateFee": {
        "properties": {
          "data": {
            "$ref": "#/definitions/UpdateFeeView"
          },
          "event": {
            "description": "Event identifier",
            "enum": [
              "update"
            ],
            "type": "string",
            "x-go-name": "Event"
          },
          "type": {
            "description": "Event type",
            "enum": [
              "fee"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "required": [
          "data",
          "event",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "UpdateFeeView": {
        "properties": {
          "account_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AccountID"
          },
          "amount": {
            "format": "double",
            "maximum": 0,
            "type": "number",
            "x-go-name": "Amount"
          },
          "authorization_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "AuthorizationID"
          },
          "canceled_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CanceledAt"
          },
          "canceled_reason": {
            "type": "string",
            "x-go-name": "CanceledReason"
          },
          "card_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CardID"
          },
          "company_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "CompanyID"
          },
          "completed_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CompletedAt"
          },
          "created_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "currency_code": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRU",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STN",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "UYI",
              "UYU",
              "UYW",
              "UZS",
              "VES",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XCD",
              "XOF",
              "XPF",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "x-go-name": "CurrencyCode"
          },
          "id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "person_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PersonID"
          },
          "status": {
            "$ref": "#/definitions/FeeStatus"
          },
          "transaction_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "TransactionID"
          },
          "type": {
            "$ref": "#/definitions/FeeType"
          },
          "updated_at": {
            "example": "1625932529",
            "type": "string",
            "x-go-name": "UpdatedAt"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "amount",
          "currency_code",
          "account_id",
          "created_at"
        ],
        "type": "object",
        "x-go-name": "UpdatFeeView",
        "x-go-package": "github.com/wallester/api/model/webhooks"
      },
      "UpdateFraudCaseRequest": {
        "properties": {
          "case_status": {
            "$ref": "#/definitions/FraudCaseStatus"
          },
          "source": {
            "$ref": "#/definitions/FraudSource"
          },
          "type": {
            "$ref": "#/definitions/FraudType"
          },
          "liability": {
            "$ref": "#/definitions/FraudLiability"
          },
          "description": {
            "description": "Fraud case description",
            "maxLength": 5000,
            "type": "string",
            "x-go-name": "Description"
          }
        },
        "required": [
          "case_status"
        ],
        "title": "UpdateFraudCaseRequest is a request to update existing fraud case information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdatePaymentMetadataRequest": {
        "properties": {
          "value": {
            "description": "Value",
            "maxLength": 300,
            "type": "string",
            "x-go-name": "Value"
          }
        },
        "required": [
          "value"
        ],
        "title": "UpdatePaymentMetadataRequest is a request to update payment metadata.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdatePaymentMetadataResponse": {
        "properties": {
          "payment": {
            "$ref": "#/definitions/UpdatedPayment"
          }
        },
        "title": "UpdatePaymentMetadataResponse is the response to the request to update existing payment metadata.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdatePersonAdditionalInfoRequest": {
        "properties": {
          "key": {
            "description": "Key",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "Key"
          },
          "value": {
            "description": "Value",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "Value"
          }
        },
        "title": "UpdatePersonAdditionalInfoRequest is a request to update existing person additional info.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdatePersonAdditionalInfoResponse": {
        "properties": {
          "person_additional_info": {
            "$ref": "#/definitions/PersonAdditionalInfo"
          }
        },
        "title": "UpdatePersonAdditionalInfoResponse is the response to the request to update existing person additional info.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdatePersonPatchRequest": {
        "properties": {
          "personal_number": {
            "description": "Personal number must be unique for every person on product.",
            "maxLength": 20,
            "type": "string",
            "x-go-name": "PersonalNumber"
          },
          "personal_number_issuer": {
            "description": "Personal number issuer country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "PersonalNumberIssuer"
          },
          "title": {
            "description": "Title",
            "enum": [
              "Mr.",
              "Ms.",
              "Mrs.",
              "Miss"
            ],
            "type": "string",
            "x-go-name": "Title"
          },
          "first_name": {
            "description": "First name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "middle_name": {
            "description": "Middle name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "MiddleName"
          },
          "last_name": {
            "description": "Last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "x-go-name": "LastName"
          },
          "birth_date": {
            "description": "Birthdate. Must be in 2006-01-02 format. At least 18 years old.",
            "format": "date",
            "type": "string",
            "x-go-name": "BirthDate"
          },
          "birth_country_code": {
            "description": "Birth country code in ISO 3166-1 Alpha-3 code standard.",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "BirthCountryCode"
          },
          "gender": {
            "description": "Gender",
            "enum": [
              "MALE",
              "FEMALE"
            ],
            "maxLength": 6,
            "type": "string",
            "x-go-name": "Gender"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Mobile"
          },
          "email": {
            "description": "E-mail address",
            "format": "email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "external_id": {
            "description": "External ID must be unique for every person on product.",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "residence_country_code": {
            "description": "Residence country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "ResidenceCountryCode"
          },
          "is_represented_by_someone_else": {
            "description": "Whether the person is representative or not",
            "type": "boolean",
            "x-go-name": "IsRepresentedBySomeoneElse"
          },
          "is_beneficial_owner": {
            "description": "Whether the person is beneficial owner or not",
            "type": "boolean",
            "x-go-name": "IsBeneficialOwner"
          },
          "is_politically_exposed_person": {
            "description": "Whether the person is politically exposed or not",
            "type": "boolean",
            "x-go-name": "IsPoliticallyExposedPerson"
          },
          "politically_exposed_person_explanation": {
            "description": "Explanation of politically exposed person",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "PoliticallyExposedPersonExplanation"
          },
          "risk_profile": {
            "$ref": "#/definitions/APIRiskProfile"
          },
          "loyalty_number": {
            "description": "Loyalty number",
            "maxLength": 20,
            "minLength": 20,
            "type": "string",
            "x-go-name": "LoyaltyNumber"
          },
          "document_number": {
            "description": "Document number",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "DocumentNumber"
          },
          "address": {
            "$ref": "#/definitions/PersonAddress"
          },
          "is_sanctions_related": {
            "description": "Is Sanctions Related",
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "is_adverse_media_involved": {
            "description": "Is Adverse Media Involved",
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "push_notifications_enabled": {
            "description": "Is push notifications enabled",
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          },
          "preferred_language_code": {
            "description": "Preferred language code",
            "enum": [
              "ABK",
              "AAR",
              "AFR",
              "AKA",
              "SQI",
              "AMH",
              "ARA",
              "ARG",
              "HYE",
              "ASM",
              "AVA",
              "AVE",
              "AYM",
              "AZE",
              "BAM",
              "BAL",
              "BAK",
              "EUS",
              "BEL",
              "BEN",
              "BIH",
              "BIS",
              "BOS",
              "BRE",
              "BUL",
              "MYA",
              "CAT",
              "CHA",
              "CHE",
              "NYA",
              "ZHO",
              "CHV",
              "COR",
              "COS",
              "CRE",
              "HRV",
              "CES",
              "DAN",
              "DIV",
              "NLD",
              "DZO",
              "ENG",
              "EPO",
              "EST",
              "EWE",
              "FAO",
              "FIJ",
              "FIN",
              "FRA",
              "FUL",
              "GLG",
              "KAT",
              "DEU",
              "ELL",
              "GRN",
              "GUJ",
              "HAT",
              "HAU",
              "HEB",
              "HER",
              "HIN",
              "HMO",
              "HUN",
              "INA",
              "IND",
              "ILE",
              "GLE",
              "IBO",
              "IPK",
              "IDO",
              "ISL",
              "ITA",
              "IKU",
              "JPN",
              "JAV",
              "KAL",
              "KAN",
              "KAU",
              "KAS",
              "KAZ",
              "KHM",
              "KIK",
              "KIN",
              "KIR",
              "KOM",
              "KON",
              "KOR",
              "KUR",
              "KUA",
              "LAT",
              "LTZ",
              "LUG",
              "LIJ",
              "LIN",
              "LAO",
              "LIT",
              "LUB",
              "LAV",
              "GLV",
              "MKD",
              "MLG",
              "MSA",
              "MAL",
              "MLT",
              "MRI",
              "MAR",
              "MAH",
              "MON",
              "NAU",
              "NAV",
              "NDE",
              "NEP",
              "NDO",
              "NOB",
              "NNO",
              "NOR",
              "III",
              "NBL",
              "OCI",
              "OJI",
              "CHU",
              "ORM",
              "ORI",
              "OSS",
              "PAN",
              "PLI",
              "FAS",
              "POL",
              "PUS",
              "POR",
              "QUE",
              "ROH",
              "RUN",
              "RON",
              "RUS",
              "SAN",
              "SRD",
              "SND",
              "SME",
              "SMO",
              "SAG",
              "SRP",
              "GLA",
              "SNA",
              "SIN",
              "SLK",
              "SLV",
              "SOM",
              "SOT",
              "SPA",
              "SUN",
              "SWA",
              "SSW",
              "SWE",
              "TAM",
              "TEL",
              "TGK",
              "THA",
              "TIR",
              "BOD",
              "TUK",
              "TGL",
              "TSN",
              "TON",
              "TUR",
              "TSO",
              "TAT",
              "TWI",
              "TAH",
              "UIG",
              "UKR",
              "URD",
              "UZB",
              "VEN",
              "VIE",
              "VOL",
              "WLN",
              "CYM",
              "WOL",
              "FRY",
              "XHO",
              "YID",
              "YOR",
              "ZHA",
              "ZUL"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "PreferredLanguageCode"
          },
          "expected_turnover": {
            "description": "ExpectedTurnover",
            "enum": [
              "From0to1500",
              "From1501to3000",
              "From3001to5000",
              "From5001to15000",
              "From15001AndMore"
            ],
            "type": "string",
            "x-go-name": "ExpectedTurnover"
          }
        },
        "title": "UpdatePersonPatchRequest is a request to partially update existing person information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdatePersonPatchSwaggerModel": {
        "properties": {
          "personal_number": {
            "description": "Personal number must be unique for every person on product.",
            "maxLength": 20,
            "type": "string",
            "x-go-name": "PersonalNumber"
          },
          "personal_number_issuer": {
            "description": "Personal number issuer country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "PersonalNumberIssuer"
          },
          "title": {
            "description": "Title",
            "enum": [
              "Mr.",
              "Ms.",
              "Mrs.",
              "Miss"
            ],
            "type": "string",
            "x-go-name": "Title"
          },
          "first_name": {
            "description": "First name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "middle_name": {
            "description": "Middle name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "MiddleName"
          },
          "last_name": {
            "description": "Last name. Allowed case-insensitive characters: [a-z0-9'-./, \u0026 æ ä å á é í ø ö ó õ š ü ú ž à è ì ò ù â ê î ô û ã ñ ë\nï ÿ ė ç ć ń ś ź ā ē ī ō ū ą ę į ų č ģ ķ ļ ņ ŗ ỳ ǹ ẁ ý ǵ ḱ ĺ ḿ ṕ ŕ ẃ ŷ ĉ ĝ ĥ ĵ ŝ ŵ ẑ ẽ ĩ ũ ỹ ṽ ḧ ẅ ẍ ẗ ẘ ẙ ȳ ḡ ă ĕ ĭ ŏ\nŭ ğ ǫ ǎ ě ǐ ǒ ǔ ď ǧ ȟ ǰ ǩ ľ ň ř ť ȩ ḑ ḩ ş ţ ő ű ů ǖ ǘ ǚ ǜ]",
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "x-go-name": "LastName"
          },
          "birth_date": {
            "description": "Birthdate. Must be in 2006-01-02 format. At least 18 years old.",
            "format": "date",
            "type": "string",
            "x-go-name": "BirthDate"
          },
          "birth_country_code": {
            "description": "Birth country code in ISO 3166-1 Alpha-3 code standard.",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "BirthCountryCode"
          },
          "gender": {
            "description": "Gender",
            "enum": [
              "MALE",
              "FEMALE"
            ],
            "maxLength": 6,
            "type": "string",
            "x-go-name": "Gender"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Mobile"
          },
          "email": {
            "description": "E-mail address",
            "format": "email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "external_id": {
            "description": "External ID must be unique for every person on product.",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "residence_country_code": {
            "description": "Residence country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "ResidenceCountryCode"
          },
          "is_represented_by_someone_else": {
            "description": "Whether the person is representative or not",
            "type": "boolean",
            "x-go-name": "IsRepresentedBySomeoneElse"
          },
          "is_beneficial_owner": {
            "description": "Whether the person is beneficial owner or not",
            "type": "boolean",
            "x-go-name": "IsBeneficialOwner"
          },
          "is_politically_exposed_person": {
            "description": "Whether the person is politically exposed or not",
            "type": "boolean",
            "x-go-name": "IsPoliticallyExposedPerson"
          },
          "politically_exposed_person_explanation": {
            "description": "Explanation of politically exposed person",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "PoliticallyExposedPersonExplanation"
          },
          "risk_profile": {
            "description": "Risk profile.",
            "enum": [
              "Low",
              "Medium",
              "High"
            ],
            "type": "string",
            "x-go-name": "RiskProfile"
          },
          "loyalty_number": {
            "description": "Loyalty number",
            "maxLength": 20,
            "minLength": 20,
            "type": "string",
            "x-go-name": "LoyaltyNumber"
          },
          "document_number": {
            "description": "Document number",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "DocumentNumber"
          },
          "address": {
            "$ref": "#/definitions/PersonAddress"
          },
          "is_sanctions_related": {
            "description": "Is Sanctions Related",
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "is_adverse_media_involved": {
            "description": "Is Adverse Media Involved",
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "push_notifications_enabled": {
            "description": "Is push notifications enabled",
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          },
          "preferred_language_code": {
            "description": "Preferred language code",
            "enum": [
              "ABK",
              "AAR",
              "AFR",
              "AKA",
              "SQI",
              "AMH",
              "ARA",
              "ARG",
              "HYE",
              "ASM",
              "AVA",
              "AVE",
              "AYM",
              "AZE",
              "BAM",
              "BAL",
              "BAK",
              "EUS",
              "BEL",
              "BEN",
              "BIH",
              "BIS",
              "BOS",
              "BRE",
              "BUL",
              "MYA",
              "CAT",
              "CHA",
              "CHE",
              "NYA",
              "ZHO",
              "CHV",
              "COR",
              "COS",
              "CRE",
              "HRV",
              "CES",
              "DAN",
              "DIV",
              "NLD",
              "DZO",
              "ENG",
              "EPO",
              "EST",
              "EWE",
              "FAO",
              "FIJ",
              "FIN",
              "FRA",
              "FUL",
              "GLG",
              "KAT",
              "DEU",
              "ELL",
              "GRN",
              "GUJ",
              "HAT",
              "HAU",
              "HEB",
              "HER",
              "HIN",
              "HMO",
              "HUN",
              "INA",
              "IND",
              "ILE",
              "GLE",
              "IBO",
              "IPK",
              "IDO",
              "ISL",
              "ITA",
              "IKU",
              "JPN",
              "JAV",
              "KAL",
              "KAN",
              "KAU",
              "KAS",
              "KAZ",
              "KHM",
              "KIK",
              "KIN",
              "KIR",
              "KOM",
              "KON",
              "KOR",
              "KUR",
              "KUA",
              "LAT",
              "LTZ",
              "LUG",
              "LIJ",
              "LIN",
              "LAO",
              "LIT",
              "LUB",
              "LAV",
              "GLV",
              "MKD",
              "MLG",
              "MSA",
              "MAL",
              "MLT",
              "MRI",
              "MAR",
              "MAH",
              "MON",
              "NAU",
              "NAV",
              "NDE",
              "NEP",
              "NDO",
              "NOB",
              "NNO",
              "NOR",
              "III",
              "NBL",
              "OCI",
              "OJI",
              "CHU",
              "ORM",
              "ORI",
              "OSS",
              "PAN",
              "PLI",
              "FAS",
              "POL",
              "PUS",
              "POR",
              "QUE",
              "ROH",
              "RUN",
              "RON",
              "RUS",
              "SAN",
              "SRD",
              "SND",
              "SME",
              "SMO",
              "SAG",
              "SRP",
              "GLA",
              "SNA",
              "SIN",
              "SLK",
              "SLV",
              "SOM",
              "SOT",
              "SPA",
              "SUN",
              "SWA",
              "SSW",
              "SWE",
              "TAM",
              "TEL",
              "TGK",
              "THA",
              "TIR",
              "BOD",
              "TUK",
              "TGL",
              "TSN",
              "TON",
              "TUR",
              "TSO",
              "TAT",
              "TWI",
              "TAH",
              "UIG",
              "UKR",
              "URD",
              "UZB",
              "VEN",
              "VIE",
              "VOL",
              "WLN",
              "CYM",
              "WOL",
              "FRY",
              "XHO",
              "YID",
              "YOR",
              "ZHA",
              "ZUL"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "PreferredLanguageCode"
          },
          "expected_turnover": {
            "description": "ExpectedTurnover",
            "enum": [
              "From0to1500",
              "From1501to3000",
              "From3001to5000",
              "From5001to15000",
              "From15001AndMore"
            ],
            "type": "string",
            "x-go-name": "ExpectedTurnover"
          }
        },
        "title": "UpdatePersonPatchSwaggerModel is a model representation of the UpdatePersonPatchRequest for swagger.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdatePersonResponse": {
        "properties": {
          "person": {
            "$ref": "#/definitions/Person"
          }
        },
        "title": "UpdatePersonResponse is the response to the request to update existing person information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdatePushNotificationsEnabledRequest": {
        "properties": {
          "push_notifications_enabled": {
            "description": "Are push notifications enabled for cardholder",
            "type": "boolean",
            "x-go-name": "PushNotificationsEnabled"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdatePushNotificationsEnabledResponse": {
        "properties": {
          "person": {
            "$ref": "#/definitions/Person"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateRepresentativeRequest": {
        "properties": {
          "title": {
            "description": "Representative title",
            "enum": [
              "Mr.",
              "Ms.",
              "Mrs.",
              "Miss"
            ],
            "type": "string",
            "x-go-name": "Title"
          },
          "first_name": {
            "description": "Representative first name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "middle_name": {
            "description": "Representative middle name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "MiddleName"
          },
          "last_name": {
            "description": "Representative last name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "LastName"
          },
          "position": {
            "description": "Representative position",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "Position"
          },
          "is_member_of_the_board": {
            "description": "Is member of the board?",
            "type": "boolean",
            "x-go-name": "IsMemberOfTheBoard"
          },
          "is_representative": {
            "description": "Is representative?",
            "type": "boolean",
            "x-go-name": "IsRepresentative"
          },
          "is_ultimate_beneficial_owner": {
            "description": "Is ultimate beneficial owner?",
            "type": "boolean",
            "x-go-name": "IsUltimateBeneficialOwner"
          },
          "birth_date": {
            "description": "Birthdate. Must be in 2006-01-02 format. Must be at least 16 years old.",
            "format": "date",
            "type": "string",
            "x-go-name": "BirthDate"
          },
          "residence_country_code": {
            "description": "Residence country code in ISO 3166-1 Alpha-3 code standard",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "ResidenceCountryCode"
          },
          "is_sanctions_related": {
            "description": "Is Sanctions Related",
            "type": "boolean",
            "x-go-name": "IsSanctionsRelated"
          },
          "is_politically_exposed": {
            "description": "Is Politically Exposed",
            "type": "boolean",
            "x-go-name": "IsPoliticallyExposed"
          },
          "is_adverse_media_involved": {
            "description": "Is Adverse Media Involved",
            "type": "boolean",
            "x-go-name": "IsAdverseMediaInvolved"
          },
          "is_shareholder": {
            "description": "Is shareholder?",
            "type": "boolean",
            "x-go-name": "IsShareholder"
          },
          "percentage_owned": {
            "description": "Percentage owned. \u003cbr\u003e\n__If representative is shareholder, minimum value is 1.__",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "x-go-name": "PercentageOwned"
          },
          "email": {
            "description": "Email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "mobile": {
            "description": "Mobile phone number. Must be an international standard valid number, only digits with \"+\" prefix allowed.",
            "type": "string",
            "x-go-name": "Mobile"
          }
        },
        "title": "UpdateRepresentativeRequest is a request to update existing representative information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateRepresentativeResponse": {
        "properties": {
          "representative": {
            "$ref": "#/definitions/Representative"
          }
        },
        "title": "UpdateRepresentativeResponse is the response to the request to update existing representative information.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateTemplateRequest": {
        "properties": {
          "message_type": {
            "description": "Template message type",
            "enum": [
              "NotifyCardholderOnChipAndPinCardActivation",
              "NotifyCardholderOnDisabledInternetPurchase",
              "NotifyCardholderOnInsufficientFunds",
              "NotifyCardholderOnStickerActivation",
              "NotifyCardOrder",
              "SendAdjustAccountBalanceToCardholder",
              "SendForgotPasswordLinkToCardholder",
              "SendPINToCardholderForChipAndPin",
              "SendPINToCardholderForSticker",
              "SendTokenAuthenticationOTP",
              "SendLinkToSetPasswordToCardholder",
              "Send3DSPasswordOnInternetPurchasesEnabled",
              "Send3DSOTP",
              "Send3DSPasswordOnCardCreation",
              "Send3DSPasswordOnCardActivation",
              "Send3DSPasswordToCardholder",
              "SendCardBlockNotificationToCardholder",
              "SendTokenCreateNotificationToCardHolder",
              "SendTokenCreateApplePayNotificationToCardHolder",
              "SendVerificationSMSToCardholder",
              "SendVerificationEmailToCardholder",
              "SendApplePayCardRemovedNotification",
              "SendApplePayCardRenewedNotification",
              "SendOTPToCardholderIPhone",
              "SendOTPToCardholderIPad",
              "SendOTPToCardholderAppleWatch",
              "SendOTPToCardholderIMac",
              "SendVerificationEmailToClient",
              "SendInactiveCustomerApplePayNotificationToCardHolder",
              "SendDeclinedAuthorizationNotificationToCardholder",
              "SendFraudDeclinedAuthorizationApplePayNotificationToCardholder",
              "SendPaymentNotificationToCardholder",
              "SendCustomNotificationToCardholder",
              "SendAbandonedProvisioningApplePayNotificationToCardholder",
              "SendPendingProvisioningApplePayNotificationToCardholder",
              "SendLowSettlementRiskLimitNotification",
              "ShareholderBoardMemberKYCVerfication",
              "NotifyClientOnSuccessfulVerification",
              "SendInvitationSMSToEmployee",
              "NotifyClientOnRejection",
              "SendActivationOTPCode",
              "SendInvitationToCardUser",
              "SendRepresentativeVerificationLink",
              "NotifyClientOnRejectionOfVerificationFields",
              "CompanyRequestedAddPersonAsEmployee",
              "CompanyInvitedEmployee",
              "CompanyDeletedEmployee",
              "NotifyClientAboutVibanCreation",
              "ClientFrozen",
              "ClientUnfrozen",
              "TerminateByClient",
              "TerminateByServiceProvider",
              "TerminateByRegulator",
              "RaiseCompanyLimitsRequest",
              "RaiseCompanyLimitsThanks",
              "TopUpNotification",
              "SendMultiCurrencyRequest",
              "PaymentReminderNotification",
              "SendFraudAlert",
              "SendCloseClientCancellation",
              "SendSuccessfulOnboardingNotification",
              "DebtNegativeBalanceNotification",
              "DebtNegativeBalanceNotificationReminder",
              "FeesStatementNotification",
              "SendMobileOTP",
              "SendStatementToUser",
              "Send3DSAttemptNotification",
              "CompleteRegistrationReminder",
              "UploadCorporateDocumentsReminder",
              "IdentityVerificationReminder",
              "SignAgreementReminder",
              "UnableToProcessPaymentNotification",
              "UnableToProcessPaymentRepeatNotification",
              "ReceiptsReminder",
              "SendPurchasePaymentNotificationToCardholder",
              "SendWithdrawalPaymentNotificationToCardholder",
              "SendZeroPaymentNotificationToCardholder",
              "SendReversalPaymentNotificationToCardholder",
              "NotifyAboutCardActivation"
            ],
            "maxLength": 100,
            "type": "string",
            "x-go-name": "MessageType"
          },
          "delivery_type": {
            "$ref": "#/definitions/DeliveryType"
          },
          "language_code": {
            "description": "Template language code",
            "enum": [
              "ABK",
              "AAR",
              "AFR",
              "AKA",
              "SQI",
              "AMH",
              "ARA",
              "ARG",
              "HYE",
              "ASM",
              "AVA",
              "AVE",
              "AYM",
              "AZE",
              "BAM",
              "BAL",
              "BAK",
              "EUS",
              "BEL",
              "BEN",
              "BIH",
              "BIS",
              "BOS",
              "BRE",
              "BUL",
              "MYA",
              "CAT",
              "CHA",
              "CHE",
              "NYA",
              "ZHO",
              "CHV",
              "COR",
              "COS",
              "CRE",
              "HRV",
              "CES",
              "DAN",
              "DIV",
              "NLD",
              "DZO",
              "ENG",
              "EPO",
              "EST",
              "EWE",
              "FAO",
              "FIJ",
              "FIN",
              "FRA",
              "FUL",
              "GLG",
              "KAT",
              "DEU",
              "ELL",
              "GRN",
              "GUJ",
              "HAT",
              "HAU",
              "HEB",
              "HER",
              "HIN",
              "HMO",
              "HUN",
              "INA",
              "IND",
              "ILE",
              "GLE",
              "IBO",
              "IPK",
              "IDO",
              "ISL",
              "ITA",
              "IKU",
              "JPN",
              "JAV",
              "KAL",
              "KAN",
              "KAU",
              "KAS",
              "KAZ",
              "KHM",
              "KIK",
              "KIN",
              "KIR",
              "KOM",
              "KON",
              "KOR",
              "KUR",
              "KUA",
              "LAT",
              "LTZ",
              "LUG",
              "LIJ",
              "LIN",
              "LAO",
              "LIT",
              "LUB",
              "LAV",
              "GLV",
              "MKD",
              "MLG",
              "MSA",
              "MAL",
              "MLT",
              "MRI",
              "MAR",
              "MAH",
              "MON",
              "NAU",
              "NAV",
              "NDE",
              "NEP",
              "NDO",
              "NOB",
              "NNO",
              "NOR",
              "III",
              "NBL",
              "OCI",
              "OJI",
              "CHU",
              "ORM",
              "ORI",
              "OSS",
              "PAN",
              "PLI",
              "FAS",
              "POL",
              "PUS",
              "POR",
              "QUE",
              "ROH",
              "RUN",
              "RON",
              "RUS",
              "SAN",
              "SRD",
              "SND",
              "SME",
              "SMO",
              "SAG",
              "SRP",
              "GLA",
              "SNA",
              "SIN",
              "SLK",
              "SLV",
              "SOM",
              "SOT",
              "SPA",
              "SUN",
              "SWA",
              "SSW",
              "SWE",
              "TAM",
              "TEL",
              "TGK",
              "THA",
              "TIR",
              "BOD",
              "TUK",
              "TGL",
              "TSN",
              "TON",
              "TUR",
              "TSO",
              "TAT",
              "TWI",
              "TAH",
              "UIG",
              "UKR",
              "URD",
              "UZB",
              "VEN",
              "VIE",
              "VOL",
              "WLN",
              "CYM",
              "WOL",
              "FRY",
              "XHO",
              "YID",
              "YOR",
              "ZHA",
              "ZUL"
            ],
            "maxLength": 3,
            "type": "string",
            "x-go-name": "LanguageCode"
          },
          "body": {
            "description": "Template body",
            "type": "string",
            "x-go-name": "Body"
          },
          "subject": {
            "description": "Template subject",
            "type": "string",
            "x-go-name": "Subject"
          }
        },
        "required": [
          "message_type",
          "delivery_type",
          "language_code",
          "body"
        ],
        "title": "UpdateTemplateRequest is a request to update template. Template must be unique.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdateTemplateResponse": {
        "properties": {
          "template": {
            "$ref": "#/definitions/Template"
          }
        },
        "title": "UpdateTemplateResponse is the response to the request to update template.",
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UpdatedPayment": {
        "properties": {
          "payment_id": {
            "description": "Payment ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "PaymentID"
          },
          "payment_type": {
            "$ref": "#/definitions/PaymentType"
          },
          "metadata": {
            "$ref": "#/definitions/PaymentMetadata"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UploadKYCDocumentRequest": {
        "properties": {
          "kyc_check_id": {
            "description": "KYC check ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "KYCCheckID"
          },
          "file": {
            "$ref": "#/definitions/KYCDocumentFile"
          },
          "issuer": {
            "description": "Issuer country code in ISO 3166-1 Alpha-3 code standard\nin: formData",
            "enum": [
              "AFG",
              "ALA",
              "ALB",
              "DZA",
              "ASM",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BES",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "CPV",
              "KHM",
              "CMR",
              "CAN",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CUW",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GUM",
              "GTM",
              "GGY",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "VAT",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "IMN",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JEY",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MHL",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MNE",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "MNP",
              "NOR",
              "OMN",
              "PAK",
              "PLW",
              "PSE",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "PRI",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "BLM",
              "SHN",
              "KNA",
              "LCA",
              "MAF",
              "SPM",
              "VCT",
              "WSM",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SRB",
              "SYC",
              "SLE",
              "SGP",
              "SXM",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "SSD",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SJM",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "USA",
              "UMI",
              "URY",
              "UZB",
              "VUT",
              "VEN",
              "VNM",
              "VGB",
              "VIR",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE",
              "UNK",
              "XKX",
              "ANT"
            ],
            "type": "string",
            "x-go-name": "Issuer"
          },
          "number": {
            "description": "Number",
            "maxLength": 50,
            "type": "string",
            "x-go-name": "Number"
          },
          "type": {
            "description": "Type",
            "enum": [
              "IDVDocument",
              "IDVSelfieImage",
              "IDVReport"
            ],
            "type": "string",
            "x-go-name": "Type"
          },
          "subtype": {
            "description": "Subtype\nin: formData",
            "enum": [
              "NationalIDBack",
              "NationalIDFront",
              "Passport",
              "ResidencePermitBack",
              "ResidencePermitFront"
            ],
            "type": "string",
            "x-go-name": "Subtype"
          }
        },
        "required": [
          "kyc_check_id",
          "file",
          "type"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UploadKYCDocumentResponse": {
        "properties": {
          "kyc_document_id": {
            "format": "uuid4",
            "type": "string",
            "x-go-name": "KYCDocumentID"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "UserWithProfile": {
        "properties": {
          "id": {
            "description": "User ID",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "ID"
          },
          "first_name": {
            "description": "First name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "FirstName"
          },
          "last_name": {
            "description": "Last name",
            "maxLength": 100,
            "type": "string",
            "x-go-name": "LastName"
          },
          "email": {
            "description": "Email",
            "maxLength": 255,
            "type": "string",
            "x-go-name": "Email"
          },
          "profile_image": {
            "description": "Profile image",
            "type": "string",
            "x-go-name": "ProfileImage"
          },
          "profile_background_color": {
            "description": "Profile background color",
            "type": "string",
            "x-go-name": "ProfileBackgroundColor"
          },
          "last_logon_time": {
            "description": "Recent date-time the user was logged in at\nTime must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "LastLogonTime"
          },
          "mobile": {
            "description": "Mobile. Must be unique",
            "maxLength": 30,
            "type": "string",
            "x-go-name": "Mobile"
          },
          "created_at": {
            "description": "Date-time the user was created at\nTime must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "CreatedAt"
          },
          "deleted_at": {
            "description": "Date-time the user was deleted at\nTime must be in 2006-01-02T15:04:05Z format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "DeletedAt"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email",
          "mobile"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "VisaActionCode": {
        "enum": [
          "00",
          "05",
          "06",
          "14",
          "54",
          "85",
          "96",
          "N7"
        ],
        "type": "string",
        "x-go-package": "github.com/wallester/common/model"
      },
      "Wallets": {
        "properties": {
          "is_apple_pay_enabled": {
            "type": "boolean",
            "x-go-name": "IsApplePayEnabled"
          },
          "is_google_pay_enabled": {
            "type": "boolean",
            "x-go-name": "IsGooglePayEnabled"
          }
        },
        "type": "object",
        "x-go-package": "github.com/wallester/api/model"
      },
      "accountAdjustmentNotificationResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "accountToAccountTransferNotificationResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "activateCardEventResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "applePayIncentiveNotificationIncompleteProvisioningResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "applePayIncentiveNotificationSuccessfulTransactionResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-name": "applePayOrangeFlowResponse",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "authorizationResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "blockCardEventResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "cancelFeeResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "closedCardEventResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "closingCardEventResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "completeFeeResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "createCardEventResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "createFeeResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "decisionRequestAuthorizationResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          },
          "available_amount": {
            "description": "in: body\nThe cardholder’s available amount __after__ authorization.",
            "format": "double",
            "type": "number",
            "x-go-name": "AvailableAmount"
          },
          "response_code": {
            "description": "in: body",
            "enum": [
              "Approved",
              "ApprovedForPartialAmount",
              "ClientSystemMalfunction",
              "DeclinedByClient",
              "DoNotHonour",
              "NotSufficientFunds",
              "TransactionNotPermittedToCardholder"
            ],
            "type": "string",
            "x-go-name": "ResponseCode"
          }
        },
        "required": [
          "X-Request-ID",
          "response_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "decisionRequestBalanceInquiryAuthorizationResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          },
          "available_amount": {
            "description": "in: body",
            "format": "double",
            "type": "number",
            "x-go-name": "AvailableAmount"
          },
          "balance": {
            "description": "in: body",
            "format": "double",
            "type": "number",
            "x-go-name": "Balance"
          },
          "response_code": {
            "description": "in: body",
            "enum": [
              "Approved",
              "ApprovedForPartialAmount",
              "ClientSystemMalfunction",
              "DeclinedByClient",
              "DoNotHonour",
              "NotSufficientFunds",
              "TransactionNotPermittedToCardholder"
            ],
            "type": "string",
            "x-go-name": "ResponseCode"
          }
        },
        "required": [
          "X-Request-ID",
          "response_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "decisionRequestPartialAuthorizationResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          },
          "approved_amount": {
            "description": "in: body",
            "format": "double",
            "type": "number",
            "x-go-name": "ApprovedAmount"
          },
          "available_amount": {
            "description": "in: body\nThe cardholder’s available amount __after__ authorization.",
            "format": "double",
            "type": "number",
            "x-go-name": "AvailableAmount"
          },
          "response_code": {
            "description": "in: body",
            "enum": [
              "Approved",
              "ApprovedForPartialAmount",
              "ClientSystemMalfunction",
              "DeclinedByClient",
              "DoNotHonour",
              "NotSufficientFunds",
              "TransactionNotPermittedToCardholder"
            ],
            "type": "string",
            "x-go-name": "ResponseCode"
          }
        },
        "required": [
          "X-Request-ID",
          "response_code"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "dispatchCardEventResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "expireCardEventResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "headerXRequestID": {
        "description": "nolint:unused",
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "initiateActionResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "kycCheckResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "kycStatusChangeResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "orderedCardEventResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "personalizeCardEventResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "releaseAuthorizationResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "renewCardEventResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "replaceCardEventResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "reversalAuthorizationResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "threeDSValidateResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          },
          "status": {
            "description": "in: body",
            "enum": [
              "Success",
              "Pending",
              "Rejected",
              "Error"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "required": [
          "X-Request-ID",
          "status"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "threeDSecureOTPResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "transactionClearingResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      },
      "updateFeeResponse": {
        "properties": {
          "X-Request-ID": {
            "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response\nin: header",
            "format": "uuid4",
            "type": "string",
            "x-go-name": "RequestID"
          }
        },
        "required": [
          "X-Request-ID"
        ],
        "type": "object",
        "x-go-package": "github.com/wallester/api/controller"
      }
    },
    "host": "localhost:8000",
    "info": {
      "contact": {
        "email": "operations@wallester.com",
        "url": "/v1/doc/#"
      },
      "description": "Wallester Card API\n\n# Rate limits\n\nWallester has no rate limits and allows sending an unlimited number of requests to API, but we reserve the right to impose such limits if necessary.\n\n# RSA keys\n\nEncrypted card data exchange schema:\n![Encrypted card data exchange schema](img/encrypted-card-data-exchange-schema.png)\nPublic key needed in the request might be programmed to be generated and encrypted on each request or prepared in advance as given in the examples below and updated periodically.\nIt is recommended to use length of at least 3076 bytes when keys are being generated.\n\n## Generating RSA keys\n\nRSA key pair can be generated using following command:\n\n```shell\n\nopenssl genrsa -des3 -out private.pem 4096\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\n\n```\n\n## Public key example\n\n### Decoded public key example:\n\n##### -----BEGIN PUBLIC KEY-----\n##### MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA2oHA/IYjo06fRA33tca7\n##### Lgss1OvB8+cv8sTPJ5m4uwm0YChCNQW8lhDe3GP+w2ZUGAK25e8Y3gllF+G9WL0n\n##### khGmYenC9+fNWCdL2npcrucNG82XgU+v8cQQNbTkzombjw4bG1fkuowLoSQir2uK\n##### PE0aDhHmbdm0DebXb8mw/4NthU6dc5PFqaGuv7F9rMdtDo08mH5pOFjhkP1QGqap\n##### S0sL1vrzaQv9QSs6VASiMeCVzovUqqDGS55NSY1bzvRP9zjzbNJeeK5ywadK0apu\n##### y8QUgl2Wa8Xq4PcyiKMYbzpqq9oqnsc8d+WwALJaxfDfa5qMKyL7HvQXuXAZejNQ\n##### L9X1DRKkBvYZEhliV/yoKwD1lwHo28sqXWW/J8ITAZwaG8K4UyERVT4mfO8RHlJU\n##### lZ762KPRy+lqRqTnZkYLgG6jzShhADnfn1GaM5/obr9ZjLw3owqOaevF0NmsJlfy\n##### I2aM8I9XANl+ZyQNJfART9OErfLqruOa2lZg1XebcupYxjEKfyZpiWQvD42I18UM\n##### 6OGx2kpvYq6jggDqiz6BNu6LB/ckv+9z/olnkjr1cmZU3EfrfLuxRYboEBIV2GWG\n##### eo0LLEiFUYP5LD60P7EnGPN4qgJ9epWWVxQKR6wAljVMUXLDzdBEu9lk45X7ILK8\n##### ejP034fViVKHij6jQZPce3cCAwEAAQ==\n##### -----END PUBLIC KEY-----\n\nTest results were received using this website: https://www.base64encode.org/ :\n\n### Base64 encoded public key string (using example above):\n\n```shell\n\nLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUEyb0hBL0lZam8wNmZSQTMzdGNhNwpMZ3NzMU92QjgrY3Y4c1RQSjVtNHV3bTBZQ2hDTlFXOGxoRGUzR1ArdzJaVUdBSzI1ZThZM2dsbEYrRzlXTDBuCmtoR21ZZW5DOStmTldDZEwybnBjcnVjTkc4MlhnVSt2OGNRUU5iVGt6b21ianc0YkcxZmt1b3dMb1NRaXIydUsKUEUwYURoSG1iZG0wRGViWGI4bXcvNE50aFU2ZGM1UEZxYUd1djdGOXJNZHREbzA4bUg1cE9GamhrUDFRR3FhcApTMHNMMXZyemFRdjlRU3M2VkFTaU1lQ1Z6b3ZVcXFER1M1NU5TWTFienZSUDl6anpiTkplZUs1eXdhZEswYXB1Cnk4UVVnbDJXYThYcTRQY3lpS01ZYnpwcXE5b3Fuc2M4ZCtXd0FMSmF4ZkRmYTVxTUt5TDdIdlFYdVhBWmVqTlEKTDlYMURSS2tCdllaRWhsaVYveW9Ld0QxbHdIbzI4c3FYV1cvSjhJVEFad2FHOEs0VXlFUlZUNG1mTzhSSGxKVQpsWjc2MktQUnkrbHFScVRuWmtZTGdHNmp6U2hoQURuZm4xR2FNNS9vYnI5WmpMdzNvd3FPYWV2RjBObXNKbGZ5CkkyYU04STlYQU5sK1p5UU5KZkFSVDlPRXJmTHFydU9hMmxaZzFYZWJjdXBZeGpFS2Z5WnBpV1F2RDQySTE4VU0KNk9HeDJrcHZZcTZqZ2dEcWl6NkJOdTZMQi9ja3YrOXovb2xua2pyMWNtWlUzRWZyZkx1eFJZYm9FQklWMkdXRwplbzBMTEVpRlVZUDVMRDYwUDdFbkdQTjRxZ0o5ZXBXV1Z4UUtSNndBbGpWTVVYTER6ZEJFdTlsazQ1WDdJTEs4CmVqUDAzNGZWaVZLSGlqNmpRWlBjZTNjQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ==\n\n```\n\n# Authorization\n\nAuthorization is implemented using [JSON Web Tokens (JWT)](https://jwt.io/). For more information, please see [our repository of integration examples](https://github.com/wallester/integration-examples).",
      "title": "Wallester",
      "version": "v1",
      "x-logo": {
        "url": "img/wallester-logo.png"
      }
    },
    "paths": {
      "/host:port/v1/3d-secure-otp-event": {
        "post": {
          "description": "Event notification is triggered when a new 3DS OTP request is received.\nBy default, the message is sent to the cardholder via SMS, however when this event is enabled,\nthe message will be forwarded to a server defined by the Client instead.",
          "operationId": "ThreeDSecureOTP",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ThreeDSecureOTP"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "threeDSecureOTPResponse",
              "schema": {
                "$ref": "#/definitions/threeDSecureOTPResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "3D Secure OTP",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/account-adjustment-notification": {
        "post": {
          "description": "Account adjustment notification",
          "operationId": "AccountAdjustmentNotification",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/AccountAdjustmentNotification"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "accountAdjustmentNotificationResponse",
              "schema": {
                "$ref": "#/definitions/accountAdjustmentNotificationResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Account adjustment notification",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/account-to-account-transfer-notification": {
        "post": {
          "description": "Account to Account transfer notification",
          "operationId": "AccountToAccountTransferNotification",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/AccountToAccountTransferNotification"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "accountToAccountTransferNotificationResponse",
              "schema": {
                "$ref": "#/definitions/accountToAccountTransferNotificationResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Account to Account transfer notification",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/activate-card-event": {
        "post": {
          "description": "Event notification is triggered when a new card is activated. The status is applicable for all card types.",
          "operationId": "ActivateCardEvent",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ActivateCardEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "activateCardEventResponse",
              "schema": {
                "$ref": "#/definitions/activateCardEventResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Activate card",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/apple-pay-incentive-notification-incomplete-provisioning-event": {
        "post": {
          "description": "Incomplete provisioning Apple Pay incentive notification is sent when a cardholder has commenced provisioning onto Apple Pay platform but has not completed provisioning within seven (7) days.",
          "operationId": "ApplePayIncentiveNotificationIncompleteProvisioning",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ApplePayIncentiveNotificationIncompleteProvisioning"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "applePayIncentiveNotificationIncompleteProvisioningResponse",
              "schema": {
                "$ref": "#/definitions/applePayIncentiveNotificationIncompleteProvisioningResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Apple Pay incentive notification incomplete provisioning",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/apple-pay-incentive-notification-successful-transaction-event": {
        "post": {
          "description": "Successful transaction Apple Pay incentive notification is sent when a cardholder has completed provisioning onto Apple Pay platform but has not made a successful payment with Apple Pay within fourteen (14) days.",
          "operationId": "ApplePayIncentiveNotificationSuccessfulTransaction",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ApplePayIncentiveNotificationSuccessfulTransaction"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "applePayIncentiveNotificationSuccessfulTransactionResponse",
              "schema": {
                "$ref": "#/definitions/applePayIncentiveNotificationSuccessfulTransactionResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Apple Pay incentive notification successful transaction",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/apple-pay-orange-flow-event": {
        "post": {
          "description": "Apple provides recommendations on authentication methods that users may encounter during provisioning. A notification will be sent if the user is only given the option to authenticate through the Call Center.",
          "operationId": "ApplePayOrangeFlow",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ApplePayOrangeFlow"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "applePayIncentiveNotificationSuccessfulTransactionResponse",
              "schema": {
                "$ref": "#/definitions/applePayIncentiveNotificationSuccessfulTransactionResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Apple pay orange flow",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/authorization-event": {
        "post": {
          "description": "Authorization",
          "operationId": "Authorization",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/AuthorizationView"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "authorizationResponse",
              "schema": {
                "$ref": "#/definitions/authorizationResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Authorization",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/block-card-event": {
        "post": {
          "description": "Event notification is triggered when a card is blocked. The status is applicable for all card types.",
          "operationId": "BlockCardEvent",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/BlockCardEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "blockCardEventResponse",
              "schema": {
                "$ref": "#/definitions/blockCardEventResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Block card",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/cancel-fee-event": {
        "post": {
          "description": "Event notification is triggered when a fee is canceled. For example, the authorization has expired and related fee is canceled",
          "operationId": "CancelFee",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/CancelFee"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "cancelFeeResponse",
              "schema": {
                "$ref": "#/definitions/cancelFeeResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Cancel fee",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/closed-card-event": {
        "post": {
          "description": "Event notification is triggered when a card closes. The status is applicable for all card types.",
          "operationId": "ClosedCardEvent",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ClosedCardEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "closedCardEventResponse",
              "schema": {
                "$ref": "#/definitions/closedCardEventResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Card closed",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/closing-card-event": {
        "post": {
          "description": "If a card was closed but the clearing was not complete for all authorizations, the card will get a “Closing” status until clearing is done.",
          "operationId": "ClosingCardEvent",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ClosingCardEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "closingCardEventResponse",
              "schema": {
                "$ref": "#/definitions/closingCardEventResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Card closing",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/complete-fee-event": {
        "post": {
          "description": "Event notification is triggered when a new fee is created in Completed status or fee status has changed to Completed.\nFor example, the CardIssuanceFee is created in Completed status or fee status has changed to Completed after clearing.",
          "operationId": "CompleteFee",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/CompleteFee"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "completeFeeResponse",
              "schema": {
                "$ref": "#/definitions/completeFeeResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Complete fee",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/create-card-event": {
        "post": {
          "description": "Event notification is triggered when a new card is created. This type of notification is best to use with cards extracts file described in the specification called \"Extract Files Overview\".\n\nThere are two options for notifications:\n\n1. Send notification only for cards which are created with send_notification flag set to true. API documentation: https://api-doc.wallester.com/#operation/CreateCard\n\n2. Send notifications for all cards created in the system. There is no need to send flag through the API in this case.",
          "operationId": "CreateCardEvent",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/CreateCardEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "createCardEventResponse",
              "schema": {
                "$ref": "#/definitions/createCardEventResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Create card",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/create-fee-event": {
        "post": {
          "description": "Event notification is triggered when a new fee is created, except one that is created in Completed status,\nand is not related to authorization.",
          "operationId": "CreateFee",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/CreateFee"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "createFeeResponse",
              "schema": {
                "$ref": "#/definitions/createFeeResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Create fee",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/decision-request-authorization-event": {
        "post": {
          "description": "Decision request: Authorization",
          "operationId": "DecisionRequestAuthorization",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/DecisionRequestAuthorizationView"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "decisionRequestAuthorizationResponse",
              "schema": {
                "$ref": "#/definitions/decisionRequestAuthorizationResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Decision request: Authorization",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/decision-request-balance-inquiry-authorization-event": {
        "post": {
          "description": "In case when an external balance system is implemented on the **Client** side, the given interface helps **Wallester** to provide to the Customer information on card balance requests, fulfill reversal operations and resolve partial payments.\n\nFor the authorizations which have type **ATMBalanceInquiry**, sending of balance information is mandatory in a response if the response code is set to **Approved**.\n\nWhere **balance**: cardholder’s balance, **available_amount** - cardholder’s available amount funds.\n\nIn case of **Wallester** declining Balance Inquiry authorization for any reason, the **Client** will receive an appropriate notification event with the information on the declined request.",
          "operationId": "DecisionRequestBalanceInquiryAuthorization",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/DecisionRequestBalanceInquiryAuthorizationView"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "decisionRequestBalanceInquiryAuthorizationResponse",
              "schema": {
                "$ref": "#/definitions/decisionRequestBalanceInquiryAuthorizationResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Decision request: Balance inquiry authorization",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/dispatch-card-event": {
        "post": {
          "description": "Event notification is triggered when a new card is dispatched from the personalization bureau. The status is applicable for ChipAndPin and ChipAndPinAnonymous card types only.",
          "operationId": "DispatchCardEvent",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/DispatchCardEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "dispatchCardEventResponse",
              "schema": {
                "$ref": "#/definitions/dispatchCardEventResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Dispatch card",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/expire-card-event": {
        "post": {
          "description": "Event notification is triggered when a card gets expired. The status is applicable for all card types.",
          "operationId": "ExpireCardEvent",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ExpireCardEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "expireCardEventResponse",
              "schema": {
                "$ref": "#/definitions/expireCardEventResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Expire card",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/initiate-action-event": {
        "post": {
          "description": "The **Initiate Action** event takes place once the method of 3DS authentication is identified.\n\nThe outcome of the event is the cardholder seeing the screen with instructions on how to complete their authentication by interacting with a 3rd party application.\n\nUse **request_id** as a unique identifier to identify the particular authentication request in the [Validate](#operation/Validate) event.\n\nExpected response HTTP status code is **200 OK**, otherwise unavailable authentication status returned to the merchant.",
          "operationId": "InitiateAction",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/InitiateAction"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "initiateActionResponse",
              "schema": {
                "$ref": "#/definitions/initiateActionResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Initiate action",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/kyc-check-event": {
        "post": {
          "description": "These events are available only on the Wallester White-Label program.\n\nPossible event types:\n\ncreate - Event notification is triggered when a new KYC Check is created.\n\ndelete - Event notification is triggered when a KYC Check is deleted.\n\nreject - Event notification is triggered when a KYC Check is rejected.\n\napprove - Event notification is triggered when a KYC Check is approved.",
          "operationId": "KYCCheck",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/KYCCheckEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "kycCheckResponse",
              "schema": {
                "$ref": "#/definitions/kycCheckResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "KYC Check",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/kyc-status-change-event": {
        "post": {
          "description": "KYC status change",
          "operationId": "KYCStatusChange",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/KYCStatusChange"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "kycStatusChangeResponse",
              "schema": {
                "$ref": "#/definitions/kycStatusChangeResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "KYC status change",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/ordered-card-event": {
        "post": {
          "description": "Event notification is triggered when a new card is ordered. The status is applicable for ChipAndPin and ChipAndPinAnonymous card types only.",
          "operationId": "OrderedCardEvent",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/OrderedCardEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "orderedCardEventResponse",
              "schema": {
                "$ref": "#/definitions/orderedCardEventResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Ordered card",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/partial-authorization-event": {
        "post": {
          "description": "Partial authorizations might be available for the various authorization types, depending on merchant type and its capabilities to support partial approvals. Nevertheless, a good sample of conditions where partial payments apply might be authorization with the type **AutomatedFuelDispenser**. Conditions when partial payments might be allowed or declined fully depending on Client’s regulations.\n\nFor example, in case when a cardholder has less money on account than requested via authorization, the Client might freeze the available amount and respond with the response code **ApprovedForPartialAmount**. In such cases an **approved_amount** is expected in response, where the **approved_amount** - amount of money that will be frozen on the cardholder's account.\n\nIn case when a cardholder has enough funds on account on **AutomatedFuelDispenser**, authorization response code is set to **Approved**, which means the full amount was available and frozen on account.\n\nIn case of **Wallester** declining authorization for any reason, the **Client** will receive an appropriate notification event with the information on the declined request.",
          "operationId": "DecisionRequestPartialAuthorization",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/DecisionRequestPartialAuthorizationView"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "decisionRequestPartialAuthorizationResponse",
              "schema": {
                "$ref": "#/definitions/decisionRequestPartialAuthorizationResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Decision request: Partial authorization",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/personalize-card-event": {
        "post": {
          "description": "Event notification is triggered when a new card is personalized. The status is applicable for ChipAndPin and ChipAndPinAnonymous card types only.",
          "operationId": "PersonalizeCardEvent",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/PersonalizeCardEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "personalizeCardEventResponse",
              "schema": {
                "$ref": "#/definitions/personalizeCardEventResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Personalize card",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/release-authorization-event": {
        "post": {
          "description": "Authorization transfers funds from the available amount to the blocked amount, while the money remains in the account. Banks usually hold funds for 7-14 days. Funds are physically transferred at the time of the transaction. If the transaction did not occur on time, then the funds are returned from the blocked amount to the available amount. This is called \"release authorization\". \"Release authorization\" can occur for several reasons, for example, due to a technical error or due to the fault of the merchant who did not send the transaction on time.",
          "operationId": "ReleaseAuthorization",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ReleaseAuthorizationView"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "releaseAuthorizationResponse",
              "schema": {
                "$ref": "#/definitions/releaseAuthorizationResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Release authorization",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/renew-card-event": {
        "post": {
          "description": "Event notification is triggered N days before the card expiration and identifies that the card may be renewed. The status is applicable for all card types.",
          "operationId": "RenewCardEvent",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/RenewCardEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "renewCardEventResponse",
              "schema": {
                "$ref": "#/definitions/renewCardEventResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Renew card",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/replace-card-event": {
        "post": {
          "description": "Event notification is triggered when the card is replaced. The status is applicable for all card types.",
          "operationId": "ReplaceCardEvent",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ReplaceCardEvent"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "replaceCardEventResponse",
              "schema": {
                "$ref": "#/definitions/replaceCardEventResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Replace card",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/reversal-authorization-event": {
        "post": {
          "description": "Reversal authorization happens when the funds used by the cardholder in a payment are returned to the cardholder's account. This can be initiated by the cardholder, the merchant, the issuing bank, the acquiring bank, or the card association. Common reason why reversal authorization occurs: the item ended up being sold out.",
          "operationId": "ReversalAuthorization",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ReversalAuthorizationView"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "reversalAuthorizationResponse",
              "schema": {
                "$ref": "#/definitions/reversalAuthorizationResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Reversal authorization",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/transaction-clearing-event": {
        "post": {
          "description": "Transaction clearing",
          "operationId": "TransactionClearing",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/TransactionClearing"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "transactionClearingResponse",
              "schema": {
                "$ref": "#/definitions/transactionClearingResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Transaction clearing",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/update-fee-event": {
        "post": {
          "description": "Event notification is triggered when a fee amount changes. For example, during clearing the amount is recalculated.",
          "operationId": "UpdateFee",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/UpdateFee"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "updateFeeResponse",
              "schema": {
                "$ref": "#/definitions/updateFeeResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Update fee",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/host:port/v1/validate-event": {
        "post": {
          "description": "The **Validate** event takes place after the [Initiate Action](#operation/InitiateAction) in order to check whether the cardholder has confirmed the purchase or not.\n\nUse request_id as a unique identifier to identify the particular authentication request from the Initiate Action event.\n\nExpected response HTTP status code is **200 OK** and a status from the list below in the request body, otherwise unavailable authentication status returned to the merchant.\n\nSuccess - Ends the transaction with a successful authentication status to the merchant.\n\nPending - Initiates another Validate event from **Wallester** to the **Client** after 2 seconds.\n\nRejected - Ends the transaction with a rejected authentication status to the merchant and indicates they should not proceed with authorization.\n\nError - Returns an unavailable authentication status to the merchant.",
          "operationId": "ThreeDSValidate",
          "parameters": [
            {
              "description": "Basic auth, in \"Authorization: Basic BASE64_ENCODED_DATA\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string",
              "x-go-name": "Token"
            },
            {
              "description": "The type of the request body.",
              "enum": [
                "application/json"
              ],
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Unique ID for the request. Generated by Wallester. Equal for Request and Response",
              "format": "uuid4",
              "in": "header",
              "name": "X-Request-ID",
              "required": true,
              "type": "string",
              "x-go-name": "RequestID"
            },
            {
              "in": "body",
              "name": "request",
              "schema": {
                "$ref": "#/definitions/ThreeDSValidate"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "threeDSValidateResponse",
              "schema": {
                "$ref": "#/definitions/threeDSValidateResponse"
              }
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "summary": "Validate",
          "tags": [
            "Webhooks"
          ]
        }
      },
      "/v1/account-adjustments": {
        "get": {
          "description": "Search account adjustments",
          "operationId": "SearchAccountAdjustments",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "AdjustmentTypes is **repeated** query parameter to specify adjustment types to return.",
              "enum": [
                "Adjustment",
                "Cashback",
                "IncomingSEPAPayment",
                "SendEmployeeTransfer",
                "ReceiveEmployeeTransfer",
                "SendMobileTransfer",
                "ReceiveMobileTransfer",
                "AccountToAccountTransfer",
                "CardTopUp"
              ],
              "in": "query",
              "name": "adjustment_types",
              "type": "string",
              "x-go-name": "AdjustmentTypes"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "SearchAccountAdjustmentsResponse",
              "schema": {
                "$ref": "#/definitions/SearchAccountAdjustmentsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Search account adjustments",
          "tags": [
            "Account-Adjustments"
          ]
        },
        "post": {
          "description": "Adds or subtracts specified amount from account balance (negative value is used for subtraction). Returns account adjustment in response",
          "operationId": "CreateAccountAdjustment",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AdjustAccountBalanceWithAdjustmentRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "AdjustAccountBalanceWithAdjustmentResponse",
              "schema": {
                "$ref": "#/definitions/AdjustAccountBalanceWithAdjustmentResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create account adjustment",
          "tags": [
            "Account-Adjustments"
          ]
        }
      },
      "/v1/account-adjustments-by-external-id/{external_id}": {
        "get": {
          "description": "Get account adjustment by external ID",
          "operationId": "GetAccountAdjustmentByExternalID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "External ID",
              "in": "path",
              "name": "external_id",
              "required": true,
              "type": "string",
              "x-go-name": "ExternalID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountAdjustmentByExternalIDResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountAdjustmentByExternalIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account adjustment by external ID",
          "tags": [
            "Account-Adjustments"
          ]
        }
      },
      "/v1/account-adjustments/{account_adjustment_id}": {
        "get": {
          "description": "Get account adjustment information",
          "operationId": "GetAccountAdjustment",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account adjustment ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_adjustment_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountAdjustmentID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountAdjustmentResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountAdjustmentResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account adjustment",
          "tags": [
            "Account-Adjustments"
          ]
        }
      },
      "/v1/account-payments": {
        "patch": {
          "description": "Transfers money from one account to another",
          "operationId": "CreateAccountPayment",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateAccountPaymentRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "CreateAccountPaymentResponse",
              "schema": {
                "$ref": "#/definitions/CreateAccountPaymentResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create account payment",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts": {
        "get": {
          "description": "Search accounts",
          "operationId": "SearchAccounts",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name",
              "in": "query",
              "name": "name",
              "type": "string",
              "x-go-name": "Name"
            },
            {
              "description": "External ID",
              "in": "query",
              "name": "external_id",
              "type": "string",
              "x-go-name": "ExternalID"
            },
            {
              "description": "Is main account",
              "in": "query",
              "name": "is_main",
              "type": "boolean",
              "x-go-name": "IsMain"
            },
            {
              "description": "Exceeding credit limit",
              "in": "query",
              "name": "exceeding_credit_limit",
              "type": "boolean",
              "x-go-name": "ExceedingCreditLimit"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "default": "created_at",
              "description": "Field to sort by: created_at, updated_at, balance, blocked_amount, available_amount, name, status",
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "SearchAccountsResponse",
              "schema": {
                "$ref": "#/definitions/SearchAccountsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Search accounts",
          "tags": [
            "Account"
          ]
        },
        "post": {
          "description": "Create account",
          "operationId": "CreateAccount",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateAccountRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreateAccountResponse",
              "schema": {
                "$ref": "#/definitions/CreateAccountResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create account",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts-by-external-id/{external_id}": {
        "get": {
          "description": "Get account by external ID",
          "operationId": "GetAccountByExternalID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "External ID",
              "in": "path",
              "name": "external_id",
              "required": true,
              "type": "string",
              "x-go-name": "ExternalID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountByExternalIDResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountByExternalIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account by external ID",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts-by-ids": {
        "post": {
          "description": "Get accounts information",
          "operationId": "GetAccountsByIDs",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GetAccountsByIDsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountsByIDsResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountsByIDsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get accounts by IDs",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts-exceeding-credit-limit": {
        "get": {
          "deprecated": true,
          "description": "Returns accounts that have available amount more than credit limit",
          "operationId": "GetAccountsExceedingCreditLimitDeprecated",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountsExceedingCreditLimitResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountsExceedingCreditLimitResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get accounts exceeding credit limit",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}": {
        "get": {
          "description": "Get account information",
          "operationId": "GetAccount",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/account-adjustments/{account_adjustment_id}/external-id": {
        "patch": {
          "description": "Update account adjustment external ID. It is allowed to send empty external ID to remove the external ID from the account adjustment.",
          "operationId": "UpdateAccountAdjustmentExternalID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "description": "Account adjustment ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_adjustment_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountAdjustmentID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateAccountAdjustmentExternalIDRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateAccountAdjustmentExternalIDResponse",
              "schema": {
                "$ref": "#/definitions/UpdateAccountAdjustmentExternalIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update account adjustment external ID",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/authorizations": {
        "get": {
          "description": "Get account authorizations",
          "operationId": "GetAccountAuthorizations",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountAuthorizationsResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountAuthorizationsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account authorizations",
          "tags": [
            "Authorizations"
          ]
        }
      },
      "/v1/accounts/{account_id}/balance": {
        "patch": {
          "description": "Adds or subtracts specified amount from account balance (negative value is used for subtraction). Returns account in response.",
          "operationId": "AdjustAccountBalance",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AdjustAccountBalanceRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "AdjustAccountBalanceResponse",
              "schema": {
                "$ref": "#/definitions/AdjustAccountBalanceResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Adjust account balance",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/cards": {
        "get": {
          "description": "Get account cards",
          "operationId": "GetAccountCards",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (can be used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (can be used with from_record parameter in pair). \u003cbr\u003e\nIf not specified, default value 1000 is used.",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "CardStatuses is **repeated** query parameter to specify card statuses to return.",
              "enum": [
                "Created",
                "Ordered",
                "Personalized",
                "Dispatched",
                "Active",
                "Blocked",
                "Closing",
                "Closed",
                "Expired",
                "AwaitingRenewal"
              ],
              "in": "query",
              "name": "card_statuses",
              "type": "string",
              "x-go-name": "CardStatuses"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountCardsResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountCardsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account cards",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/close": {
        "delete": {
          "description": "Closes account with default reason ClosedByClient",
          "operationId": "CloseAccount",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            }
          ],
          "responses": {
            "200": {
              "description": "CloseAccountResponse",
              "schema": {
                "$ref": "#/definitions/CloseAccountResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Close account",
          "tags": [
            "Account"
          ]
        },
        "patch": {
          "description": "Close account",
          "operationId": "CloseAccountPatch",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CloseAccountRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "CloseAccountResponse",
              "schema": {
                "$ref": "#/definitions/CloseAccountResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Close account",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/credit-limit": {
        "patch": {
          "description": "Update credit limit",
          "operationId": "UpdateCreditLimit",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCreditLimitRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "UpdateCreditLimitResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCreditLimitResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update credit limit",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/download-statement": {
        "get": {
          "description": "Download account statement",
          "operationId": "DownloadAccountStatement",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "required": true,
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "required": true,
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "Timezone",
              "enum": [
                "Africa/Abidjan",
                "Africa/Accra",
                "Africa/Addis_Ababa",
                "Africa/Algiers",
                "Africa/Asmara",
                "Africa/Asmera",
                "Africa/Bamako",
                "Africa/Bangui",
                "Africa/Banjul",
                "Africa/Bissau",
                "Africa/Blantyre",
                "Africa/Brazzaville",
                "Africa/Bujumbura",
                "Africa/Cairo",
                "Africa/Casablanca",
                "Africa/Ceuta",
                "Africa/Conakry",
                "Africa/Dakar",
                "Africa/Dar_es_Salaam",
                "Africa/Djibouti",
                "Africa/Douala",
                "Africa/El_Aaiun",
                "Africa/Freetown",
                "Africa/Gaborone",
                "Africa/Harare",
                "Africa/Johannesburg",
                "Africa/Juba",
                "Africa/Kampala",
                "Africa/Khartoum",
                "Africa/Kigali",
                "Africa/Kinshasa",
                "Africa/Lagos",
                "Africa/Libreville",
                "Africa/Lome",
                "Africa/Luanda",
                "Africa/Lubumbashi",
                "Africa/Lusaka",
                "Africa/Malabo",
                "Africa/Maputo",
                "Africa/Maseru",
                "Africa/Mbabane",
                "Africa/Mogadishu",
                "Africa/Monrovia",
                "Africa/Nairobi",
                "Africa/Ndjamena",
                "Africa/Niamey",
                "Africa/Nouakchott",
                "Africa/Ouagadougou",
                "Africa/Porto-Novo",
                "Africa/Sao_Tome",
                "Africa/Timbuktu",
                "Africa/Tripoli",
                "Africa/Tunis",
                "Africa/Windhoek",
                "America/Adak",
                "America/Anchorage",
                "America/Anguilla",
                "America/Antigua",
                "America/Araguaina",
                "America/Argentina/Buenos_Aires",
                "America/Argentina/Catamarca",
                "America/Argentina/ComodRivadavia",
                "America/Argentina/Cordoba",
                "America/Argentina/Jujuy",
                "America/Argentina/La_Rioja",
                "America/Argentina/Mendoza",
                "America/Argentina/Rio_Gallegos",
                "America/Argentina/Salta",
                "America/Argentina/San_Juan",
                "America/Argentina/San_Luis",
                "America/Argentina/Tucuman",
                "America/Argentina/Ushuaia",
                "America/Aruba",
                "America/Asuncion",
                "America/Atikokan",
                "America/Atka",
                "America/Bahia",
                "America/Bahia_Banderas",
                "America/Barbados",
                "America/Belem",
                "America/Belize",
                "America/Blanc-Sablon",
                "America/Boa_Vista",
                "America/Bogota",
                "America/Boise",
                "America/Buenos_Aires",
                "America/Cambridge_Bay",
                "America/Campo_Grande",
                "America/Cancun",
                "America/Caracas",
                "America/Catamarca",
                "America/Cayenne",
                "America/Cayman",
                "America/Chicago",
                "America/Chihuahua",
                "America/Ciudad_Juarez",
                "America/Coral_Harbour",
                "America/Cordoba",
                "America/Costa_Rica",
                "America/Creston",
                "America/Cuiaba",
                "America/Curacao",
                "America/Danmarkshavn",
                "America/Dawson",
                "America/Dawson_Creek",
                "America/Denver",
                "America/Detroit",
                "America/Dominica",
                "America/Edmonton",
                "America/Eirunepe",
                "America/El_Salvador",
                "America/Ensenada",
                "America/Fort_Nelson",
                "America/Fort_Wayne",
                "America/Fortaleza",
                "America/Glace_Bay",
                "America/Godthab",
                "America/Goose_Bay",
                "America/Grand_Turk",
                "America/Grenada",
                "America/Guadeloupe",
                "America/Guatemala",
                "America/Guayaquil",
                "America/Guyana",
                "America/Halifax",
                "America/Havana",
                "America/Hermosillo",
                "America/Indiana/Indianapolis",
                "America/Indiana/Knox",
                "America/Indiana/Marengo",
                "America/Indiana/Petersburg",
                "America/Indiana/Tell_City",
                "America/Indiana/Vevay",
                "America/Indiana/Vincennes",
                "America/Indiana/Winamac",
                "America/Indianapolis",
                "America/Inuvik",
                "America/Iqaluit",
                "America/Jamaica",
                "America/Jujuy",
                "America/Juneau",
                "America/Kentucky/Louisville",
                "America/Kentucky/Monticello",
                "America/Knox_IN",
                "America/Kralendijk",
                "America/La_Paz",
                "America/Lima",
                "America/Los_Angeles",
                "America/Louisville",
                "America/Lower_Princes",
                "America/Maceio",
                "America/Managua",
                "America/Manaus",
                "America/Marigot",
                "America/Martinique",
                "America/Matamoros",
                "America/Mazatlan",
                "America/Mendoza",
                "America/Menominee",
                "America/Merida",
                "America/Metlakatla",
                "America/Mexico_City",
                "America/Miquelon",
                "America/Moncton",
                "America/Monterrey",
                "America/Montevideo",
                "America/Montreal",
                "America/Montserrat",
                "America/Nassau",
                "America/New_York",
                "America/Nipigon",
                "America/Nome",
                "America/Noronha",
                "America/North_Dakota/Beulah",
                "America/North_Dakota/Center",
                "America/North_Dakota/New_Salem",
                "America/Nuuk",
                "America/Ojinaga",
                "America/Panama",
                "America/Pangnirtung",
                "America/Paramaribo",
                "America/Phoenix",
                "America/Port-au-Prince",
                "America/Port_of_Spain",
                "America/Porto_Acre",
                "America/Porto_Velho",
                "America/Puerto_Rico",
                "America/Punta_Arenas",
                "America/Rainy_River",
                "America/Rankin_Inlet",
                "America/Recife",
                "America/Regina",
                "America/Resolute",
                "America/Rio_Branco",
                "America/Rosario",
                "America/Santa_Isabel",
                "America/Santarem",
                "America/Santiago",
                "America/Santo_Domingo",
                "America/Sao_Paulo",
                "America/Scoresbysund",
                "America/Shiprock",
                "America/Sitka",
                "America/St_Barthelemy",
                "America/St_Johns",
                "America/St_Kitts",
                "America/St_Lucia",
                "America/St_Thomas",
                "America/St_Vincent",
                "America/Swift_Current",
                "America/Tegucigalpa",
                "America/Thule",
                "America/Thunder_Bay",
                "America/Tijuana",
                "America/Toronto",
                "America/Tortola",
                "America/Vancouver",
                "America/Virgin",
                "America/Whitehorse",
                "America/Winnipeg",
                "America/Yakutat",
                "America/Yellowknife",
                "Antarctica/Casey",
                "Antarctica/Davis",
                "Antarctica/DumontDUrville",
                "Antarctica/Macquarie",
                "Antarctica/Mawson",
                "Antarctica/McMurdo",
                "Antarctica/Palmer",
                "Antarctica/Rothera",
                "Antarctica/South_Pole",
                "Antarctica/Syowa",
                "Antarctica/Troll",
                "Antarctica/Vostok",
                "Arctic/Longyearbyen",
                "Asia/Aden",
                "Asia/Almaty",
                "Asia/Amman",
                "Asia/Anadyr",
                "Asia/Aqtau",
                "Asia/Aqtobe",
                "Asia/Ashgabat",
                "Asia/Ashkhabad",
                "Asia/Atyrau",
                "Asia/Baghdad",
                "Asia/Bahrain",
                "Asia/Baku",
                "Asia/Bangkok",
                "Asia/Barnaul",
                "Asia/Beirut",
                "Asia/Bishkek",
                "Asia/Brunei",
                "Asia/Calcutta",
                "Asia/Chita",
                "Asia/Choibalsan",
                "Asia/Chongqing",
                "Asia/Chungking",
                "Asia/Colombo",
                "Asia/Dacca",
                "Asia/Damascus",
                "Asia/Dhaka",
                "Asia/Dili",
                "Asia/Dubai",
                "Asia/Dushanbe",
                "Asia/Famagusta",
                "Asia/Gaza",
                "Asia/Harbin",
                "Asia/Hebron",
                "Asia/Ho_Chi_Minh",
                "Asia/Hong_Kong",
                "Asia/Hovd",
                "Asia/Irkutsk",
                "Asia/Istanbul",
                "Asia/Jakarta",
                "Asia/Jayapura",
                "Asia/Jerusalem",
                "Asia/Kabul",
                "Asia/Kamchatka",
                "Asia/Karachi",
                "Asia/Kashgar",
                "Asia/Kathmandu",
                "Asia/Katmandu",
                "Asia/Khandyga",
                "Asia/Kolkata",
                "Asia/Krasnoyarsk",
                "Asia/Kuala_Lumpur",
                "Asia/Kuching",
                "Asia/Kuwait",
                "Asia/Macao",
                "Asia/Macau",
                "Asia/Magadan",
                "Asia/Makassar",
                "Asia/Manila",
                "Asia/Muscat",
                "Asia/Nicosia",
                "Asia/Novokuznetsk",
                "Asia/Novosibirsk",
                "Asia/Omsk",
                "Asia/Oral",
                "Asia/Phnom_Penh",
                "Asia/Pontianak",
                "Asia/Pyongyang",
                "Asia/Qatar",
                "Asia/Qostanay",
                "Asia/Qyzylorda",
                "Asia/Rangoon",
                "Asia/Riyadh",
                "Asia/Saigon",
                "Asia/Sakhalin",
                "Asia/Samarkand",
                "Asia/Seoul",
                "Asia/Shanghai",
                "Asia/Singapore",
                "Asia/Srednekolymsk",
                "Asia/Taipei",
                "Asia/Tashkent",
                "Asia/Tbilisi",
                "Asia/Tehran",
                "Asia/Tel_Aviv",
                "Asia/Thimbu",
                "Asia/Thimphu",
                "Asia/Tokyo",
                "Asia/Tomsk",
                "Asia/Ujung_Pandang",
                "Asia/Ulaanbaatar",
                "Asia/Ulan_Bator",
                "Asia/Urumqi",
                "Asia/Ust-Nera",
                "Asia/Vientiane",
                "Asia/Vladivostok",
                "Asia/Yakutsk",
                "Asia/Yangon",
                "Asia/Yekaterinburg",
                "Asia/Yerevan",
                "Atlantic/Azores",
                "Atlantic/Bermuda",
                "Atlantic/Canary",
                "Atlantic/Cape_Verde",
                "Atlantic/Faeroe",
                "Atlantic/Faroe",
                "Atlantic/Jan_Mayen",
                "Atlantic/Madeira",
                "Atlantic/Reykjavik",
                "Atlantic/South_Georgia",
                "Atlantic/St_Helena",
                "Atlantic/Stanley",
                "Australia/ACT",
                "Australia/Adelaide",
                "Australia/Brisbane",
                "Australia/Broken_Hill",
                "Australia/Canberra",
                "Australia/Currie",
                "Australia/Darwin",
                "Australia/Eucla",
                "Australia/Hobart",
                "Australia/LHI",
                "Australia/Lindeman",
                "Australia/Lord_Howe",
                "Australia/Melbourne",
                "Australia/NSW",
                "Australia/North",
                "Australia/Perth",
                "Australia/Queensland",
                "Australia/South",
                "Australia/Sydney",
                "Australia/Tasmania",
                "Australia/Victoria",
                "Australia/West",
                "Australia/Yancowinna",
                "Brazil/Acre",
                "Brazil/DeNoronha",
                "Brazil/East",
                "Brazil/West",
                "Canada/Atlantic",
                "Canada/Central",
                "Canada/Eastern",
                "Canada/Mountain",
                "Canada/Newfoundland",
                "Canada/Pacific",
                "Canada/Saskatchewan",
                "Canada/Yukon",
                "Chile/Continental",
                "Chile/EasterIsland",
                "Cuba",
                "Egypt",
                "Eire",
                "Europe/Amsterdam",
                "Europe/Andorra",
                "Europe/Astrakhan",
                "Europe/Athens",
                "Europe/Belfast",
                "Europe/Belgrade",
                "Europe/Berlin",
                "Europe/Bratislava",
                "Europe/Brussels",
                "Europe/Bucharest",
                "Europe/Budapest",
                "Europe/Busingen",
                "Europe/Chisinau",
                "Europe/Copenhagen",
                "Europe/Dublin",
                "Europe/Gibraltar",
                "Europe/Guernsey",
                "Europe/Helsinki",
                "Europe/Isle_of_Man",
                "Europe/Istanbul",
                "Europe/Jersey",
                "Europe/Kaliningrad",
                "Europe/Kiev",
                "Europe/Kirov",
                "Europe/Kyiv",
                "Europe/Lisbon",
                "Europe/Ljubljana",
                "Europe/London",
                "Europe/Luxembourg",
                "Europe/Madrid",
                "Europe/Malta",
                "Europe/Mariehamn",
                "Europe/Minsk",
                "Europe/Monaco",
                "Europe/Moscow",
                "Europe/Nicosia",
                "Europe/Oslo",
                "Europe/Paris",
                "Europe/Podgorica",
                "Europe/Prague",
                "Europe/Riga",
                "Europe/Rome",
                "Europe/Samara",
                "Europe/San_Marino",
                "Europe/Sarajevo",
                "Europe/Saratov",
                "Europe/Simferopol",
                "Europe/Skopje",
                "Europe/Sofia",
                "Europe/Stockholm",
                "Europe/Tallinn",
                "Europe/Tirane",
                "Europe/Tiraspol",
                "Europe/Ulyanovsk",
                "Europe/Uzhgorod",
                "Europe/Vaduz",
                "Europe/Vatican",
                "Europe/Vienna",
                "Europe/Vilnius",
                "Europe/Volgograd",
                "Europe/Warsaw",
                "Europe/Zagreb",
                "Europe/Zaporozhye",
                "Europe/Zurich",
                "GB",
                "GB-Eire",
                "GMT",
                "Hongkong",
                "Iceland",
                "Indian/Antananarivo",
                "Indian/Chagos",
                "Indian/Christmas",
                "Indian/Cocos",
                "Indian/Comoro",
                "Indian/Kerguelen",
                "Indian/Mahe",
                "Indian/Maldives",
                "Indian/Mauritius",
                "Indian/Mayotte",
                "Indian/Reunion",
                "Iran",
                "Israel",
                "Jamaica",
                "Japan",
                "Kwajalein",
                "Libya",
                "Mexico/BajaNorte",
                "Mexico/BajaSur",
                "Mexico/General",
                "NZ",
                "NZ-CHAT",
                "Navajo",
                "PRC",
                "Pacific/Apia",
                "Pacific/Auckland",
                "Pacific/Bougainville",
                "Pacific/Chatham",
                "Pacific/Chuuk",
                "Pacific/Easter",
                "Pacific/Efate",
                "Pacific/Enderbury",
                "Pacific/Fakaofo",
                "Pacific/Fiji",
                "Pacific/Funafuti",
                "Pacific/Galapagos",
                "Pacific/Gambier",
                "Pacific/Guadalcanal",
                "Pacific/Guam",
                "Pacific/Honolulu",
                "Pacific/Johnston",
                "Pacific/Kanton",
                "Pacific/Kiritimati",
                "Pacific/Kosrae",
                "Pacific/Kwajalein",
                "Pacific/Majuro",
                "Pacific/Marquesas",
                "Pacific/Midway",
                "Pacific/Nauru",
                "Pacific/Niue",
                "Pacific/Norfolk",
                "Pacific/Noumea",
                "Pacific/Pago_Pago",
                "Pacific/Palau",
                "Pacific/Pitcairn",
                "Pacific/Pohnpei",
                "Pacific/Ponape",
                "Pacific/Port_Moresby",
                "Pacific/Rarotonga",
                "Pacific/Saipan",
                "Pacific/Samoa",
                "Pacific/Tahiti",
                "Pacific/Tarawa",
                "Pacific/Tongatapu",
                "Pacific/Truk",
                "Pacific/Wake",
                "Pacific/Wallis",
                "Pacific/Yap",
                "Poland",
                "Portugal",
                "ROC",
                "ROK",
                "Singapore",
                "Turkey",
                "US/Alaska",
                "US/Aleutian",
                "US/Arizona",
                "US/Central",
                "US/East-Indiana",
                "US/Eastern",
                "US/Hawaii",
                "US/Indiana-Starke",
                "US/Michigan",
                "US/Mountain",
                "US/Pacific",
                "US/Samoa",
                "UTC",
                "W-SU"
              ],
              "in": "query",
              "name": "timezone",
              "type": "string",
              "x-go-name": "Timezone"
            },
            {
              "description": "Language code",
              "enum": [
                "ENG",
                "RUS",
                "LAV",
                "LIT"
              ],
              "in": "query",
              "name": "language_code",
              "type": "string",
              "x-go-name": "LanguageCode"
            },
            {
              "description": "Statement file type",
              "enum": [
                "pdf",
                "csv",
                "excel",
                "iso20022.053.001.02"
              ],
              "in": "query",
              "name": "statement_file_type",
              "required": true,
              "type": "string",
              "x-go-name": "StatementFileType"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "DownloadAccountStatementResponse",
              "schema": {
                "$ref": "#/definitions/DownloadAccountStatementResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Download account statement",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/external-id": {
        "patch": {
          "description": "Update account external ID. It is allowed to send empty external ID to remove the external ID from the account.",
          "operationId": "UpdateAccountExternalID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateAccountExternalIDRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateAccountExternalIDResponse",
              "schema": {
                "$ref": "#/definitions/UpdateAccountExternalIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update account external ID",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/history": {
        "get": {
          "description": "Get account history",
          "operationId": "GetAccountHistory",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (can be used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (can be used with from_record parameter in pair). \u003cbr\u003e\nIf not specified, default value 1000 is used.",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "Return only records not made by system",
              "in": "query",
              "name": "is_not_system",
              "type": "boolean",
              "x-go-name": "IsNotSystem"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountHistoryResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountHistoryResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account history",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/limits": {
        "patch": {
          "description": "Update account limits",
          "operationId": "UpdateAccountLimits",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateAccountLimitsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateAccountLimitsResponse",
              "schema": {
                "$ref": "#/definitions/UpdateAccountLimitsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update account limits",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/limits-usage": {
        "get": {
          "description": "Get account limits usage",
          "operationId": "GetAccountLimitsUsage",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountLimitsUsageResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountLimitsUsageResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account limits usage",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/name": {
        "patch": {
          "description": "Update account name. It is allowed to send empty name to remove the name from the account.",
          "operationId": "UpdateAccountName",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateAccountNameRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateAccountNameResponse",
              "schema": {
                "$ref": "#/definitions/UpdateAccountNameResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update account name",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/reopen": {
        "patch": {
          "description": "Reopen account",
          "operationId": "ReopenAccount",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            }
          ],
          "responses": {
            "200": {
              "description": "ReopenAccountResponse",
              "schema": {
                "$ref": "#/definitions/ReopenAccountResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Reopen account",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/statement": {
        "get": {
          "description": "It can contain account authorizations, transactions and adjustments, and can filter declined, reversed or cleared authorizations out",
          "operationId": "GetAccountStatement",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "IncludeAuthorizations defines whether to include authorizations to account statement or not.",
              "in": "query",
              "name": "include_authorizations",
              "type": "boolean",
              "x-go-name": "IncludeAuthorizations"
            },
            {
              "description": "IncludeTransactions defines whether to include transactions to account statement or not.",
              "in": "query",
              "name": "include_transactions",
              "type": "boolean",
              "x-go-name": "IncludeTransactions"
            },
            {
              "description": "IncludeAccountAdjustments defines whether to include account adjustments to account statement or not.",
              "in": "query",
              "name": "include_account_adjustments",
              "type": "boolean",
              "x-go-name": "IncludeAccountAdjustments"
            },
            {
              "description": "IncludeFees defines whether to include fees to account statement or not.",
              "in": "query",
              "name": "include_fees",
              "type": "boolean",
              "x-go-name": "IncludeFees"
            },
            {
              "description": "ExcludeDeclinedAuthorizations defines whether to exclude declined authorizations from account statement or not.",
              "in": "query",
              "name": "exclude_declined_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeDeclinedAuthorizations"
            },
            {
              "description": "ExcludeReversedAuthorizations defines whether to exclude reversed authorizations and reversals from account statement or not.",
              "in": "query",
              "name": "exclude_reversed_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeReversedAuthorizations"
            },
            {
              "description": "ExcludeClearedAuthorizations defines whether to exclude cleared authorizations from account statement or not.",
              "in": "query",
              "name": "exclude_cleared_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeClearedAuthorizations"
            },
            {
              "description": "ExcludePendingAuthorizations defines whether to exclude pending authorizations from account statement or not.",
              "in": "query",
              "name": "exclude_pending_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludePendingAuthorizations"
            },
            {
              "description": "ExcludeStatusAuthorizations defines whether to exclude status authorizations from account statement or not.",
              "in": "query",
              "name": "exclude_status_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeStatusAuthorizations"
            },
            {
              "description": "ExcludePendingFees defines whether to exclude pending fees from account statement or not.",
              "in": "query",
              "name": "exclude_pending_fees",
              "type": "boolean",
              "x-go-name": "ExcludePendingFees"
            },
            {
              "description": "ExcludeClearedFees defines whether to exclude cleared fees from account statement or not.",
              "in": "query",
              "name": "exclude_cleared_fees",
              "type": "boolean",
              "x-go-name": "ExcludeClearedFees"
            },
            {
              "description": "ExcludeDeclinedFees defines whether to exclude declined fees from account statement or not.",
              "in": "query",
              "name": "exclude_declined_fees",
              "type": "boolean",
              "x-go-name": "ExcludeDeclinedFees"
            },
            {
              "description": "ExcludeFXFees defines whether to exclude FX fees from account statement or not.",
              "in": "query",
              "name": "exclude_fx_fees",
              "type": "boolean",
              "x-go-name": "ExcludeFXFees"
            },
            {
              "description": "MergeFees defines whether to merge fees per authorization or not.",
              "in": "query",
              "name": "merge_fees",
              "type": "boolean",
              "x-go-name": "MergeFees"
            },
            {
              "description": "Search keyword",
              "in": "query",
              "name": "search_keyword",
              "type": "string",
              "x-go-name": "SearchKeyword"
            },
            {
              "description": "Statuses **repeated**",
              "enum": [
                "Completed",
                "Pending",
                "Canceled"
              ],
              "in": "query",
              "name": "statuses",
              "type": "string",
              "x-go-name": "Statuses"
            },
            {
              "description": "Merchant category code **repeated**",
              "in": "query",
              "name": "merchant_category_codes",
              "type": "string",
              "x-go-name": "MerchantCategoryCodes"
            },
            {
              "description": "Merchant category types **repeated**",
              "enum": [
                "Groceries",
                "Shopping",
                "Restaurants",
                "Transport",
                "Travel",
                "Entertainment",
                "Health",
                "Services",
                "Utilities",
                "Cash"
              ],
              "in": "query",
              "name": "merchant_category_types",
              "type": "string",
              "x-go-name": "MerchantCategoryTypes"
            },
            {
              "default": "desc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "default": "date",
              "description": "Field to sort by",
              "enum": [
                "date",
                "type",
                "group",
                "merchant_name",
                "transaction_amount",
                "account_amount",
                "response",
                "status"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "description": "Field to filter account adjustments by type when **include_account_adjustments** is true",
              "enum": [
                "Adjustment",
                "Cashback",
                "IncomingSEPAPayment"
              ],
              "in": "query",
              "name": "adjustment_type",
              "type": "string",
              "x-go-name": "AdjustmentType"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountStatementResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountStatementResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account statement",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/statement-by-cursor": {
        "get": {
          "description": "It can contain account authorizations, transactions and adjustments, and can filter declined, reversed or cleared authorizations out",
          "operationId": "GetAccountStatementByCursor",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "description": "Cursor is an object that stores the state of the last requested data in base64 format so that newer or older data can be requested.\nReceived in response to \"request by date\" or \"request by cursor\" (used with the move_forward parameter in pairs)",
              "in": "query",
              "name": "cursor",
              "required": true,
              "type": "string",
              "x-go-name": "Cursor"
            },
            {
              "default": false,
              "description": "MoveForward is used as an auxiliary parameter to select newer or older data from the Cursor object.\nIf the default value is \"false\", the query returns older data (used with cursor parameter in pair)",
              "in": "query",
              "name": "move_forward",
              "type": "boolean",
              "x-go-name": "MoveForward"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountStatementByCursorResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountStatementByCursorResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account statement by cursor",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/statement-by-date": {
        "get": {
          "description": "It can contain account authorizations, transactions and adjustments, and can filter declined, reversed or cleared authorizations out",
          "operationId": "GetAccountStatementByDate",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_date parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with records_count parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "required": true,
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "IncludeAuthorizations defines whether to include authorizations to account statement or not.",
              "in": "query",
              "name": "include_authorizations",
              "type": "boolean",
              "x-go-name": "IncludeAuthorizations"
            },
            {
              "description": "IncludeTransactions defines whether to include transactions to account statement or not.",
              "in": "query",
              "name": "include_transactions",
              "type": "boolean",
              "x-go-name": "IncludeTransactions"
            },
            {
              "description": "IncludeAccountAdjustments defines whether to include account adjustments to account statement or not.",
              "in": "query",
              "name": "include_account_adjustments",
              "type": "boolean",
              "x-go-name": "IncludeAccountAdjustments"
            },
            {
              "description": "IncludeFees defines whether to include fees to account statement or not.",
              "in": "query",
              "name": "include_fees",
              "type": "boolean",
              "x-go-name": "IncludeFees"
            },
            {
              "description": "ExcludeDeclinedAuthorizations defines whether to exclude declined authorizations from account statement or not.",
              "in": "query",
              "name": "exclude_declined_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeDeclinedAuthorizations"
            },
            {
              "description": "ExcludeReversedAuthorizations defines whether to exclude reversed authorizations and reversals from account statement or not.",
              "in": "query",
              "name": "exclude_reversed_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeReversedAuthorizations"
            },
            {
              "description": "ExcludeClearedAuthorizations defines whether to exclude cleared authorizations from account statement or not.",
              "in": "query",
              "name": "exclude_cleared_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeClearedAuthorizations"
            },
            {
              "description": "ExcludePendingAuthorizations defines whether to exclude pending authorizations from account statement or not.",
              "in": "query",
              "name": "exclude_pending_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludePendingAuthorizations"
            },
            {
              "description": "ExcludeStatusAuthorizations defines whether to exclude status authorizations from account statement or not.",
              "in": "query",
              "name": "exclude_status_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeStatusAuthorizations"
            },
            {
              "description": "ExcludePendingFees defines whether to exclude pending fees from account statement or not.",
              "in": "query",
              "name": "exclude_pending_fees",
              "type": "boolean",
              "x-go-name": "ExcludePendingFees"
            },
            {
              "description": "ExcludeClearedFees defines whether to exclude cleared fees from account statement or not.",
              "in": "query",
              "name": "exclude_cleared_fees",
              "type": "boolean",
              "x-go-name": "ExcludeClearedFees"
            },
            {
              "description": "ExcludeDeclinedFees defines whether to exclude declined fees from account statement or not.",
              "in": "query",
              "name": "exclude_declined_fees",
              "type": "boolean",
              "x-go-name": "ExcludeDeclinedFees"
            },
            {
              "description": "ExcludeFXFees defines whether to exclude FX fees from account statement or not.",
              "in": "query",
              "name": "exclude_fx_fees",
              "type": "boolean",
              "x-go-name": "ExcludeFXFees"
            },
            {
              "description": "MergeFees defines whether to merge fees per authorization or not.",
              "in": "query",
              "name": "merge_fees",
              "type": "boolean",
              "x-go-name": "MergeFees"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountStatementByDateResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountStatementByDateResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account statement by date",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/top-up-details": {
        "put": {
          "description": "Update account top up details as IBAN, Swift Code and Receiver Name, etc...",
          "operationId": "UpdateAccountTopUpDetails",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateAccountTopUpDetailsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateAccountTopUpDetailsResponse",
              "schema": {
                "$ref": "#/definitions/UpdateAccountTopUpDetailsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update account top up details",
          "tags": [
            "Account"
          ]
        }
      },
      "/v1/accounts/{account_id}/transactions": {
        "get": {
          "description": "Get account transactions",
          "operationId": "GetAccountTransactions",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountTransactionsResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountTransactionsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get account transactions",
          "tags": [
            "Transactions"
          ]
        }
      },
      "/v1/authorizations/{authorization_id}": {
        "get": {
          "description": "Get authorization information",
          "operationId": "GetAuthorization",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Authorization ID",
              "format": "uuid4",
              "in": "path",
              "name": "authorization_id",
              "required": true,
              "type": "string",
              "x-go-name": "AuthorizationID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAuthorizationResponse",
              "schema": {
                "$ref": "#/definitions/GetAuthorizationResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get authorization",
          "tags": [
            "Authorizations"
          ]
        }
      },
      "/v1/authorizations/{authorization_id}/additional-info": {
        "get": {
          "description": "Get authorization additional info",
          "operationId": "GetAuthorizationAdditionalInfo",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Authorization ID",
              "format": "uuid4",
              "in": "path",
              "name": "authorization_id",
              "required": true,
              "type": "string",
              "x-go-name": "AuthorizationID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAuthorizationAdditionalInfoResponse",
              "schema": {
                "$ref": "#/definitions/GetAuthorizationAdditionalInfoResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get authorization additional info",
          "tags": [
            "Authorizations"
          ]
        }
      },
      "/v1/authorizations/{authorization_id}/fees": {
        "get": {
          "description": "Get fees by authorization ID",
          "operationId": "GetFeesByAuthorizationID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Authorization ID",
              "format": "uuid4",
              "in": "path",
              "name": "authorization_id",
              "required": true,
              "type": "string",
              "x-go-name": "AuthorizationID"
            },
            {
              "description": "Fee types is a **repeated** query parameter to specify fee types to return.",
              "in": "query",
              "name": "fee_types",
              "type": "string",
              "x-go-name": "FeeTypes"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "FeesByAuthorizationIDResponse",
              "schema": {
                "$ref": "#/definitions/FeesByAuthorizationIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get fees by authorization ID",
          "tags": [
            "Fee"
          ]
        }
      },
      "/v1/batch/cards/block": {
        "patch": {
          "description": "Block multiple cards at the same time",
          "operationId": "BlockCardsBatch",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/BlockCardsBatchRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "BlockCardsBatchResponse",
              "schema": {
                "$ref": "#/definitions/BlockCardsBatchResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Block cards batch",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/batch/cards/close": {
        "patch": {
          "description": "Close multiple cards at the same time",
          "operationId": "CloseCardsBatch",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CloseCardsBatchRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "CloseCardsBatchResponse",
              "schema": {
                "$ref": "#/definitions/CloseCardsBatchResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Close cards batch",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/batch/cards/fees": {
        "patch": {
          "description": "Update card fees batch",
          "operationId": "UpdateCardFeesBatch",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardFeesBatchRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCardFeesBatchResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCardFeesBatchResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update card fees batch",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/batch/cards/replace": {
        "patch": {
          "description": "Replaces multiple cards using existing card data.",
          "operationId": "ReplaceCardsBatch",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReplaceCardsBatchRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "ReplaceCardsBatchResponse",
              "schema": {
                "$ref": "#/definitions/ReplaceCardsBatchResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Replace cards batch",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/batch/cards/unblock": {
        "patch": {
          "description": "Unblock multiple cards at the same time",
          "operationId": "UnblockCardsBatch",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UnblockCardsBatchRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UnblockCardsBatchResponse",
              "schema": {
                "$ref": "#/definitions/UnblockCardsBatchResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Unblock cards batch",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/batch/persons/deactivate": {
        "patch": {
          "description": "Deactivate multiple persons at the same time",
          "operationId": "DeactivatePersonsBatch",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DeactivatePersonsBatchRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "DeactivatePersonsBatchResponse",
              "schema": {
                "$ref": "#/definitions/DeactivatePersonsBatchResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Deactivate persons batch",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/batch/persons/{person_id}/additional-infos": {
        "post": {
          "description": "Create person additional info batch",
          "operationId": "CreatePersonAdditionalInfoBatch",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreatePersonAdditionalInfoBatchRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreatePersonAdditionalInfoBatchResponse",
              "schema": {
                "$ref": "#/definitions/CreatePersonAdditionalInfoBatchResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create person additional info batch",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/batch/persons/{person_id}/additional-infos/delete": {
        "post": {
          "description": "Delete person additional info batch",
          "operationId": "DeletePersonAdditionalInfoBatch",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DeletePersonAdditionalInfoBatchRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete person additional info batch",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/card-by-reference-number/{reference_number}": {
        "get": {
          "description": "Get card by reference number",
          "operationId": "GetCardByReferenceNumber",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Reference number",
              "in": "path",
              "name": "reference_number",
              "required": true,
              "type": "string",
              "x-go-name": "ReferenceNumber"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardByReferenceNumberResponse",
              "schema": {
                "$ref": "#/definitions/GetCardByReferenceNumberResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card by reference number",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/card-top-up-fees": {
        "get": {
          "description": "Get fee amount",
          "operationId": "GetCardTopUpFees",
          "responses": {
            "201": {
              "description": "GetCardTopUpFeesResponse",
              "schema": {
                "$ref": "#/definitions/GetCardTopUpFeesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get fee amount",
          "tags": [
            "Fee"
          ]
        }
      },
      "/v1/cards": {
        "get": {
          "description": "Search cards. At least one search parameter is required",
          "operationId": "SearchCards",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Masked card number to search",
              "in": "query",
              "name": "masked_card_number",
              "type": "string",
              "x-go-name": "MaskedCardNumber"
            },
            {
              "description": "Reference number to search",
              "in": "query",
              "name": "reference_number",
              "type": "string",
              "x-go-name": "ReferenceNumber"
            },
            {
              "description": "External ID",
              "in": "query",
              "name": "external_id",
              "type": "string",
              "x-go-name": "ExternalID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "default": "embossing_name",
              "description": "OrderField is **repeated** query parameter to specify cards order by.",
              "enum": [
                "embossing_name",
                "masked_card_number",
                "status",
                "type",
                "personalization_product_code",
                "expiry_date",
                "updated_at",
                "block_type"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            }
          ],
          "responses": {
            "200": {
              "description": "SearchCardsResponse",
              "schema": {
                "$ref": "#/definitions/SearchCardsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Search cards",
          "tags": [
            "Card"
          ]
        },
        "post": {
          "description": "Create card",
          "operationId": "CreateCard",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "The flag specifies whether to send the event notification to a predefined client server.\nIf set to true, minimal webhook parameters (URL, basic authentication credentials) must be configured in the Wallester system to successfully send the event.\nIf set to false, no event notification will be sent even when event notifications are enabled by default.",
              "in": "query",
              "name": "send_notification",
              "type": "boolean",
              "x-go-name": "SendNotification"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateCardRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreateCardResponse",
              "schema": {
                "$ref": "#/definitions/CreateCardResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create card",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards-by-external-id/{external_id}": {
        "get": {
          "description": "Get card by external ID",
          "operationId": "GetCardByExternalID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "External ID",
              "in": "path",
              "name": "external_id",
              "required": true,
              "type": "string",
              "x-go-name": "ExternalID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardByExternalIDResponse",
              "schema": {
                "$ref": "#/definitions/GetCardByExternalIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card by external ID",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards-by-last-digits/{last_four_digits}": {
        "get": {
          "description": "Get cards by last 4 digits",
          "operationId": "GetCardsByLastFourDigits",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Last 4 Digits",
              "in": "path",
              "name": "last_four_digits",
              "required": true,
              "type": "string",
              "x-go-name": "LastFourDigits"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardsByLastFourDigitsResponse",
              "schema": {
                "$ref": "#/definitions/GetCardsByLastFourDigitsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get cards by last 4 digits",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards-dispatch-methods": {
        "get": {
          "description": "Cards dispatch methods",
          "operationId": "CardsDispatchMethods",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Country code in ISO 3166-1 Alpha-3 code standard.",
              "enum": [
                "AFG",
                "ALA",
                "ALB",
                "DZA",
                "ASM",
                "AND",
                "AGO",
                "AIA",
                "ATA",
                "ATG",
                "ARG",
                "ARM",
                "ABW",
                "AUS",
                "AUT",
                "AZE",
                "BHS",
                "BHR",
                "BGD",
                "BRB",
                "BLR",
                "BEL",
                "BLZ",
                "BEN",
                "BMU",
                "BTN",
                "BOL",
                "BES",
                "BIH",
                "BWA",
                "BVT",
                "BRA",
                "IOT",
                "BRN",
                "BGR",
                "BFA",
                "BDI",
                "CPV",
                "KHM",
                "CMR",
                "CAN",
                "CYM",
                "CAF",
                "TCD",
                "CHL",
                "CHN",
                "CXR",
                "CCK",
                "COL",
                "COM",
                "COG",
                "COD",
                "COK",
                "CRI",
                "CIV",
                "HRV",
                "CUB",
                "CUW",
                "CYP",
                "CZE",
                "DNK",
                "DJI",
                "DMA",
                "DOM",
                "ECU",
                "EGY",
                "SLV",
                "GNQ",
                "ERI",
                "EST",
                "ETH",
                "FLK",
                "FRO",
                "FJI",
                "FIN",
                "FRA",
                "GUF",
                "PYF",
                "ATF",
                "GAB",
                "GMB",
                "GEO",
                "DEU",
                "GHA",
                "GIB",
                "GRC",
                "GRL",
                "GRD",
                "GLP",
                "GUM",
                "GTM",
                "GGY",
                "GIN",
                "GNB",
                "GUY",
                "HTI",
                "HMD",
                "VAT",
                "HND",
                "HKG",
                "HUN",
                "ISL",
                "IND",
                "IDN",
                "IRN",
                "IRQ",
                "IRL",
                "IMN",
                "ISR",
                "ITA",
                "JAM",
                "JPN",
                "JEY",
                "JOR",
                "KAZ",
                "KEN",
                "KIR",
                "PRK",
                "KOR",
                "KWT",
                "KGZ",
                "LAO",
                "LVA",
                "LBN",
                "LSO",
                "LBR",
                "LBY",
                "LIE",
                "LTU",
                "LUX",
                "MAC",
                "MKD",
                "MDG",
                "MWI",
                "MYS",
                "MDV",
                "MLI",
                "MLT",
                "MHL",
                "MTQ",
                "MRT",
                "MUS",
                "MYT",
                "MEX",
                "FSM",
                "MDA",
                "MCO",
                "MNG",
                "MNE",
                "MSR",
                "MAR",
                "MOZ",
                "MMR",
                "NAM",
                "NRU",
                "NPL",
                "NLD",
                "NCL",
                "NZL",
                "NIC",
                "NER",
                "NGA",
                "NIU",
                "NFK",
                "MNP",
                "NOR",
                "OMN",
                "PAK",
                "PLW",
                "PSE",
                "PAN",
                "PNG",
                "PRY",
                "PER",
                "PHL",
                "PCN",
                "POL",
                "PRT",
                "PRI",
                "QAT",
                "REU",
                "ROU",
                "RUS",
                "RWA",
                "BLM",
                "SHN",
                "KNA",
                "LCA",
                "MAF",
                "SPM",
                "VCT",
                "WSM",
                "SMR",
                "STP",
                "SAU",
                "SEN",
                "SRB",
                "SYC",
                "SLE",
                "SGP",
                "SXM",
                "SVK",
                "SVN",
                "SLB",
                "SOM",
                "ZAF",
                "SGS",
                "SSD",
                "ESP",
                "LKA",
                "SDN",
                "SUR",
                "SJM",
                "SWZ",
                "SWE",
                "CHE",
                "SYR",
                "TWN",
                "TJK",
                "TZA",
                "THA",
                "TLS",
                "TGO",
                "TKL",
                "TON",
                "TTO",
                "TUN",
                "TUR",
                "TKM",
                "TCA",
                "TUV",
                "UGA",
                "UKR",
                "ARE",
                "GBR",
                "USA",
                "UMI",
                "URY",
                "UZB",
                "VUT",
                "VEN",
                "VNM",
                "VGB",
                "VIR",
                "WLF",
                "ESH",
                "YEM",
                "ZMB",
                "ZWE",
                "UNK",
                "XKX",
                "ANT"
              ],
              "in": "query",
              "name": "country_code",
              "required": true,
              "type": "string",
              "x-go-name": "CountryCode"
            }
          ],
          "responses": {
            "200": {
              "description": "CardsDispatchMethodsResponse",
              "schema": {
                "$ref": "#/definitions/CardsDispatchMethodsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Cards dispatch methods",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/fee-waivers": {
        "put": {
          "description": "Update card fee waivers",
          "operationId": "UpdateCardFeeWaivers",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardFeeWaiversRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCardFeeWaiversResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCardFeeWaiversResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update card fee waivers",
          "tags": [
            "Fee"
          ]
        }
      },
      "/v1/cards/{card_id}": {
        "get": {
          "description": "Get card information",
          "operationId": "GetCard",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardResponse",
              "schema": {
                "$ref": "#/definitions/GetCardResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/3d-secure": {
        "patch": {
          "description": "Update 3D secure settings. It is allowed to update either all or specific fields only (e.g. only mobile or password). Fields having empty values will not be updated.\n\nAt least one of the fields is required: mobile, email or out_of_band_enabled with `true` value.",
          "operationId": "Update3DSecureSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Update3DSecureSettingsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "Update3DSecureSettingsResponse",
              "schema": {
                "$ref": "#/definitions/Update3DSecureSettingsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update 3D secure settings",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/3d-secure/enrol": {
        "patch": {
          "description": "Enrol card for 3D secure. Must only be used with a specific provider that was agreed during Project Implementation.\nContact your Implementation Manager if unsure whether it must be used or not.",
          "operationId": "EnrolCardFor3DSecure",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            }
          ],
          "responses": {
            "200": {
              "description": "EnrolCardFor3DSecureResponse",
              "schema": {
                "$ref": "#/definitions/EnrolCardFor3DSecureResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Enrol card for 3D secure",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/3d-secure/unenrol": {
        "patch": {
          "description": "Unenrol card from 3D secure. Must only be used with a specific provider that was agreed during Project Implementation.\nContact your Implementation Manager if unsure whether it must be used or not.",
          "operationId": "UnenrolCardFrom3DSecure",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            }
          ],
          "responses": {
            "200": {
              "description": "UnenrolCardFrom3DSecureResponse",
              "schema": {
                "$ref": "#/definitions/UnenrolCardFrom3DSecureResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Unenrol card from 3D secure",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/3ds-password": {
        "put": {
          "description": "Send card 3DS password directly to cardholder by SMS. Wallester configures SMS templates by multiple languages (please contact a Wallester representative if something needs to be adjusted with the templates).",
          "operationId": "Remind3DSPassword",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            }
          ],
          "responses": {
            "200": {
              "description": "CardholderReminderResponse",
              "schema": {
                "$ref": "#/definitions/CardholderReminderResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Remind 3DS password",
          "tags": [
            "Reminders"
          ]
        }
      },
      "/v1/cards/{card_id}/activate": {
        "patch": {
          "description": "Activate card. Card 3D Secure settings are required to activate card if product has 3D Secure enabled.",
          "operationId": "ActivateCard",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            }
          ],
          "responses": {
            "200": {
              "description": "ActivateCardResponse",
              "schema": {
                "$ref": "#/definitions/ActivateCardResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Activate card",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/activate-by-cvv": {
        "patch": {
          "description": "Activate card by CVV. Card 3D Secure settings are required to activate card if product has 3D Secure enabled.",
          "operationId": "ActivateCardByCVV",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ActivateCardByCVVRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "ActivateCardByCVVResponse",
              "schema": {
                "$ref": "#/definitions/ActivateCardByCVVResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Activate card by CVV",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/authorizations": {
        "get": {
          "description": "Get card blocking authorizations",
          "operationId": "GetCardAuthorizations",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardAuthorizationsResponse",
              "schema": {
                "$ref": "#/definitions/GetCardAuthorizationsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card authorizations",
          "tags": [
            "Authorizations"
          ]
        }
      },
      "/v1/cards/{card_id}/block": {
        "patch": {
          "description": "Block card",
          "operationId": "BlockCard",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/BlockCardRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "BlockCardResponse",
              "schema": {
                "$ref": "#/definitions/BlockCardResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Block card",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/close": {
        "delete": {
          "description": "Closes card with default reason ClosedByClient",
          "operationId": "CloseCard",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            }
          ],
          "responses": {
            "200": {
              "description": "CloseCardResponse",
              "schema": {
                "$ref": "#/definitions/CloseCardResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Close card",
          "tags": [
            "Card"
          ]
        },
        "patch": {
          "description": "Close card",
          "operationId": "CloseCardPatch",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CloseCardRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "CloseCardResponse",
              "schema": {
                "$ref": "#/definitions/CloseCardResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Close card",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/delivery-address": {
        "patch": {
          "description": "Update card delivery address. It is allowed to update either all or specific fields only. Fields having empty values will not be updated.\nCard delivery address can be updated only if card status is Created and card has not been processed for personalization (processed_at = null).\nPhone is required if dispatch method is DPDExpress, DHLGlobalMail, DHLGlobalMailTracked or DHLExpress and phone was not initially set.",
          "operationId": "UpdateCardDeliveryAddress",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardDeliveryAddressRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCardDeliveryAddressResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCardDeliveryAddressResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update card delivery address",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/download-statement": {
        "get": {
          "description": "Download card statement",
          "operationId": "DownloadCardStatement",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "required": true,
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "required": true,
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "If provided, the date in statement will be in this timezone. If not provided, the timezone will be taken from the user.\nAll timezones could be received from the /v1/timezones endpoint.",
              "enum": [
                "Africa/Abidjan",
                "Africa/Accra",
                "Africa/Addis_Ababa",
                "Africa/Algiers",
                "Africa/Asmara",
                "Africa/Asmera",
                "Africa/Bamako",
                "Africa/Bangui",
                "Africa/Banjul",
                "Africa/Bissau",
                "Africa/Blantyre",
                "Africa/Brazzaville",
                "Africa/Bujumbura",
                "Africa/Cairo",
                "Africa/Casablanca",
                "Africa/Ceuta",
                "Africa/Conakry",
                "Africa/Dakar",
                "Africa/Dar_es_Salaam",
                "Africa/Djibouti",
                "Africa/Douala",
                "Africa/El_Aaiun",
                "Africa/Freetown",
                "Africa/Gaborone",
                "Africa/Harare",
                "Africa/Johannesburg",
                "Africa/Juba",
                "Africa/Kampala",
                "Africa/Khartoum",
                "Africa/Kigali",
                "Africa/Kinshasa",
                "Africa/Lagos",
                "Africa/Libreville",
                "Africa/Lome",
                "Africa/Luanda",
                "Africa/Lubumbashi",
                "Africa/Lusaka",
                "Africa/Malabo",
                "Africa/Maputo",
                "Africa/Maseru",
                "Africa/Mbabane",
                "Africa/Mogadishu",
                "Africa/Monrovia",
                "Africa/Nairobi",
                "Africa/Ndjamena",
                "Africa/Niamey",
                "Africa/Nouakchott",
                "Africa/Ouagadougou",
                "Africa/Porto-Novo",
                "Africa/Sao_Tome",
                "Africa/Timbuktu",
                "Africa/Tripoli",
                "Africa/Tunis",
                "Africa/Windhoek",
                "America/Adak",
                "America/Anchorage",
                "America/Anguilla",
                "America/Antigua",
                "America/Araguaina",
                "America/Argentina/Buenos_Aires",
                "America/Argentina/Catamarca",
                "America/Argentina/ComodRivadavia",
                "America/Argentina/Cordoba",
                "America/Argentina/Jujuy",
                "America/Argentina/La_Rioja",
                "America/Argentina/Mendoza",
                "America/Argentina/Rio_Gallegos",
                "America/Argentina/Salta",
                "America/Argentina/San_Juan",
                "America/Argentina/San_Luis",
                "America/Argentina/Tucuman",
                "America/Argentina/Ushuaia",
                "America/Aruba",
                "America/Asuncion",
                "America/Atikokan",
                "America/Atka",
                "America/Bahia",
                "America/Bahia_Banderas",
                "America/Barbados",
                "America/Belem",
                "America/Belize",
                "America/Blanc-Sablon",
                "America/Boa_Vista",
                "America/Bogota",
                "America/Boise",
                "America/Buenos_Aires",
                "America/Cambridge_Bay",
                "America/Campo_Grande",
                "America/Cancun",
                "America/Caracas",
                "America/Catamarca",
                "America/Cayenne",
                "America/Cayman",
                "America/Chicago",
                "America/Chihuahua",
                "America/Ciudad_Juarez",
                "America/Coral_Harbour",
                "America/Cordoba",
                "America/Costa_Rica",
                "America/Creston",
                "America/Cuiaba",
                "America/Curacao",
                "America/Danmarkshavn",
                "America/Dawson",
                "America/Dawson_Creek",
                "America/Denver",
                "America/Detroit",
                "America/Dominica",
                "America/Edmonton",
                "America/Eirunepe",
                "America/El_Salvador",
                "America/Ensenada",
                "America/Fort_Nelson",
                "America/Fort_Wayne",
                "America/Fortaleza",
                "America/Glace_Bay",
                "America/Godthab",
                "America/Goose_Bay",
                "America/Grand_Turk",
                "America/Grenada",
                "America/Guadeloupe",
                "America/Guatemala",
                "America/Guayaquil",
                "America/Guyana",
                "America/Halifax",
                "America/Havana",
                "America/Hermosillo",
                "America/Indiana/Indianapolis",
                "America/Indiana/Knox",
                "America/Indiana/Marengo",
                "America/Indiana/Petersburg",
                "America/Indiana/Tell_City",
                "America/Indiana/Vevay",
                "America/Indiana/Vincennes",
                "America/Indiana/Winamac",
                "America/Indianapolis",
                "America/Inuvik",
                "America/Iqaluit",
                "America/Jamaica",
                "America/Jujuy",
                "America/Juneau",
                "America/Kentucky/Louisville",
                "America/Kentucky/Monticello",
                "America/Knox_IN",
                "America/Kralendijk",
                "America/La_Paz",
                "America/Lima",
                "America/Los_Angeles",
                "America/Louisville",
                "America/Lower_Princes",
                "America/Maceio",
                "America/Managua",
                "America/Manaus",
                "America/Marigot",
                "America/Martinique",
                "America/Matamoros",
                "America/Mazatlan",
                "America/Mendoza",
                "America/Menominee",
                "America/Merida",
                "America/Metlakatla",
                "America/Mexico_City",
                "America/Miquelon",
                "America/Moncton",
                "America/Monterrey",
                "America/Montevideo",
                "America/Montreal",
                "America/Montserrat",
                "America/Nassau",
                "America/New_York",
                "America/Nipigon",
                "America/Nome",
                "America/Noronha",
                "America/North_Dakota/Beulah",
                "America/North_Dakota/Center",
                "America/North_Dakota/New_Salem",
                "America/Nuuk",
                "America/Ojinaga",
                "America/Panama",
                "America/Pangnirtung",
                "America/Paramaribo",
                "America/Phoenix",
                "America/Port-au-Prince",
                "America/Port_of_Spain",
                "America/Porto_Acre",
                "America/Porto_Velho",
                "America/Puerto_Rico",
                "America/Punta_Arenas",
                "America/Rainy_River",
                "America/Rankin_Inlet",
                "America/Recife",
                "America/Regina",
                "America/Resolute",
                "America/Rio_Branco",
                "America/Rosario",
                "America/Santa_Isabel",
                "America/Santarem",
                "America/Santiago",
                "America/Santo_Domingo",
                "America/Sao_Paulo",
                "America/Scoresbysund",
                "America/Shiprock",
                "America/Sitka",
                "America/St_Barthelemy",
                "America/St_Johns",
                "America/St_Kitts",
                "America/St_Lucia",
                "America/St_Thomas",
                "America/St_Vincent",
                "America/Swift_Current",
                "America/Tegucigalpa",
                "America/Thule",
                "America/Thunder_Bay",
                "America/Tijuana",
                "America/Toronto",
                "America/Tortola",
                "America/Vancouver",
                "America/Virgin",
                "America/Whitehorse",
                "America/Winnipeg",
                "America/Yakutat",
                "America/Yellowknife",
                "Antarctica/Casey",
                "Antarctica/Davis",
                "Antarctica/DumontDUrville",
                "Antarctica/Macquarie",
                "Antarctica/Mawson",
                "Antarctica/McMurdo",
                "Antarctica/Palmer",
                "Antarctica/Rothera",
                "Antarctica/South_Pole",
                "Antarctica/Syowa",
                "Antarctica/Troll",
                "Antarctica/Vostok",
                "Arctic/Longyearbyen",
                "Asia/Aden",
                "Asia/Almaty",
                "Asia/Amman",
                "Asia/Anadyr",
                "Asia/Aqtau",
                "Asia/Aqtobe",
                "Asia/Ashgabat",
                "Asia/Ashkhabad",
                "Asia/Atyrau",
                "Asia/Baghdad",
                "Asia/Bahrain",
                "Asia/Baku",
                "Asia/Bangkok",
                "Asia/Barnaul",
                "Asia/Beirut",
                "Asia/Bishkek",
                "Asia/Brunei",
                "Asia/Calcutta",
                "Asia/Chita",
                "Asia/Choibalsan",
                "Asia/Chongqing",
                "Asia/Chungking",
                "Asia/Colombo",
                "Asia/Dacca",
                "Asia/Damascus",
                "Asia/Dhaka",
                "Asia/Dili",
                "Asia/Dubai",
                "Asia/Dushanbe",
                "Asia/Famagusta",
                "Asia/Gaza",
                "Asia/Harbin",
                "Asia/Hebron",
                "Asia/Ho_Chi_Minh",
                "Asia/Hong_Kong",
                "Asia/Hovd",
                "Asia/Irkutsk",
                "Asia/Istanbul",
                "Asia/Jakarta",
                "Asia/Jayapura",
                "Asia/Jerusalem",
                "Asia/Kabul",
                "Asia/Kamchatka",
                "Asia/Karachi",
                "Asia/Kashgar",
                "Asia/Kathmandu",
                "Asia/Katmandu",
                "Asia/Khandyga",
                "Asia/Kolkata",
                "Asia/Krasnoyarsk",
                "Asia/Kuala_Lumpur",
                "Asia/Kuching",
                "Asia/Kuwait",
                "Asia/Macao",
                "Asia/Macau",
                "Asia/Magadan",
                "Asia/Makassar",
                "Asia/Manila",
                "Asia/Muscat",
                "Asia/Nicosia",
                "Asia/Novokuznetsk",
                "Asia/Novosibirsk",
                "Asia/Omsk",
                "Asia/Oral",
                "Asia/Phnom_Penh",
                "Asia/Pontianak",
                "Asia/Pyongyang",
                "Asia/Qatar",
                "Asia/Qostanay",
                "Asia/Qyzylorda",
                "Asia/Rangoon",
                "Asia/Riyadh",
                "Asia/Saigon",
                "Asia/Sakhalin",
                "Asia/Samarkand",
                "Asia/Seoul",
                "Asia/Shanghai",
                "Asia/Singapore",
                "Asia/Srednekolymsk",
                "Asia/Taipei",
                "Asia/Tashkent",
                "Asia/Tbilisi",
                "Asia/Tehran",
                "Asia/Tel_Aviv",
                "Asia/Thimbu",
                "Asia/Thimphu",
                "Asia/Tokyo",
                "Asia/Tomsk",
                "Asia/Ujung_Pandang",
                "Asia/Ulaanbaatar",
                "Asia/Ulan_Bator",
                "Asia/Urumqi",
                "Asia/Ust-Nera",
                "Asia/Vientiane",
                "Asia/Vladivostok",
                "Asia/Yakutsk",
                "Asia/Yangon",
                "Asia/Yekaterinburg",
                "Asia/Yerevan",
                "Atlantic/Azores",
                "Atlantic/Bermuda",
                "Atlantic/Canary",
                "Atlantic/Cape_Verde",
                "Atlantic/Faeroe",
                "Atlantic/Faroe",
                "Atlantic/Jan_Mayen",
                "Atlantic/Madeira",
                "Atlantic/Reykjavik",
                "Atlantic/South_Georgia",
                "Atlantic/St_Helena",
                "Atlantic/Stanley",
                "Australia/ACT",
                "Australia/Adelaide",
                "Australia/Brisbane",
                "Australia/Broken_Hill",
                "Australia/Canberra",
                "Australia/Currie",
                "Australia/Darwin",
                "Australia/Eucla",
                "Australia/Hobart",
                "Australia/LHI",
                "Australia/Lindeman",
                "Australia/Lord_Howe",
                "Australia/Melbourne",
                "Australia/NSW",
                "Australia/North",
                "Australia/Perth",
                "Australia/Queensland",
                "Australia/South",
                "Australia/Sydney",
                "Australia/Tasmania",
                "Australia/Victoria",
                "Australia/West",
                "Australia/Yancowinna",
                "Brazil/Acre",
                "Brazil/DeNoronha",
                "Brazil/East",
                "Brazil/West",
                "Canada/Atlantic",
                "Canada/Central",
                "Canada/Eastern",
                "Canada/Mountain",
                "Canada/Newfoundland",
                "Canada/Pacific",
                "Canada/Saskatchewan",
                "Canada/Yukon",
                "Chile/Continental",
                "Chile/EasterIsland",
                "Cuba",
                "Egypt",
                "Eire",
                "Europe/Amsterdam",
                "Europe/Andorra",
                "Europe/Astrakhan",
                "Europe/Athens",
                "Europe/Belfast",
                "Europe/Belgrade",
                "Europe/Berlin",
                "Europe/Bratislava",
                "Europe/Brussels",
                "Europe/Bucharest",
                "Europe/Budapest",
                "Europe/Busingen",
                "Europe/Chisinau",
                "Europe/Copenhagen",
                "Europe/Dublin",
                "Europe/Gibraltar",
                "Europe/Guernsey",
                "Europe/Helsinki",
                "Europe/Isle_of_Man",
                "Europe/Istanbul",
                "Europe/Jersey",
                "Europe/Kaliningrad",
                "Europe/Kiev",
                "Europe/Kirov",
                "Europe/Kyiv",
                "Europe/Lisbon",
                "Europe/Ljubljana",
                "Europe/London",
                "Europe/Luxembourg",
                "Europe/Madrid",
                "Europe/Malta",
                "Europe/Mariehamn",
                "Europe/Minsk",
                "Europe/Monaco",
                "Europe/Moscow",
                "Europe/Nicosia",
                "Europe/Oslo",
                "Europe/Paris",
                "Europe/Podgorica",
                "Europe/Prague",
                "Europe/Riga",
                "Europe/Rome",
                "Europe/Samara",
                "Europe/San_Marino",
                "Europe/Sarajevo",
                "Europe/Saratov",
                "Europe/Simferopol",
                "Europe/Skopje",
                "Europe/Sofia",
                "Europe/Stockholm",
                "Europe/Tallinn",
                "Europe/Tirane",
                "Europe/Tiraspol",
                "Europe/Ulyanovsk",
                "Europe/Uzhgorod",
                "Europe/Vaduz",
                "Europe/Vatican",
                "Europe/Vienna",
                "Europe/Vilnius",
                "Europe/Volgograd",
                "Europe/Warsaw",
                "Europe/Zagreb",
                "Europe/Zaporozhye",
                "Europe/Zurich",
                "GB",
                "GB-Eire",
                "GMT",
                "Hongkong",
                "Iceland",
                "Indian/Antananarivo",
                "Indian/Chagos",
                "Indian/Christmas",
                "Indian/Cocos",
                "Indian/Comoro",
                "Indian/Kerguelen",
                "Indian/Mahe",
                "Indian/Maldives",
                "Indian/Mauritius",
                "Indian/Mayotte",
                "Indian/Reunion",
                "Iran",
                "Israel",
                "Jamaica",
                "Japan",
                "Kwajalein",
                "Libya",
                "Mexico/BajaNorte",
                "Mexico/BajaSur",
                "Mexico/General",
                "NZ",
                "NZ-CHAT",
                "Navajo",
                "PRC",
                "Pacific/Apia",
                "Pacific/Auckland",
                "Pacific/Bougainville",
                "Pacific/Chatham",
                "Pacific/Chuuk",
                "Pacific/Easter",
                "Pacific/Efate",
                "Pacific/Enderbury",
                "Pacific/Fakaofo",
                "Pacific/Fiji",
                "Pacific/Funafuti",
                "Pacific/Galapagos",
                "Pacific/Gambier",
                "Pacific/Guadalcanal",
                "Pacific/Guam",
                "Pacific/Honolulu",
                "Pacific/Johnston",
                "Pacific/Kanton",
                "Pacific/Kiritimati",
                "Pacific/Kosrae",
                "Pacific/Kwajalein",
                "Pacific/Majuro",
                "Pacific/Marquesas",
                "Pacific/Midway",
                "Pacific/Nauru",
                "Pacific/Niue",
                "Pacific/Norfolk",
                "Pacific/Noumea",
                "Pacific/Pago_Pago",
                "Pacific/Palau",
                "Pacific/Pitcairn",
                "Pacific/Pohnpei",
                "Pacific/Ponape",
                "Pacific/Port_Moresby",
                "Pacific/Rarotonga",
                "Pacific/Saipan",
                "Pacific/Samoa",
                "Pacific/Tahiti",
                "Pacific/Tarawa",
                "Pacific/Tongatapu",
                "Pacific/Truk",
                "Pacific/Wake",
                "Pacific/Wallis",
                "Pacific/Yap",
                "Poland",
                "Portugal",
                "ROC",
                "ROK",
                "Singapore",
                "Turkey",
                "US/Alaska",
                "US/Aleutian",
                "US/Arizona",
                "US/Central",
                "US/East-Indiana",
                "US/Eastern",
                "US/Hawaii",
                "US/Indiana-Starke",
                "US/Michigan",
                "US/Mountain",
                "US/Pacific",
                "US/Samoa",
                "UTC",
                "W-SU"
              ],
              "in": "query",
              "name": "timezone",
              "type": "string",
              "x-go-name": "Timezone"
            },
            {
              "description": "Language code",
              "enum": [
                "ENG",
                "RUS",
                "LAV",
                "LIT"
              ],
              "in": "query",
              "name": "language_code",
              "type": "string",
              "x-go-name": "LanguageCode"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "DownloadCardStatementResponse",
              "schema": {
                "$ref": "#/definitions/DownloadCardStatementResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Download card statement",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/encrypted-3ds-password": {
        "post": {
          "description": "Get encrypted 3DS password by card ID. 3DS password will be encrypted using [RSA public key](#section/RSA-keys) from request.",
          "operationId": "GetEncrypted3DSPassword",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GetEncrypted3DSPasswordRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "GetEncrypted3DSPasswordResponse",
              "schema": {
                "$ref": "#/definitions/GetEncrypted3DSPasswordResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get encrypted 3DS password by card ID",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/encrypted-card-number": {
        "post": {
          "description": "Get card encrypted card number. Card number will be encrypted using [RSA public key](#section/RSA-keys) in request.",
          "operationId": "GetEncryptedCardNumber",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GetEncryptedCardNumberRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "GetEncryptedCardNumberResponse",
              "schema": {
                "$ref": "#/definitions/GetEncryptedCardNumberResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card encrypted card number",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/encrypted-cvv2": {
        "post": {
          "description": "Get card encrypted CVV2. CVV2 will be encrypted using [RSA public key](#section/RSA-keys) in request.",
          "operationId": "GetEncryptedCVV2",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GetEncryptedCVV2Request"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "GetEncryptedCVV2Response",
              "schema": {
                "$ref": "#/definitions/GetEncryptedCVV2Response"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card encrypted CVV2",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/encrypted-pin": {
        "post": {
          "description": "Get card encrypted PIN. PIN will be encrypted using [RSA public key](#section/RSA-keys) from request.",
          "operationId": "GetEncryptedPIN",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GetEncryptedPINRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "GetEncryptedPINResponse",
              "schema": {
                "$ref": "#/definitions/GetEncryptedPINResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card encrypted PIN",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/external-id": {
        "patch": {
          "description": "Update card external ID. It is allowed to send empty external ID to remove the external ID from the card.",
          "operationId": "UpdateCardExternalID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardExternalIDRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCardExternalIDResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCardExternalIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update card external ID",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/fee-waivers": {
        "get": {
          "description": "Get card fee waivers",
          "operationId": "GetCardFeeWaivers",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardFeeWaiversResponse",
              "schema": {
                "$ref": "#/definitions/GetCardFeeWaiversResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card fee waivers",
          "tags": [
            "Fee"
          ]
        }
      },
      "/v1/cards/{card_id}/fee-waivers/{fee_waiver_id}": {
        "delete": {
          "description": "Delete card fee waiver",
          "operationId": "DeleteCardFeeWaiver",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Fee waiver ID",
              "format": "uuid4",
              "in": "path",
              "name": "fee_waiver_id",
              "required": true,
              "type": "string",
              "x-go-name": "FeeWaiverID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete card fee waiver",
          "tags": [
            "Fee"
          ]
        },
        "get": {
          "description": "Get card fee waiver by ID",
          "operationId": "GetCardFeeWaiverByID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Fee waiver ID",
              "format": "uuid4",
              "in": "path",
              "name": "fee_waiver_id",
              "required": true,
              "type": "string",
              "x-go-name": "FeeWaiverID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardFeeWaiverByIDResponse",
              "schema": {
                "$ref": "#/definitions/GetCardFeeWaiverByIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card fee waiver by ID",
          "tags": [
            "Fee"
          ]
        }
      },
      "/v1/cards/{card_id}/fees": {
        "get": {
          "description": "Get card fees",
          "operationId": "GetCardFees",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardFeesResponse",
              "schema": {
                "$ref": "#/definitions/GetCardFeesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card fees",
          "tags": [
            "Card"
          ]
        },
        "patch": {
          "description": "Update card fees",
          "operationId": "UpdateCardFees",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardFeesRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCardFeesResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCardFeesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update card fees",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/history": {
        "get": {
          "description": "Get card history",
          "operationId": "GetCardHistory",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (can be used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (can be used with from_record parameter in pair). \u003cbr\u003e\nIf not specified, default value 1000 is used.",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardHistoryResponse",
              "schema": {
                "$ref": "#/definitions/GetCardHistoryResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card history",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/is-card-renewal-allowed": {
        "get": {
          "description": "Is card renewal allowed",
          "operationId": "IsCardRenewalAllowed",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            }
          ],
          "responses": {
            "200": {
              "description": "IsCardRenewalAllowedResponse",
              "schema": {
                "$ref": "#/definitions/IsCardRenewalAllowedResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Is card renewal allowed",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/limits": {
        "get": {
          "description": "Get card limits usage",
          "operationId": "GetCardLimitsUsage",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardLimitsUsageResponse",
              "schema": {
                "$ref": "#/definitions/GetCardLimitsUsageResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card limits usage",
          "tags": [
            "Card"
          ]
        },
        "patch": {
          "description": "Update card limits",
          "operationId": "UpdateCardLimits",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardLimitsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCardLimitsResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCardLimitsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update card limits",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/link-to-account/{account_id}": {
        "patch": {
          "description": "Link card to account",
          "operationId": "LinkCardToAccount",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Account ID",
              "format": "uuid4",
              "in": "path",
              "name": "account_id",
              "required": true,
              "type": "string",
              "x-go-name": "AccountID"
            }
          ],
          "responses": {
            "200": {
              "description": "LinkCardToAccountResponse",
              "schema": {
                "$ref": "#/definitions/LinkCardToAccountResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Link card to account",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/merchant-rules": {
        "get": {
          "description": "Get card merchant rules",
          "operationId": "GetCardMerchantRules",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "Is whitelist card merchant rule",
              "in": "query",
              "name": "is_white_list",
              "type": "boolean",
              "x-go-name": "IsWhiteList"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardMerchantRulesResponse",
              "schema": {
                "$ref": "#/definitions/GetCardMerchantRulesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card merchant rules",
          "tags": [
            "Card"
          ]
        },
        "post": {
          "description": "Create card merchant rules",
          "operationId": "CreateCardMerchantRules",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateCardMerchantRulesRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreateCardMerchantRulesResponse",
              "schema": {
                "$ref": "#/definitions/CreateCardMerchantRulesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create card merchant rules",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/merchant-rules/{merchant_rule_id}": {
        "delete": {
          "description": "Delete card merchant rule",
          "operationId": "DeleteCardMerchantRule",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Card Merchant Rule ID",
              "format": "uuid4",
              "in": "path",
              "name": "merchant_rule_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardMerchantRuleID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete card merchant rule",
          "tags": [
            "Card"
          ]
        },
        "get": {
          "description": "Get card merchant rule by ID",
          "operationId": "GetCardMerchantRuleByID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Card Merchant Rule ID",
              "format": "uuid4",
              "in": "path",
              "name": "merchant_rule_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardMerchantRuleID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardMerchantRuleByIDResponse",
              "schema": {
                "$ref": "#/definitions/GetCardMerchantRuleByIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card merchant rule by ID",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/name": {
        "patch": {
          "description": "Update card name. It is allowed to send empty name to remove the name from the card.",
          "operationId": "UpdateCardName",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardNameRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCardNameResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCardNameResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update card name",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/notification-settings": {
        "patch": {
          "description": "Update card notification settings",
          "operationId": "UpdateCardNotificationSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardNotificationSettingsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCardNotificationSettingsResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCardNotificationSettingsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update card notification settings",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/pin": {
        "patch": {
          "description": "Change PIN code. PIN code must be encrypted using public RSA key shared to you by Wallester.",
          "operationId": "ChangePIN",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ChangeCardPINRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Change PIN code",
          "tags": [
            "Card"
          ]
        },
        "put": {
          "description": "Send card PIN directly to cardholder by SMS. Wallester configures SMS templates by multiple languages (please contact a Wallester representative if something needs to be adjusted with the templates).",
          "operationId": "RemindPIN",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            }
          ],
          "responses": {
            "200": {
              "description": "CardholderReminderResponse",
              "schema": {
                "$ref": "#/definitions/CardholderReminderResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Remind PIN",
          "tags": [
            "Reminders"
          ]
        }
      },
      "/v1/cards/{card_id}/push-provisioning/apple-pay": {
        "post": {
          "description": "Pushing card to wallet",
          "operationId": "ApplePayPushProvisioning",
          "parameters": [
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ApplePayPushProvisioningRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "ApplePayPushProvisioningResponse",
              "schema": {
                "$ref": "#/definitions/ApplePayPushProvisioningResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Apple Pay push provisioning",
          "tags": [
            "Token"
          ]
        }
      },
      "/v1/cards/{card_id}/push-provisioning/google-pay": {
        "post": {
          "description": "Pushing card to wallet",
          "operationId": "GooglePayPushProvisioning",
          "parameters": [
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GooglePayPushProvisioningRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "GooglePayPushProvisioningResponse",
              "schema": {
                "$ref": "#/definitions/GooglePayPushProvisioningResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Google push provisioning",
          "tags": [
            "Token"
          ]
        }
      },
      "/v1/cards/{card_id}/renew-automatically": {
        "patch": {
          "description": "Update card renew automatically",
          "operationId": "UpdateCardRenewAutomatically",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardRenewAutomaticallyRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCardRenewAutomaticallyResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCardRenewAutomaticallyResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update card renew automatically",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/replace": {
        "patch": {
          "description": "Replaces card using existing card data.\n\nThe card can be replaced regardless of its status.",
          "operationId": "ReplaceCard",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            }
          ],
          "responses": {
            "200": {
              "description": "ReplaceCardResponse",
              "schema": {
                "$ref": "#/definitions/ReplaceCardResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Replace card",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/security": {
        "patch": {
          "description": "Update card security. It is allowed to update either all or specific fields only. Fields having empty values will not be updated. Card 3D Secure settings are required to enable internet purchases if product has 3D Secure enabled.",
          "operationId": "UpdateCardSecurity",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardSecurityRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCardSecurityResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCardSecurityResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update card security",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/statement": {
        "get": {
          "description": "It can contain card authorizations, transactions and adjustments, and can filter declined, reversed or cleared authorizations out",
          "operationId": "GetCardStatement",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "IncludeAuthorizations defines whether to include authorizations to account statement or not.",
              "in": "query",
              "name": "include_authorizations",
              "type": "boolean",
              "x-go-name": "IncludeAuthorizations"
            },
            {
              "description": "IncludeTransactions defines whether to include transactions to account statement or not.",
              "in": "query",
              "name": "include_transactions",
              "type": "boolean",
              "x-go-name": "IncludeTransactions"
            },
            {
              "description": "IncludeFees defines whether to include fees to account statement or not.",
              "in": "query",
              "name": "include_fees",
              "type": "boolean",
              "x-go-name": "IncludeFees"
            },
            {
              "description": "ExcludeDeclinedAuthorizations defines whether to exclude declined authorizations from account statement or not. \u003cbr\u003e\nIf not provided, the default value is __false__.",
              "in": "query",
              "name": "exclude_declined_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeDeclinedAuthorizations"
            },
            {
              "description": "ExcludeReversedAuthorizations defines whether to exclude reversed authorizations and reversals from account statement or not. \u003cbr\u003e\nIf not provided, the default value is __false__.",
              "in": "query",
              "name": "exclude_reversed_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeReversedAuthorizations"
            },
            {
              "description": "ExcludeClearedAuthorizations defines whether to exclude cleared authorizations from account statement or not.",
              "in": "query",
              "name": "exclude_cleared_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeClearedAuthorizations"
            },
            {
              "description": "ExcludePendingAuthorizations defines whether to exclude pending authorizations from account statement or not.",
              "in": "query",
              "name": "exclude_pending_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludePendingAuthorizations"
            },
            {
              "description": "ExcludeStatusAuthorizations defines whether to exclude status authorizations from account statement or not.",
              "in": "query",
              "name": "exclude_status_authorizations",
              "type": "boolean",
              "x-go-name": "ExcludeStatusAuthorizations"
            },
            {
              "description": "ExcludePendingFees defines whether to exclude pending fees from account statement or not.",
              "in": "query",
              "name": "exclude_pending_fees",
              "type": "boolean",
              "x-go-name": "ExcludePendingFees"
            },
            {
              "description": "ExcludeClearedFees defines whether to exclude cleared fees from account statement or not.",
              "in": "query",
              "name": "exclude_cleared_fees",
              "type": "boolean",
              "x-go-name": "ExcludeClearedFees"
            },
            {
              "description": "ExcludeDeclinedFees defines whether to exclude declined fees from account statement or not.",
              "in": "query",
              "name": "exclude_declined_fees",
              "type": "boolean",
              "x-go-name": "ExcludeDeclinedFees"
            },
            {
              "description": "MergeFees defines whether to merge fees per authorization or not.",
              "in": "query",
              "name": "merge_fees",
              "type": "boolean",
              "x-go-name": "MergeFees"
            },
            {
              "description": "Search keyword",
              "in": "query",
              "name": "search_keyword",
              "type": "string",
              "x-go-name": "SearchKeyword"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardStatementResponse",
              "schema": {
                "$ref": "#/definitions/GetCardStatementResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card statement",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/sync-tokens": {
        "post": {
          "description": "Synchronizes and updates tokens internally with the latest information received from Visa",
          "operationId": "SyncTokensWithVisa",
          "parameters": [
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Sync tokens",
          "tags": [
            "Token"
          ]
        }
      },
      "/v1/cards/{card_id}/tokens": {
        "get": {
          "description": "Get tokens by card ID",
          "operationId": "TokensByCardID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "default": "created_at",
              "description": "Field to sort by: id, reference_id, card_id, card_metadata_profile_id, requestor_id, pan_reference_id,\ntype, status, expiration or created_at",
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "TokensByCardIDResponse",
              "schema": {
                "$ref": "#/definitions/TokensByCardIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get tokens by card ID",
          "tags": [
            "Token"
          ]
        }
      },
      "/v1/cards/{card_id}/transactions": {
        "get": {
          "description": "Get card transactions",
          "operationId": "GetCardTransactions",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardTransactionsResponse",
              "schema": {
                "$ref": "#/definitions/GetCardTransactionsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card transactions",
          "tags": [
            "Transactions"
          ]
        }
      },
      "/v1/cards/{card_id}/unblock": {
        "patch": {
          "description": "Unblock card",
          "operationId": "UnblockCard",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            }
          ],
          "responses": {
            "200": {
              "description": "UnblockCardResponse",
              "schema": {
                "$ref": "#/definitions/UnblockCardResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Unblock card",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/cards/{card_id}/users": {
        "delete": {
          "description": "Delete card users",
          "operationId": "DeleteCardUsers",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "User IDs",
              "in": "query",
              "items": {
                "format": "uuid4",
                "type": "string"
              },
              "name": "user_ids",
              "required": true,
              "type": "array",
              "x-go-name": "UserID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete card users",
          "tags": [
            "Card"
          ]
        },
        "get": {
          "description": "Get card users",
          "operationId": "GetAllCardUsers",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "default": "mobile",
              "description": "Field to sort by: first_name, last_name, mobile, email",
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardUsersResponse",
              "schema": {
                "$ref": "#/definitions/GetCardUsersResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card users",
          "tags": [
            "Card"
          ]
        },
        "post": {
          "description": "Create card user",
          "operationId": "CreateCardUser",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateCardUserRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreateCardUserResponse",
              "schema": {
                "$ref": "#/definitions/CreateCardUserResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create card user",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/companies": {
        "get": {
          "description": "Search companies. If no search parameters are provided, then returns only active companies.",
          "operationId": "SearchCompanies",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name",
              "in": "query",
              "name": "name",
              "type": "string",
              "x-go-name": "Name"
            },
            {
              "description": "Registration number",
              "in": "query",
              "name": "registration_number",
              "required": true,
              "type": "string",
              "x-go-name": "RegistrationNumber"
            },
            {
              "description": "Person phone or mobile to search",
              "in": "query",
              "name": "mobile",
              "type": "string",
              "x-go-name": "Mobile"
            },
            {
              "description": "Person email to search",
              "in": "query",
              "name": "email",
              "type": "string",
              "x-go-name": "Email"
            },
            {
              "description": "Statuses is **repeated** query parameter to specify company statuses to return.",
              "enum": [
                "Active",
                "Deactivated",
                "Frozen"
              ],
              "in": "query",
              "name": "statuses",
              "type": "string",
              "x-go-name": "Statuses"
            },
            {
              "description": "RiskProfiles is **repeated** query parameter to specify company risk profiles to return.",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Pending",
                "Prohibited"
              ],
              "in": "query",
              "name": "risk_profiles",
              "type": "string",
              "x-go-name": "RiskProfiles"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "Field to sort by **repeated** (format \u003cfield_name\u003e or \u003cfield_name\u003e.\u003casc | desc\u003e (asc by default))",
              "enum": [
                "name",
                "registration_number",
                "mobile",
                "email",
                "status",
                "risk_profile"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderFieldName"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc (DEPRECATED)",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            }
          ],
          "responses": {
            "200": {
              "description": "SearchCompaniesResponse",
              "schema": {
                "$ref": "#/definitions/SearchCompaniesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Search companies",
          "tags": [
            "Company"
          ]
        },
        "post": {
          "description": "Creates company",
          "operationId": "CreateCompany",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateCompanySwaggerModel"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreateCompanyResponse",
              "schema": {
                "$ref": "#/definitions/CreateCompanyResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create company",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}": {
        "delete": {
          "description": "Deactivates company, it is not possible to close company with active accounts linked to it.",
          "operationId": "DeactivateCompany",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            }
          ],
          "responses": {
            "200": {
              "description": "DeactivateCompanyResponse",
              "schema": {
                "$ref": "#/definitions/DeactivateCompanyResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Deactivate company",
          "tags": [
            "Company"
          ]
        },
        "get": {
          "description": "Get company information",
          "operationId": "GetCompany",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCompanyResponse",
              "schema": {
                "$ref": "#/definitions/GetCompanyResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get company",
          "tags": [
            "Company"
          ]
        },
        "patch": {
          "description": "Update company",
          "operationId": "UpdateCompany",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCompanySwaggerModel"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCompanyResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCompanyResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update company",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/3ds-settings": {
        "delete": {
          "description": "Delete company 3DS settings",
          "operationId": "DeleteCompany3DSSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "summary": "Delete company 3DS settings",
          "tags": [
            "Company"
          ]
        },
        "get": {
          "description": "Get company 3DS settings",
          "operationId": "GetCompany3DSSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            }
          ],
          "responses": {
            "200": {
              "description": "Company3DSSettingsResponse",
              "schema": {
                "$ref": "#/definitions/Company3DSSettingsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "summary": "Get company 3DS settings",
          "tags": [
            "Company"
          ]
        },
        "patch": {
          "description": "Update company 3DS settings",
          "operationId": "UpdateCompany3DSSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardholder3DSSettingsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "Company3DSSettingsResponse",
              "schema": {
                "$ref": "#/definitions/Company3DSSettingsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "summary": "Update company 3DS settings",
          "tags": [
            "Company"
          ]
        },
        "post": {
          "description": "Create company 3DS settings",
          "operationId": "CreateCompany3DSSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateCardholder3DSSettingsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "Company3DSSettingsResponse",
              "schema": {
                "$ref": "#/definitions/Company3DSSettingsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "summary": "Create company 3DS settings",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/accounts": {
        "get": {
          "description": "Get company accounts",
          "operationId": "GetCompanyAccounts",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "Return only active accounts",
              "in": "query",
              "name": "is_active",
              "type": "boolean",
              "x-go-name": "IsActive"
            },
            {
              "description": "AccountStatuses is **repeated** query parameter to specify account statuses to return.",
              "enum": [
                "Active",
                "Closing",
                "Closed",
                "Blocked"
              ],
              "in": "query",
              "name": "account_statuses",
              "type": "string",
              "x-go-name": "AccountStatuses"
            },
            {
              "description": "Is a **repeated** query parameter to sort accounts to return. Sorting could be done by direct and backward order (asc or desc).\nDefault order direct \"asc\".\nFormat: \u003cfield_name\u003e or \u003cfield_name\u003e.\u003casc | desc\u003e (order_field=status\u0026order_field=created_at.desc).",
              "enum": [
                "created_at",
                "updated_at",
                "balance",
                "blocked_amount",
                "available_amount",
                "name",
                "status",
                "is_main"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderFieldName"
            },
            {
              "description": "Excluding or only showing null balance",
              "in": "query",
              "name": "balance_is_zero",
              "type": "boolean",
              "x-go-name": "Value"
            },
            {
              "description": "Excluding or only showing null available amount",
              "in": "query",
              "name": "available_amount_is_zero",
              "type": "boolean",
              "x-go-name": "Value"
            },
            {
              "description": "Excluding or only showing null blocked amount",
              "in": "query",
              "name": "blocked_amount_is_zero",
              "type": "boolean",
              "x-go-name": "Value"
            },
            {
              "description": "AccountName is a query parameter to specify account name to return.",
              "in": "query",
              "maximum": 100,
              "name": "account_name",
              "type": "string",
              "x-go-name": "AccountName"
            },
            {
              "description": "Account viban",
              "in": "query",
              "name": "viban",
              "type": "string",
              "x-go-name": "Viban"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCompanyAccountsResponse",
              "schema": {
                "$ref": "#/definitions/GetCompanyAccountsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get company accounts",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/cards": {
        "get": {
          "description": "Returns all cards linked to the company",
          "operationId": "GetCompanyCards",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "CardStatuses is **repeated** query parameter to specify card statuses to return.",
              "enum": [
                "Created",
                "Ordered",
                "Personalized",
                "Dispatched",
                "Active",
                "Blocked",
                "Closing",
                "Closed",
                "Expired",
                "AwaitingRenewal"
              ],
              "in": "query",
              "name": "card_statuses",
              "type": "string",
              "x-go-name": "CardStatuses"
            },
            {
              "description": "CardTypes is **repeated** query parameter to specify card types to return.",
              "enum": [
                "Virtual",
                "ChipAndPin",
                "ChipAndPinAnonymous"
              ],
              "in": "query",
              "name": "card_types",
              "type": "string",
              "x-go-name": "CardTypes"
            },
            {
              "description": "FromExpiryDate defines a beginning expiry date of card.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_expiry_date",
              "type": "string",
              "x-go-name": "FromExpiryDate"
            },
            {
              "description": "ToExpiryDate defines an end expiry date of card.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_expiry_date",
              "type": "string",
              "x-go-name": "ToExpiryDate"
            },
            {
              "description": "Card name",
              "in": "query",
              "maxLength": 100,
              "name": "name",
              "type": "string",
              "x-go-name": "Name"
            },
            {
              "description": "Masked card number to search",
              "in": "query",
              "name": "masked_card_number",
              "type": "string",
              "x-go-name": "MaskedCardNumber"
            },
            {
              "description": "Field to sort by **repeated** (format \u003cfield_name\u003e or \u003cfield_name\u003e.\u003casc | desc\u003e (asc by default))\nStatus field order is: \"Active\", \"Ordered\", \"Blocked\", \"Frozen\", \"Expired\", \"Closed\".",
              "enum": [
                "name",
                "masked_card_number",
                "expiry_date",
                "type",
                "status"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderFieldName"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc (DEPRECATED)",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCompanyCardsResponse",
              "schema": {
                "$ref": "#/definitions/GetCompanyCardsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get company cards",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/corporate-documents": {
        "post": {
          "description": "Add company corporate documents",
          "operationId": "AddCompanyCorporateDocument",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Specifies the media type (format) of the request or response body, in \"Content-Type: multipart/form-data; boundary=[your unique boundary]\" format",
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Document type",
              "enum": [
                "RegistrationIncorporationCertificate",
                "BeneficialOwnersCertificate"
              ],
              "in": "formData",
              "name": "type",
              "required": true,
              "type": "string",
              "x-go-name": "Type"
            },
            {
              "description": "File to upload. Supported types: docx, pdf, odt, jpeg, jpg. File max size is 15MB. Filename max length is 1024 chars",
              "in": "formData",
              "name": "file",
              "required": true,
              "type": "file",
              "x-go-name": "File"
            }
          ],
          "responses": {
            "201": {
              "description": "AddCompanyCorporateDocumentResponse",
              "schema": {
                "$ref": "#/definitions/AddCompanyCorporateDocumentResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Add company corporate documents",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/fcm-tokens": {
        "post": {
          "description": "Registers FCM token received from Firebase to be able to send push notifications to device for companies",
          "operationId": "RegisterCompanyFCMToken",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RegisterCompanyFCMTokenRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "RegisterCompanyFCMTokenResponse",
              "schema": {
                "$ref": "#/definitions/RegisterCompanyFCMTokenResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Register FCM Token",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/fcm-tokens-by-device-id/{device_id}": {
        "delete": {
          "description": "Delete FCM Token",
          "operationId": "RemoveCompanyFCMTokenByDeviceID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Device ID",
              "in": "path",
              "name": "device_id",
              "required": true,
              "type": "string",
              "x-go-name": "DeviceID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete FCM Token",
          "tags": [
            "Company"
          ]
        },
        "get": {
          "description": "Get FCM Token",
          "operationId": "GetCompanyFCMTokenByDeviceID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Device ID",
              "in": "path",
              "name": "device_id",
              "required": true,
              "type": "string",
              "x-go-name": "DeviceID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCompanyFCMTokenResponse",
              "schema": {
                "$ref": "#/definitions/GetCompanyFCMTokenResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get FCM Token",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/fcm-tokens-by-device-id/{device_id}/push-notifications-enabled": {
        "patch": {
          "description": "Turn off or on push notifications for device",
          "operationId": "UpdateCompanyFCMTokenPushNotificationsEnabled",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Device ID",
              "in": "path",
              "name": "device_id",
              "required": true,
              "type": "string",
              "x-go-name": "DeviceID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCompanyPushNotificationsEnabledRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCompanyFCMTokenPushNotificationsEnabledResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCompanyFCMTokenPushNotificationsEnabledResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update push notifications enabled for device",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/history": {
        "get": {
          "description": "Returns company's history of changes",
          "operationId": "GetCompanyHistory",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (can be used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (can be used with from_record parameter in pair). \u003cbr\u003e\nIf not specified, default value 1000 is used.",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCompanyHistoryResponse",
              "schema": {
                "$ref": "#/definitions/GetCompanyHistoryResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get company history",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/limits": {
        "patch": {
          "description": "Update company limits",
          "operationId": "UpdateCompanyLimits",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateAccountLimitsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCompanyLimitsResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCompanyLimitsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update company limits",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/limits-usage": {
        "get": {
          "description": "Get company limits usage",
          "operationId": "GetCompanyLimitsUsage",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCompanyLimitsUsageResponse",
              "schema": {
                "$ref": "#/definitions/GetCompanyLimitsUsageResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get company limits usage",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/push-notifications-enabled": {
        "patch": {
          "description": "Turn off or on push notifications for company",
          "operationId": "UpdateCompanyPushNotificationsEnabled",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCompanyPushNotificationsEnabledRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCompanyPushNotificationsEnabledResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCompanyPushNotificationsEnabledResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update push notifications enabled for company",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/representatives": {
        "get": {
          "description": "Returns all representatives linked to the company",
          "operationId": "GetCompanyRepresentatives",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "GetRepresentativesResponse",
              "schema": {
                "$ref": "#/definitions/GetRepresentativesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get company representatives",
          "tags": [
            "Company"
          ]
        },
        "post": {
          "description": "Adds company representatives",
          "operationId": "AddRepresentatives",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddRepresentativesSwaggerRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "AddRepresentativesResponse",
              "schema": {
                "$ref": "#/definitions/AddRepresentativesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Add company representatives",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/representatives/{representative_id}": {
        "delete": {
          "description": "Removes company representative, cannot remove last representative because 1 representative is always required.",
          "operationId": "RemoveRepresentative",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Representative ID",
              "format": "uuid4",
              "in": "path",
              "name": "representative_id",
              "required": true,
              "type": "string",
              "x-go-name": "RepresentativeID"
            }
          ],
          "responses": {
            "200": {
              "description": "RemoveRepresentativeResponse",
              "schema": {
                "$ref": "#/definitions/RemoveRepresentativeResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Remove company representative",
          "tags": [
            "Company"
          ]
        },
        "get": {
          "description": "Get company representative information",
          "operationId": "GetRepresentative",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Representative ID",
              "format": "uuid4",
              "in": "path",
              "name": "representative_id",
              "required": true,
              "type": "string",
              "x-go-name": "RepresentativeID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetRepresentativeResponse",
              "schema": {
                "$ref": "#/definitions/GetRepresentativeResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get company representative",
          "tags": [
            "Company"
          ]
        },
        "patch": {
          "description": "Update company representative",
          "operationId": "UpdateRepresentative",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Representative ID",
              "format": "uuid4",
              "in": "path",
              "name": "representative_id",
              "required": true,
              "type": "string",
              "x-go-name": "RepresentativeID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateRepresentativeRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateRepresentativeResponse",
              "schema": {
                "$ref": "#/definitions/UpdateRepresentativeResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update company representative",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/representatives/{representative_id}/history": {
        "get": {
          "description": "Returns representative's history of changes",
          "operationId": "GetRepresentativeHistory",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Representative ID",
              "format": "uuid4",
              "in": "path",
              "name": "representative_id",
              "required": true,
              "type": "string",
              "x-go-name": "RepresentativeID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (can be used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (can be used with from_record parameter in pair). \u003cbr\u003e\nIf not specified, default value 1000 is used.",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            }
          ],
          "responses": {
            "200": {
              "description": "GetRepresentativeHistoryResponse",
              "schema": {
                "$ref": "#/definitions/GetRepresentativeHistoryResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get representative history",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/representatives/{representative_id}/verification-link": {
        "put": {
          "description": "Send representative verification link",
          "operationId": "SendRepresentativeVerificationLink",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Representative ID",
              "format": "uuid4",
              "in": "path",
              "name": "representative_id",
              "required": true,
              "type": "string",
              "x-go-name": "RepresentativeID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "summary": "Send representative verification link",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/submit-agreement": {
        "post": {
          "description": "Submit company agreement",
          "operationId": "SubmitCompanyAgreement",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SubmitCompanyAgreementRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "SubmitCompanyAgreementResponse",
              "schema": {
                "$ref": "#/definitions/SubmitCompanyAgreementResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Submit company agreement",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/companies/{company_id}/users": {
        "delete": {
          "description": "Delete company users",
          "operationId": "DeleteCompanyUsers",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "User IDs",
              "in": "query",
              "items": {
                "format": "uuid4",
                "type": "string"
              },
              "name": "user_ids",
              "required": true,
              "type": "array",
              "x-go-name": "UserID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete company users",
          "tags": [
            "Company"
          ]
        },
        "get": {
          "description": "Get company users",
          "operationId": "GetCompanyUsers",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "default": "first_name",
              "description": "Field to sort by: first_name, last_name, mobile, email",
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCompanyUsersResponse",
              "schema": {
                "$ref": "#/definitions/GetCompanyUsersResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get company users",
          "tags": [
            "Company"
          ]
        },
        "post": {
          "description": "Create company user",
          "operationId": "CreateCompanyUser",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Company ID",
              "format": "uuid4",
              "in": "path",
              "name": "company_id",
              "required": true,
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateCompanyUserRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreateCompanyUserResponse",
              "schema": {
                "$ref": "#/definitions/CreateCompanyUserResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create company user",
          "tags": [
            "Company"
          ]
        }
      },
      "/v1/expiring-cards": {
        "get": {
          "description": "Get expiring cards",
          "operationId": "GetExpiringCards",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "default": "masked_card_number",
              "description": "Field to sort by: masked_card_number, expiry_date",
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "GetExpiringCardsResponse",
              "schema": {
                "$ref": "#/definitions/GetExpiringCardsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get expiring cards",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/extract-files": {
        "get": {
          "description": "Get extract files directories list",
          "operationId": "Directories",
          "responses": {
            "200": {
              "description": "ExtractFilesDirectoriesResponse",
              "schema": {
                "$ref": "#/definitions/ExtractFilesDirectoriesResponse"
              }
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get directories list",
          "tags": [
            "Extract-Files"
          ]
        }
      },
      "/v1/extract-files/{directory_name}": {
        "get": {
          "description": "Get extract files directory files list",
          "operationId": "List",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Directory name",
              "in": "path",
              "name": "directory_name",
              "required": true,
              "type": "string",
              "x-go-name": "DirectoryName"
            }
          ],
          "responses": {
            "200": {
              "description": "ExtractFilesListResponse",
              "schema": {
                "$ref": "#/definitions/ExtractFilesListResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get directory files list",
          "tags": [
            "Extract-Files"
          ]
        }
      },
      "/v1/extract-files/{directory_name}/{file_name}": {
        "get": {
          "description": "Download extract file",
          "operationId": "Download",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Directory name",
              "in": "path",
              "name": "directory_name",
              "required": true,
              "type": "string",
              "x-go-name": "DirectoryName"
            },
            {
              "description": "File name",
              "in": "path",
              "name": "file_name",
              "required": true,
              "type": "string",
              "x-go-name": "FileName"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Download file",
          "tags": [
            "Extract-Files"
          ]
        }
      },
      "/v1/fees-by-adjustment-ids": {
        "post": {
          "description": "Returns fees by account adjustment IDs",
          "operationId": "GetFeesByAdjustmentIDs",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GetFeesByAdjustmentIDsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "GetFeesByAdjustmentIDsResponse",
              "schema": {
                "$ref": "#/definitions/GetFeesByAdjustmentIDsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get fees by account adjustment IDs",
          "tags": [
            "Fee"
          ]
        }
      },
      "/v1/fees/{fee_id}": {
        "get": {
          "description": "Get fee information",
          "operationId": "GetFee",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Fee ID",
              "format": "uuid4",
              "in": "path",
              "name": "fee_id",
              "required": true,
              "type": "string",
              "x-go-name": "FeeID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetFeeResponse",
              "schema": {
                "$ref": "#/definitions/GetFeeResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get fee",
          "tags": [
            "Fee"
          ]
        }
      },
      "/v1/fraud-cases": {
        "get": {
          "description": "Get fraud cases",
          "operationId": "GetFraudCases",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "Field to sort by **repeated** (format \u003cfield_name\u003e or \u003cfield_name\u003e.\u003casc | desc\u003e (asc by default))",
              "enum": [
                "case_id",
                "card_owner_name",
                "card_id",
                "authorization_date",
                "merchant_name",
                "risk_score",
                "risk_zone",
                "risk_status",
                "case_status",
                "assigned_to_name"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderFieldName"
            },
            {
              "description": "CaseStatuses is **repeated** query parameter to specify case statuses to return.",
              "enum": [
                "Pending",
                "Positive",
                "Negative",
                "Escalation",
                "NotClassified"
              ],
              "in": "query",
              "name": "case_statuses",
              "type": "string",
              "x-go-name": "CaseStatuses"
            },
            {
              "description": "RiskStatuses is **repeated** query parameter to specify risk statuses to return.",
              "enum": [
                "Unknown",
                "Approved",
                "Declined",
                "Suspicious",
                "FreezeCard"
              ],
              "in": "query",
              "name": "risk_statuses",
              "type": "string",
              "x-go-name": "RiskStatuses"
            },
            {
              "description": "RiskZones is **repeated** query parameter to specify risk zones to return.",
              "enum": [
                "Low",
                "Medium",
                "High"
              ],
              "in": "query",
              "name": "risk_zones",
              "type": "string",
              "x-go-name": "RiskZones"
            },
            {
              "description": "FromRiskScore defines a beginning risk score number of fraud case",
              "format": "int64",
              "in": "query",
              "maximum": 100,
              "minimum": 0,
              "name": "from_risk_score",
              "type": "integer",
              "x-go-name": "FromRiskScore"
            },
            {
              "description": "ToRiskScore defines an end risk score number of fraud case",
              "format": "int64",
              "in": "query",
              "maximum": 100,
              "minimum": 0,
              "name": "to_risk_score",
              "type": "integer",
              "x-go-name": "ToRiskScore"
            },
            {
              "description": "Card owner IDs",
              "in": "query",
              "items": {
                "format": "uuid4",
                "type": "string"
              },
              "name": "card_owner_ids",
              "type": "array",
              "x-go-name": "CardOwnerIDs"
            },
            {
              "description": "Merchant country code",
              "enum": [
                "AFG",
                "ALA",
                "ALB",
                "DZA",
                "ASM",
                "AND",
                "AGO",
                "AIA",
                "ATA",
                "ATG",
                "ARG",
                "ARM",
                "ABW",
                "AUS",
                "AUT",
                "AZE",
                "BHS",
                "BHR",
                "BGD",
                "BRB",
                "BLR",
                "BEL",
                "BLZ",
                "BEN",
                "BMU",
                "BTN",
                "BOL",
                "BES",
                "BIH",
                "BWA",
                "BVT",
                "BRA",
                "IOT",
                "BRN",
                "BGR",
                "BFA",
                "BDI",
                "CPV",
                "KHM",
                "CMR",
                "CAN",
                "CYM",
                "CAF",
                "TCD",
                "CHL",
                "CHN",
                "CXR",
                "CCK",
                "COL",
                "COM",
                "COG",
                "COD",
                "COK",
                "CRI",
                "CIV",
                "HRV",
                "CUB",
                "CUW",
                "CYP",
                "CZE",
                "DNK",
                "DJI",
                "DMA",
                "DOM",
                "ECU",
                "EGY",
                "SLV",
                "GNQ",
                "ERI",
                "EST",
                "ETH",
                "FLK",
                "FRO",
                "FJI",
                "FIN",
                "FRA",
                "GUF",
                "PYF",
                "ATF",
                "GAB",
                "GMB",
                "GEO",
                "DEU",
                "GHA",
                "GIB",
                "GRC",
                "GRL",
                "GRD",
                "GLP",
                "GUM",
                "GTM",
                "GGY",
                "GIN",
                "GNB",
                "GUY",
                "HTI",
                "HMD",
                "VAT",
                "HND",
                "HKG",
                "HUN",
                "ISL",
                "IND",
                "IDN",
                "IRN",
                "IRQ",
                "IRL",
                "IMN",
                "ISR",
                "ITA",
                "JAM",
                "JPN",
                "JEY",
                "JOR",
                "KAZ",
                "KEN",
                "KIR",
                "PRK",
                "KOR",
                "KWT",
                "KGZ",
                "LAO",
                "LVA",
                "LBN",
                "LSO",
                "LBR",
                "LBY",
                "LIE",
                "LTU",
                "LUX",
                "MAC",
                "MKD",
                "MDG",
                "MWI",
                "MYS",
                "MDV",
                "MLI",
                "MLT",
                "MHL",
                "MTQ",
                "MRT",
                "MUS",
                "MYT",
                "MEX",
                "FSM",
                "MDA",
                "MCO",
                "MNG",
                "MNE",
                "MSR",
                "MAR",
                "MOZ",
                "MMR",
                "NAM",
                "NRU",
                "NPL",
                "NLD",
                "NCL",
                "NZL",
                "NIC",
                "NER",
                "NGA",
                "NIU",
                "NFK",
                "MNP",
                "NOR",
                "OMN",
                "PAK",
                "PLW",
                "PSE",
                "PAN",
                "PNG",
                "PRY",
                "PER",
                "PHL",
                "PCN",
                "POL",
                "PRT",
                "PRI",
                "QAT",
                "REU",
                "ROU",
                "RUS",
                "RWA",
                "BLM",
                "SHN",
                "KNA",
                "LCA",
                "MAF",
                "SPM",
                "VCT",
                "WSM",
                "SMR",
                "STP",
                "SAU",
                "SEN",
                "SRB",
                "SYC",
                "SLE",
                "SGP",
                "SXM",
                "SVK",
                "SVN",
                "SLB",
                "SOM",
                "ZAF",
                "SGS",
                "SSD",
                "ESP",
                "LKA",
                "SDN",
                "SUR",
                "SJM",
                "SWZ",
                "SWE",
                "CHE",
                "SYR",
                "TWN",
                "TJK",
                "TZA",
                "THA",
                "TLS",
                "TGO",
                "TKL",
                "TON",
                "TTO",
                "TUN",
                "TUR",
                "TKM",
                "TCA",
                "TUV",
                "UGA",
                "UKR",
                "ARE",
                "GBR",
                "USA",
                "UMI",
                "URY",
                "UZB",
                "VUT",
                "VEN",
                "VNM",
                "VGB",
                "VIR",
                "WLF",
                "ESH",
                "YEM",
                "ZMB",
                "ZWE",
                "UNK",
                "XKX",
                "ANT"
              ],
              "in": "query",
              "name": "merchant_country_code",
              "type": "string",
              "x-go-name": "MerchantCountryCode"
            },
            {
              "description": "Card owner country code",
              "enum": [
                "AFG",
                "ALA",
                "ALB",
                "DZA",
                "ASM",
                "AND",
                "AGO",
                "AIA",
                "ATA",
                "ATG",
                "ARG",
                "ARM",
                "ABW",
                "AUS",
                "AUT",
                "AZE",
                "BHS",
                "BHR",
                "BGD",
                "BRB",
                "BLR",
                "BEL",
                "BLZ",
                "BEN",
                "BMU",
                "BTN",
                "BOL",
                "BES",
                "BIH",
                "BWA",
                "BVT",
                "BRA",
                "IOT",
                "BRN",
                "BGR",
                "BFA",
                "BDI",
                "CPV",
                "KHM",
                "CMR",
                "CAN",
                "CYM",
                "CAF",
                "TCD",
                "CHL",
                "CHN",
                "CXR",
                "CCK",
                "COL",
                "COM",
                "COG",
                "COD",
                "COK",
                "CRI",
                "CIV",
                "HRV",
                "CUB",
                "CUW",
                "CYP",
                "CZE",
                "DNK",
                "DJI",
                "DMA",
                "DOM",
                "ECU",
                "EGY",
                "SLV",
                "GNQ",
                "ERI",
                "EST",
                "ETH",
                "FLK",
                "FRO",
                "FJI",
                "FIN",
                "FRA",
                "GUF",
                "PYF",
                "ATF",
                "GAB",
                "GMB",
                "GEO",
                "DEU",
                "GHA",
                "GIB",
                "GRC",
                "GRL",
                "GRD",
                "GLP",
                "GUM",
                "GTM",
                "GGY",
                "GIN",
                "GNB",
                "GUY",
                "HTI",
                "HMD",
                "VAT",
                "HND",
                "HKG",
                "HUN",
                "ISL",
                "IND",
                "IDN",
                "IRN",
                "IRQ",
                "IRL",
                "IMN",
                "ISR",
                "ITA",
                "JAM",
                "JPN",
                "JEY",
                "JOR",
                "KAZ",
                "KEN",
                "KIR",
                "PRK",
                "KOR",
                "KWT",
                "KGZ",
                "LAO",
                "LVA",
                "LBN",
                "LSO",
                "LBR",
                "LBY",
                "LIE",
                "LTU",
                "LUX",
                "MAC",
                "MKD",
                "MDG",
                "MWI",
                "MYS",
                "MDV",
                "MLI",
                "MLT",
                "MHL",
                "MTQ",
                "MRT",
                "MUS",
                "MYT",
                "MEX",
                "FSM",
                "MDA",
                "MCO",
                "MNG",
                "MNE",
                "MSR",
                "MAR",
                "MOZ",
                "MMR",
                "NAM",
                "NRU",
                "NPL",
                "NLD",
                "NCL",
                "NZL",
                "NIC",
                "NER",
                "NGA",
                "NIU",
                "NFK",
                "MNP",
                "NOR",
                "OMN",
                "PAK",
                "PLW",
                "PSE",
                "PAN",
                "PNG",
                "PRY",
                "PER",
                "PHL",
                "PCN",
                "POL",
                "PRT",
                "PRI",
                "QAT",
                "REU",
                "ROU",
                "RUS",
                "RWA",
                "BLM",
                "SHN",
                "KNA",
                "LCA",
                "MAF",
                "SPM",
                "VCT",
                "WSM",
                "SMR",
                "STP",
                "SAU",
                "SEN",
                "SRB",
                "SYC",
                "SLE",
                "SGP",
                "SXM",
                "SVK",
                "SVN",
                "SLB",
                "SOM",
                "ZAF",
                "SGS",
                "SSD",
                "ESP",
                "LKA",
                "SDN",
                "SUR",
                "SJM",
                "SWZ",
                "SWE",
                "CHE",
                "SYR",
                "TWN",
                "TJK",
                "TZA",
                "THA",
                "TLS",
                "TGO",
                "TKL",
                "TON",
                "TTO",
                "TUN",
                "TUR",
                "TKM",
                "TCA",
                "TUV",
                "UGA",
                "UKR",
                "ARE",
                "GBR",
                "USA",
                "UMI",
                "URY",
                "UZB",
                "VUT",
                "VEN",
                "VNM",
                "VGB",
                "VIR",
                "WLF",
                "ESH",
                "YEM",
                "ZMB",
                "ZWE",
                "UNK",
                "XKX",
                "ANT"
              ],
              "in": "query",
              "name": "card_owner_country_code",
              "type": "string",
              "x-go-name": "CardOwnerCountryCode"
            },
            {
              "description": "Assigned to name parameter",
              "in": "query",
              "name": "assigned_to_name",
              "type": "string",
              "x-go-name": "AssignedToName"
            },
            {
              "description": "Scoring fields, repeated parameter",
              "in": "query",
              "items": {
                "enum": [
                  "account_velocity_amounts",
                  "account_velocity_counts",
                  "avg_month_amount",
                  "black_list",
                  "country_change_within_24h",
                  "diff_currencies",
                  "high_cash_volume",
                  "high_number_of_declines",
                  "high_risk_country",
                  "high_risk_country_decline_all",
                  "high_risk_country_decline_atm",
                  "high_risk_country_mark_suspicious",
                  "high_risk_mcc_purchase",
                  "invalid_pin",
                  "large_amount",
                  "last_month_declines",
                  "last_month_high_risk_country",
                  "last_month_refund",
                  "magnetic_stripe",
                  "magnetic_stripe_and_card_data_entered_manually",
                  "magnetic_stripe_on_chip_capable_terminal",
                  "non_neighboring_country",
                  "not_enough_funds",
                  "reversal_refund",
                  "same_merchant_1_minutes",
                  "same_merchant_24h",
                  "sequence_declines",
                  "transaction_frequency",
                  "within_1_minute",
                  "within_1_minute_transactions_count",
                  "wrong_cvv"
                ],
                "type": "string"
              },
              "name": "scoring",
              "type": "array",
              "x-go-name": "ScoringFields"
            },
            {
              "description": "Minimum scoring parameter",
              "format": "int32",
              "in": "query",
              "name": "minimum_scoring",
              "type": "integer",
              "x-go-name": "MinimumScoring"
            }
          ],
          "responses": {
            "200": {
              "description": "GetFraudCasesResponse",
              "schema": {
                "$ref": "#/definitions/GetFraudCasesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get fraud cases",
          "tags": [
            "Fraud-Case"
          ]
        }
      },
      "/v1/fraud-cases/card-owners": {
        "get": {
          "description": "Get fraud cases card owners",
          "operationId": "GetFraudCasesCardOwners",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "CardOwnerName defines company name or person first name and last name",
              "in": "query",
              "maximum": 201,
              "name": "card_owner_name",
              "type": "string",
              "x-go-name": "CardOwnerName"
            },
            {
              "description": "FromCasesCount defines a beginning cases count number",
              "format": "int64",
              "in": "query",
              "minimum": 1,
              "name": "from_cases_count",
              "type": "integer",
              "x-go-name": "FromCasesCount"
            },
            {
              "description": "ToCasesCount defines an end cases count number",
              "format": "int64",
              "in": "query",
              "minimum": 1,
              "name": "to_cases_count",
              "type": "integer",
              "x-go-name": "ToCasesCount"
            }
          ],
          "responses": {
            "200": {
              "description": "GetFraudCasesCardOwnersResponse",
              "schema": {
                "$ref": "#/definitions/GetFraudCasesCardOwnersResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get fraud cases card owners",
          "tags": [
            "Fraud-Case"
          ]
        }
      },
      "/v1/fraud-cases/report": {
        "get": {
          "description": "Download fraud cases report",
          "operationId": "DownloadFraudCasesReport",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "required": true,
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "required": true,
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "Report columns is a **repeated** query parameter to specify columns to return in the report.",
              "enum": [
                "case_id",
                "card_owner_name",
                "card_id",
                "authorization_date",
                "authorization_type",
                "authorization_amount",
                "authorization_currency",
                "country",
                "mcc",
                "score_reasons",
                "risk_score",
                "risk_zone",
                "risk_status",
                "classification_status",
                "last_commented_by"
              ],
              "in": "query",
              "name": "report_columns",
              "required": true,
              "type": "string",
              "x-go-name": "ReportColumns"
            },
            {
              "description": "Report format",
              "enum": [
                "excel"
              ],
              "in": "query",
              "name": "report_format",
              "required": true,
              "type": "string",
              "x-go-name": "ReportFormat"
            },
            {
              "description": "Field to sort by **repeated** (format \u003cfield_name\u003e or \u003cfield_name\u003e.\u003casc | desc\u003e (asc by default))",
              "enum": [
                "case_id",
                "card_owner_name",
                "card_id",
                "authorization_date",
                "merchant_name",
                "risk_score",
                "risk_zone",
                "risk_status",
                "case_status",
                "assigned_to_name"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderFieldName"
            },
            {
              "description": "CaseStatuses is **repeated** query parameter to specify case statuses to return.",
              "enum": [
                "Pending",
                "Positive",
                "Negative",
                "Escalation",
                "NotClassified"
              ],
              "in": "query",
              "name": "case_statuses",
              "type": "string",
              "x-go-name": "CaseStatuses"
            },
            {
              "description": "RiskStatuses is **repeated** query parameter to specify risk statuses to return.",
              "enum": [
                "Unknown",
                "Approved",
                "Declined",
                "Suspicious",
                "FreezeCard"
              ],
              "in": "query",
              "name": "risk_statuses",
              "type": "string",
              "x-go-name": "RiskStatuses"
            },
            {
              "description": "RiskZones is **repeated** query parameter to specify risk zones to return.",
              "enum": [
                "Low",
                "Medium",
                "High"
              ],
              "in": "query",
              "name": "risk_zones",
              "type": "string",
              "x-go-name": "RiskZones"
            },
            {
              "description": "FromRiskScore defines a beginning risk score number of fraud case",
              "format": "int64",
              "in": "query",
              "maximum": 100,
              "minimum": 0,
              "name": "from_risk_score",
              "type": "integer",
              "x-go-name": "FromRiskScore"
            },
            {
              "description": "ToRiskScore defines an end risk score number of fraud case",
              "format": "int64",
              "in": "query",
              "maximum": 100,
              "minimum": 0,
              "name": "to_risk_score",
              "type": "integer",
              "x-go-name": "ToRiskScore"
            },
            {
              "description": "Card owner IDs",
              "in": "query",
              "items": {
                "format": "uuid4",
                "type": "string"
              },
              "name": "card_owner_ids",
              "type": "array",
              "x-go-name": "CardOwnerIDs"
            },
            {
              "description": "Merchant country code",
              "enum": [
                "AFG",
                "ALA",
                "ALB",
                "DZA",
                "ASM",
                "AND",
                "AGO",
                "AIA",
                "ATA",
                "ATG",
                "ARG",
                "ARM",
                "ABW",
                "AUS",
                "AUT",
                "AZE",
                "BHS",
                "BHR",
                "BGD",
                "BRB",
                "BLR",
                "BEL",
                "BLZ",
                "BEN",
                "BMU",
                "BTN",
                "BOL",
                "BES",
                "BIH",
                "BWA",
                "BVT",
                "BRA",
                "IOT",
                "BRN",
                "BGR",
                "BFA",
                "BDI",
                "CPV",
                "KHM",
                "CMR",
                "CAN",
                "CYM",
                "CAF",
                "TCD",
                "CHL",
                "CHN",
                "CXR",
                "CCK",
                "COL",
                "COM",
                "COG",
                "COD",
                "COK",
                "CRI",
                "CIV",
                "HRV",
                "CUB",
                "CUW",
                "CYP",
                "CZE",
                "DNK",
                "DJI",
                "DMA",
                "DOM",
                "ECU",
                "EGY",
                "SLV",
                "GNQ",
                "ERI",
                "EST",
                "ETH",
                "FLK",
                "FRO",
                "FJI",
                "FIN",
                "FRA",
                "GUF",
                "PYF",
                "ATF",
                "GAB",
                "GMB",
                "GEO",
                "DEU",
                "GHA",
                "GIB",
                "GRC",
                "GRL",
                "GRD",
                "GLP",
                "GUM",
                "GTM",
                "GGY",
                "GIN",
                "GNB",
                "GUY",
                "HTI",
                "HMD",
                "VAT",
                "HND",
                "HKG",
                "HUN",
                "ISL",
                "IND",
                "IDN",
                "IRN",
                "IRQ",
                "IRL",
                "IMN",
                "ISR",
                "ITA",
                "JAM",
                "JPN",
                "JEY",
                "JOR",
                "KAZ",
                "KEN",
                "KIR",
                "PRK",
                "KOR",
                "KWT",
                "KGZ",
                "LAO",
                "LVA",
                "LBN",
                "LSO",
                "LBR",
                "LBY",
                "LIE",
                "LTU",
                "LUX",
                "MAC",
                "MKD",
                "MDG",
                "MWI",
                "MYS",
                "MDV",
                "MLI",
                "MLT",
                "MHL",
                "MTQ",
                "MRT",
                "MUS",
                "MYT",
                "MEX",
                "FSM",
                "MDA",
                "MCO",
                "MNG",
                "MNE",
                "MSR",
                "MAR",
                "MOZ",
                "MMR",
                "NAM",
                "NRU",
                "NPL",
                "NLD",
                "NCL",
                "NZL",
                "NIC",
                "NER",
                "NGA",
                "NIU",
                "NFK",
                "MNP",
                "NOR",
                "OMN",
                "PAK",
                "PLW",
                "PSE",
                "PAN",
                "PNG",
                "PRY",
                "PER",
                "PHL",
                "PCN",
                "POL",
                "PRT",
                "PRI",
                "QAT",
                "REU",
                "ROU",
                "RUS",
                "RWA",
                "BLM",
                "SHN",
                "KNA",
                "LCA",
                "MAF",
                "SPM",
                "VCT",
                "WSM",
                "SMR",
                "STP",
                "SAU",
                "SEN",
                "SRB",
                "SYC",
                "SLE",
                "SGP",
                "SXM",
                "SVK",
                "SVN",
                "SLB",
                "SOM",
                "ZAF",
                "SGS",
                "SSD",
                "ESP",
                "LKA",
                "SDN",
                "SUR",
                "SJM",
                "SWZ",
                "SWE",
                "CHE",
                "SYR",
                "TWN",
                "TJK",
                "TZA",
                "THA",
                "TLS",
                "TGO",
                "TKL",
                "TON",
                "TTO",
                "TUN",
                "TUR",
                "TKM",
                "TCA",
                "TUV",
                "UGA",
                "UKR",
                "ARE",
                "GBR",
                "USA",
                "UMI",
                "URY",
                "UZB",
                "VUT",
                "VEN",
                "VNM",
                "VGB",
                "VIR",
                "WLF",
                "ESH",
                "YEM",
                "ZMB",
                "ZWE",
                "UNK",
                "XKX",
                "ANT"
              ],
              "in": "query",
              "name": "merchant_country_code",
              "type": "string",
              "x-go-name": "MerchantCountryCode"
            },
            {
              "description": "Card owner country code",
              "enum": [
                "AFG",
                "ALA",
                "ALB",
                "DZA",
                "ASM",
                "AND",
                "AGO",
                "AIA",
                "ATA",
                "ATG",
                "ARG",
                "ARM",
                "ABW",
                "AUS",
                "AUT",
                "AZE",
                "BHS",
                "BHR",
                "BGD",
                "BRB",
                "BLR",
                "BEL",
                "BLZ",
                "BEN",
                "BMU",
                "BTN",
                "BOL",
                "BES",
                "BIH",
                "BWA",
                "BVT",
                "BRA",
                "IOT",
                "BRN",
                "BGR",
                "BFA",
                "BDI",
                "CPV",
                "KHM",
                "CMR",
                "CAN",
                "CYM",
                "CAF",
                "TCD",
                "CHL",
                "CHN",
                "CXR",
                "CCK",
                "COL",
                "COM",
                "COG",
                "COD",
                "COK",
                "CRI",
                "CIV",
                "HRV",
                "CUB",
                "CUW",
                "CYP",
                "CZE",
                "DNK",
                "DJI",
                "DMA",
                "DOM",
                "ECU",
                "EGY",
                "SLV",
                "GNQ",
                "ERI",
                "EST",
                "ETH",
                "FLK",
                "FRO",
                "FJI",
                "FIN",
                "FRA",
                "GUF",
                "PYF",
                "ATF",
                "GAB",
                "GMB",
                "GEO",
                "DEU",
                "GHA",
                "GIB",
                "GRC",
                "GRL",
                "GRD",
                "GLP",
                "GUM",
                "GTM",
                "GGY",
                "GIN",
                "GNB",
                "GUY",
                "HTI",
                "HMD",
                "VAT",
                "HND",
                "HKG",
                "HUN",
                "ISL",
                "IND",
                "IDN",
                "IRN",
                "IRQ",
                "IRL",
                "IMN",
                "ISR",
                "ITA",
                "JAM",
                "JPN",
                "JEY",
                "JOR",
                "KAZ",
                "KEN",
                "KIR",
                "PRK",
                "KOR",
                "KWT",
                "KGZ",
                "LAO",
                "LVA",
                "LBN",
                "LSO",
                "LBR",
                "LBY",
                "LIE",
                "LTU",
                "LUX",
                "MAC",
                "MKD",
                "MDG",
                "MWI",
                "MYS",
                "MDV",
                "MLI",
                "MLT",
                "MHL",
                "MTQ",
                "MRT",
                "MUS",
                "MYT",
                "MEX",
                "FSM",
                "MDA",
                "MCO",
                "MNG",
                "MNE",
                "MSR",
                "MAR",
                "MOZ",
                "MMR",
                "NAM",
                "NRU",
                "NPL",
                "NLD",
                "NCL",
                "NZL",
                "NIC",
                "NER",
                "NGA",
                "NIU",
                "NFK",
                "MNP",
                "NOR",
                "OMN",
                "PAK",
                "PLW",
                "PSE",
                "PAN",
                "PNG",
                "PRY",
                "PER",
                "PHL",
                "PCN",
                "POL",
                "PRT",
                "PRI",
                "QAT",
                "REU",
                "ROU",
                "RUS",
                "RWA",
                "BLM",
                "SHN",
                "KNA",
                "LCA",
                "MAF",
                "SPM",
                "VCT",
                "WSM",
                "SMR",
                "STP",
                "SAU",
                "SEN",
                "SRB",
                "SYC",
                "SLE",
                "SGP",
                "SXM",
                "SVK",
                "SVN",
                "SLB",
                "SOM",
                "ZAF",
                "SGS",
                "SSD",
                "ESP",
                "LKA",
                "SDN",
                "SUR",
                "SJM",
                "SWZ",
                "SWE",
                "CHE",
                "SYR",
                "TWN",
                "TJK",
                "TZA",
                "THA",
                "TLS",
                "TGO",
                "TKL",
                "TON",
                "TTO",
                "TUN",
                "TUR",
                "TKM",
                "TCA",
                "TUV",
                "UGA",
                "UKR",
                "ARE",
                "GBR",
                "USA",
                "UMI",
                "URY",
                "UZB",
                "VUT",
                "VEN",
                "VNM",
                "VGB",
                "VIR",
                "WLF",
                "ESH",
                "YEM",
                "ZMB",
                "ZWE",
                "UNK",
                "XKX",
                "ANT"
              ],
              "in": "query",
              "name": "card_owner_country_code",
              "type": "string",
              "x-go-name": "CardOwnerCountryCode"
            },
            {
              "description": "Assigned to name parameter",
              "in": "query",
              "name": "assigned_to_name",
              "type": "string",
              "x-go-name": "AssignedToName"
            },
            {
              "description": "Scoring fields, repeated parameter",
              "in": "query",
              "items": {
                "enum": [
                  "account_velocity_amounts",
                  "account_velocity_counts",
                  "avg_month_amount",
                  "black_list",
                  "country_change_within_24h",
                  "diff_currencies",
                  "high_cash_volume",
                  "high_number_of_declines",
                  "high_risk_country",
                  "high_risk_country_decline_all",
                  "high_risk_country_decline_atm",
                  "high_risk_country_mark_suspicious",
                  "high_risk_mcc_purchase",
                  "invalid_pin",
                  "large_amount",
                  "last_month_declines",
                  "last_month_high_risk_country",
                  "last_month_refund",
                  "magnetic_stripe",
                  "magnetic_stripe_and_card_data_entered_manually",
                  "magnetic_stripe_on_chip_capable_terminal",
                  "non_neighboring_country",
                  "not_enough_funds",
                  "reversal_refund",
                  "same_merchant_1_minutes",
                  "same_merchant_24h",
                  "sequence_declines",
                  "transaction_frequency",
                  "within_1_minute",
                  "within_1_minute_transactions_count",
                  "wrong_cvv"
                ],
                "type": "string"
              },
              "name": "scoring",
              "type": "array",
              "x-go-name": "ScoringFields"
            },
            {
              "description": "Minimum scoring parameter",
              "format": "int32",
              "in": "query",
              "name": "minimum_scoring",
              "type": "integer",
              "x-go-name": "MinimumScoring"
            }
          ],
          "responses": {
            "200": {
              "description": "DownloadFraudCasesReportResponse",
              "schema": {
                "$ref": "#/definitions/DownloadFraudCasesReportResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Download fraud cases report",
          "tags": [
            "Fraud-Case"
          ]
        }
      },
      "/v1/fraud-cases/{fraud_case_id}": {
        "get": {
          "description": "Get fraud case",
          "operationId": "GetFraudCase",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Fraud case ID",
              "format": "uuid4",
              "in": "path",
              "name": "fraud_case_id",
              "required": true,
              "type": "string",
              "x-go-name": "FraudCaseID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetFraudCaseResponse",
              "schema": {
                "$ref": "#/definitions/GetFraudCaseResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get fraud case",
          "tags": [
            "Fraud-Case"
          ]
        },
        "put": {
          "description": "Update fraud case",
          "operationId": "UpdateFraudCase",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Fraud case ID",
              "format": "uuid4",
              "in": "path",
              "name": "fraud_case_id",
              "required": true,
              "type": "string",
              "x-go-name": "FraudCaseID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateFraudCaseRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update fraud case",
          "tags": [
            "Fraud-Case"
          ]
        }
      },
      "/v1/fraud-cases/{fraud_case_id}/history": {
        "get": {
          "description": "Get fraud case history",
          "operationId": "GetFraudCaseHistory",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Fraud case ID",
              "format": "uuid4",
              "in": "path",
              "name": "fraud_case_id",
              "required": true,
              "type": "string",
              "x-go-name": "FraudCaseID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (can be used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (can be used with from_record parameter in pair). \u003cbr\u003e\nIf not specified, default value 1000 is used.",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            },
            {
              "description": "Field to sort by **repeated** (format \u003cfield_name\u003e or \u003cfield_name\u003e.\u003casc | desc\u003e (asc by default))",
              "enum": [
                "created_at",
                "created_by",
                "old_case_status",
                "new_case_status",
                "description"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderFieldName"
            }
          ],
          "responses": {
            "200": {
              "description": "GetFraudCaseHistoryResponse",
              "schema": {
                "$ref": "#/definitions/GetFraudCaseHistoryResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get fraud case history",
          "tags": [
            "Fraud-Case"
          ]
        }
      },
      "/v1/kyc-checks": {
        "get": {
          "description": "Returns list of all KYC checks that are present for given person.",
          "operationId": "GetKYCChecks",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "default": "created_at",
              "description": "Is a **repeated** query parameter to sort kyc checks to return. Sorting could be done by direct and backward order (asc or desc).\nDefault order direct \"asc\".\nFormat: \u003cfield_name\u003e or \u003cfield_name\u003e.\u003casc | desc\u003e (order_field=status\u0026order_field=created_at.desc).",
              "enum": [
                "created_at",
                "status"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetKYCChecksResponse",
              "schema": {
                "$ref": "#/definitions/GetKYCChecksResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get KYC checks",
          "tags": [
            "KYC-Check"
          ]
        },
        "post": {
          "description": "Used to create initial KYC check, which will be used to identify a particular KYC check for a given person and to upload documents.\n\nAfter Person is created, client has to create KYC check with this endpoint and provide necessary information about the person identification result. This will create KYC check with status Created, Person has NotConfirmed KYC status at this point. After KYC check is created, ID will be returned, which should be used to upload necessary identification documents with POST /v1/kyc-documents endpoint.",
          "operationId": "CreateKYCCheck",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateKYCCheckRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreateKYCCheckResponse",
              "schema": {
                "$ref": "#/definitions/CreateKYCCheckResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create KYC check",
          "tags": [
            "KYC-Check"
          ]
        }
      },
      "/v1/kyc-checks/{kyc_check_id}": {
        "delete": {
          "description": "It is only possible to delete KYC check that was not yet initiated via POST /v1/kyc-checks/{kyc_check_id}/initiate endpoint.",
          "operationId": "DeleteKYCCheck",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "KYC Check ID",
              "format": "uuid4",
              "in": "path",
              "name": "kyc_check_id",
              "required": true,
              "type": "string",
              "x-go-name": "KYCCheckID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete KYC check",
          "tags": [
            "KYC-Check"
          ]
        },
        "get": {
          "description": "Returns detailed information about KYC check and current status.\n\nIf KYC check is Approved by AML, then Person's KYC check is changed to Approved status and client will receive KYC Check status update webhook. Afterwards, AML team has to approve the person separately and client will receive KYC status update webhook.",
          "operationId": "GetKYCCheck",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "KYC Check ID",
              "format": "uuid4",
              "in": "path",
              "name": "kyc_check_id",
              "required": true,
              "type": "string",
              "x-go-name": "KYCCheckID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetKYCCheckResponse",
              "schema": {
                "$ref": "#/definitions/GetKYCCheckResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get KYC check",
          "tags": [
            "KYC-Check"
          ]
        }
      },
      "/v1/kyc-checks/{kyc_check_id}/initiate": {
        "post": {
          "description": "This endpoint should be used when required documents are uploaded via POST /v1/kyc-documents and KYC check has Created status.\n\nAfter KYC check initiation, AML team can verify the information and proceed with KYC decision: to approve or decline the person. This action will move the KYC check to status InProgress, Person has Pending KYC status at this point.",
          "operationId": "InitiateKYCCheck",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "KYC Check ID",
              "format": "uuid4",
              "in": "path",
              "name": "kyc_check_id",
              "required": true,
              "type": "string",
              "x-go-name": "KYCCheckID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Initiate KYC check",
          "tags": [
            "KYC-Check"
          ]
        }
      },
      "/v1/kyc-documents": {
        "post": {
          "description": "It is used to upload KYC documents for KYC check that was created for a given person. It is required to upload documents in order to proceed with KYC check initiation.\n\nAfter documents are uploaded, client has to confirm that all information is correct and KYC check has to be initiated with POST /v1/kyc-checks/{kyc_check_id}/initiate endpoint.\n\nRequired documents for upload:\n\n1. Selfie Image\n\n2. Identification Report\n\n3. Document: National ID (both front and back) or Residence Permit (both front and back) or Passport",
          "operationId": "UploadKYCDocument",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Specifies the media type (format) of the request or response body, in \"Content-Type: multipart/form-data; boundary=[your unique boundary]\" format",
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "KYC check ID",
              "format": "uuid4",
              "in": "formData",
              "name": "kyc_check_id",
              "required": true,
              "type": "string",
              "x-go-name": "KYCCheckID"
            },
            {
              "description": "File to upload. Supported types: pdf, jpeg, jpg, png. File max size is 100MB. Filename max length is 1024 chars",
              "in": "formData",
              "name": "file",
              "required": true,
              "type": "file",
              "x-go-name": "File"
            },
            {
              "description": "Issuer country code in ISO 3166-1 Alpha-3 code standard",
              "enum": [
                "AFG",
                "ALA",
                "ALB",
                "DZA",
                "ASM",
                "AND",
                "AGO",
                "AIA",
                "ATA",
                "ATG",
                "ARG",
                "ARM",
                "ABW",
                "AUS",
                "AUT",
                "AZE",
                "BHS",
                "BHR",
                "BGD",
                "BRB",
                "BLR",
                "BEL",
                "BLZ",
                "BEN",
                "BMU",
                "BTN",
                "BOL",
                "BES",
                "BIH",
                "BWA",
                "BVT",
                "BRA",
                "IOT",
                "BRN",
                "BGR",
                "BFA",
                "BDI",
                "CPV",
                "KHM",
                "CMR",
                "CAN",
                "CYM",
                "CAF",
                "TCD",
                "CHL",
                "CHN",
                "CXR",
                "CCK",
                "COL",
                "COM",
                "COG",
                "COD",
                "COK",
                "CRI",
                "CIV",
                "HRV",
                "CUB",
                "CUW",
                "CYP",
                "CZE",
                "DNK",
                "DJI",
                "DMA",
                "DOM",
                "ECU",
                "EGY",
                "SLV",
                "GNQ",
                "ERI",
                "EST",
                "ETH",
                "FLK",
                "FRO",
                "FJI",
                "FIN",
                "FRA",
                "GUF",
                "PYF",
                "ATF",
                "GAB",
                "GMB",
                "GEO",
                "DEU",
                "GHA",
                "GIB",
                "GRC",
                "GRL",
                "GRD",
                "GLP",
                "GUM",
                "GTM",
                "GGY",
                "GIN",
                "GNB",
                "GUY",
                "HTI",
                "HMD",
                "VAT",
                "HND",
                "HKG",
                "HUN",
                "ISL",
                "IND",
                "IDN",
                "IRN",
                "IRQ",
                "IRL",
                "IMN",
                "ISR",
                "ITA",
                "JAM",
                "JPN",
                "JEY",
                "JOR",
                "KAZ",
                "KEN",
                "KIR",
                "PRK",
                "KOR",
                "KWT",
                "KGZ",
                "LAO",
                "LVA",
                "LBN",
                "LSO",
                "LBR",
                "LBY",
                "LIE",
                "LTU",
                "LUX",
                "MAC",
                "MKD",
                "MDG",
                "MWI",
                "MYS",
                "MDV",
                "MLI",
                "MLT",
                "MHL",
                "MTQ",
                "MRT",
                "MUS",
                "MYT",
                "MEX",
                "FSM",
                "MDA",
                "MCO",
                "MNG",
                "MNE",
                "MSR",
                "MAR",
                "MOZ",
                "MMR",
                "NAM",
                "NRU",
                "NPL",
                "NLD",
                "NCL",
                "NZL",
                "NIC",
                "NER",
                "NGA",
                "NIU",
                "NFK",
                "MNP",
                "NOR",
                "OMN",
                "PAK",
                "PLW",
                "PSE",
                "PAN",
                "PNG",
                "PRY",
                "PER",
                "PHL",
                "PCN",
                "POL",
                "PRT",
                "PRI",
                "QAT",
                "REU",
                "ROU",
                "RUS",
                "RWA",
                "BLM",
                "SHN",
                "KNA",
                "LCA",
                "MAF",
                "SPM",
                "VCT",
                "WSM",
                "SMR",
                "STP",
                "SAU",
                "SEN",
                "SRB",
                "SYC",
                "SLE",
                "SGP",
                "SXM",
                "SVK",
                "SVN",
                "SLB",
                "SOM",
                "ZAF",
                "SGS",
                "SSD",
                "ESP",
                "LKA",
                "SDN",
                "SUR",
                "SJM",
                "SWZ",
                "SWE",
                "CHE",
                "SYR",
                "TWN",
                "TJK",
                "TZA",
                "THA",
                "TLS",
                "TGO",
                "TKL",
                "TON",
                "TTO",
                "TUN",
                "TUR",
                "TKM",
                "TCA",
                "TUV",
                "UGA",
                "UKR",
                "ARE",
                "GBR",
                "USA",
                "UMI",
                "URY",
                "UZB",
                "VUT",
                "VEN",
                "VNM",
                "VGB",
                "VIR",
                "WLF",
                "ESH",
                "YEM",
                "ZMB",
                "ZWE",
                "UNK",
                "XKX",
                "ANT"
              ],
              "in": "formData",
              "name": "issuer",
              "type": "string",
              "x-go-name": "Issuer"
            },
            {
              "description": "Number",
              "in": "formData",
              "maxLength": 50,
              "name": "number",
              "type": "string",
              "x-go-name": "Number"
            },
            {
              "description": "Type",
              "enum": [
                "IDVDocument",
                "IDVSelfieImage",
                "IDVReport"
              ],
              "in": "formData",
              "name": "type",
              "required": true,
              "type": "string",
              "x-go-name": "Type"
            },
            {
              "description": "Subtype",
              "enum": [
                "NationalIDBack",
                "NationalIDFront",
                "Passport",
                "ResidencePermitBack",
                "ResidencePermitFront"
              ],
              "in": "formData",
              "name": "subtype",
              "type": "string",
              "x-go-name": "Subtype"
            }
          ],
          "responses": {
            "201": {
              "description": "UploadKYCDocumentResponse",
              "schema": {
                "$ref": "#/definitions/UploadKYCDocumentResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "summary": "Upload KYC documents",
          "tags": [
            "KYC-Document"
          ]
        }
      },
      "/v1/kyc-documents/{kyc_document_id}": {
        "get": {
          "description": "Returns details of KYC documents.",
          "operationId": "GetKYCDocumentDetails",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "KYC Document ID",
              "format": "uuid4",
              "in": "path",
              "name": "kyc_document_id",
              "required": true,
              "type": "string",
              "x-go-name": "KYCDocumentID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetKYCDocumentDetailsResponse",
              "schema": {
                "$ref": "#/definitions/GetKYCDocumentDetailsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get KYC documents details",
          "tags": [
            "KYC-Document"
          ]
        }
      },
      "/v1/payment-documents": {
        "post": {
          "description": "Add payment documents",
          "operationId": "AddPaymentDocuments",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Specifies the media type (format) of the request or response body, in \"Content-Type: multipart/form-data; boundary=[your unique boundary]\" format",
              "in": "header",
              "name": "Content-Type",
              "required": true,
              "type": "string",
              "x-go-name": "ContentType"
            },
            {
              "description": "Payment ID",
              "format": "uuid4",
              "in": "formData",
              "name": "payment_id",
              "required": true,
              "type": "string",
              "x-go-name": "PaymentID"
            },
            {
              "description": "Payment type",
              "in": "formData",
              "name": "payment_type",
              "required": true,
              "type": "string",
              "x-go-name": "PaymentType"
            },
            {
              "description": "Payment documents to upload. Total size of files should not exceed 12MB. Supported types: png, jpg, pdf.\nEach file should be sent under the same key \"payment_documents\" and should not exceed 3MB.",
              "in": "formData",
              "name": "payment_documents",
              "required": true,
              "type": "file",
              "x-go-name": "PaymentDocuments"
            }
          ],
          "responses": {
            "201": {
              "description": "AddPaymentDocumentsResponse",
              "schema": {
                "$ref": "#/definitions/AddPaymentDocumentsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Add payment documents",
          "tags": [
            "Payment-Document"
          ]
        }
      },
      "/v1/payment-documents/download": {
        "get": {
          "description": "Download payment documents, if there's only 1 file it will be returned unzipped, otherwise files will be zipped in one archive",
          "operationId": "DownloadPaymentDocuments",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Payment ID",
              "format": "uuid4",
              "in": "query",
              "name": "payment_id",
              "required": true,
              "type": "string",
              "x-go-name": "PaymentID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "DownloadPaymentDocumentsResponse",
              "schema": {
                "$ref": "#/definitions/DownloadPaymentDocumentsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Download payment documents",
          "tags": [
            "Payment-Document"
          ]
        }
      },
      "/v1/payment-documents/thumbnails": {
        "get": {
          "description": "Get payment documents thumbnail",
          "operationId": "GetPaymentDocumentThumbnails",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Payment ID",
              "format": "uuid4",
              "in": "query",
              "name": "payment_id",
              "required": true,
              "type": "string",
              "x-go-name": "PaymentID"
            },
            {
              "description": "Payment type",
              "enum": [
                "transaction",
                "authorization"
              ],
              "in": "query",
              "name": "payment_type",
              "required": true,
              "type": "string",
              "x-go-name": "PaymentType"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPaymentDocumentThumbnailsResponse",
              "schema": {
                "$ref": "#/definitions/GetPaymentDocumentThumbnailsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get payment documents thumbnail",
          "tags": [
            "Payment-Document"
          ]
        }
      },
      "/v1/payment-documents/{payment_document_id}": {
        "delete": {
          "description": "Delete payment document",
          "operationId": "DeletePaymentDocument",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "PaymentDocument ID",
              "format": "uuid4",
              "in": "path",
              "name": "payment_document_id",
              "required": true,
              "type": "string",
              "x-go-name": "PaymentDocumentID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete payment document",
          "tags": [
            "Payment-Document"
          ]
        },
        "get": {
          "description": "Get payment document",
          "operationId": "GetPaymentDocument",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "PaymentDocument ID",
              "format": "uuid4",
              "in": "path",
              "name": "payment_document_id",
              "required": true,
              "type": "string",
              "x-go-name": "PaymentDocumentID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPaymentDocumentResponse",
              "schema": {
                "$ref": "#/definitions/GetPaymentDocumentResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get payment document",
          "tags": [
            "Payment-Document"
          ]
        }
      },
      "/v1/payment-metadata": {
        "get": {
          "description": "Get payment metadata",
          "operationId": "GetPaymentMetadata",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Payment ID",
              "format": "uuid4",
              "in": "query",
              "name": "payment_id",
              "required": true,
              "type": "string",
              "x-go-name": "PaymentID"
            },
            {
              "description": "Payment type",
              "enum": [
                "transaction",
                "authorization"
              ],
              "in": "query",
              "name": "payment_type",
              "required": true,
              "type": "string",
              "x-go-name": "PaymentType"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPaymentMetadataResponse",
              "schema": {
                "$ref": "#/definitions/GetPaymentMetadataResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get payment metadata",
          "tags": [
            "Payment-Metadata"
          ]
        },
        "post": {
          "description": "Add payment metadata",
          "operationId": "AddPaymentMetadata",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "Request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AddPaymentMetadataRequest"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "AddPaymentMetadataResponse",
              "schema": {
                "$ref": "#/definitions/AddPaymentMetadataResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Add payment metadata",
          "tags": [
            "Payment-Metadata"
          ]
        }
      },
      "/v1/payment-metadata/{payment_metadata_id}": {
        "delete": {
          "description": "Delete payment metadata",
          "operationId": "DeletePaymentMetadata",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Payment metadata ID",
              "format": "uuid4",
              "in": "path",
              "name": "payment_metadata_id",
              "required": true,
              "type": "string",
              "x-go-name": "PaymentMetadataID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete payment metadata",
          "tags": [
            "Payment-Metadata"
          ]
        },
        "patch": {
          "description": "Update payment metadata",
          "operationId": "UpdatePaymentMetadata",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Payment metadata ID",
              "format": "uuid4",
              "in": "path",
              "name": "payment_metadata_id",
              "required": true,
              "type": "string",
              "x-go-name": "PaymentMetadataID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdatePaymentMetadataRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdatePaymentMetadataResponse",
              "schema": {
                "$ref": "#/definitions/UpdatePaymentMetadataResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update payment metadata",
          "tags": [
            "Payment-Metadata"
          ]
        }
      },
      "/v1/payments/authorizations": {
        "get": {
          "description": "Get product authorizations",
          "operationId": "GetAuthorizationsByProductID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "default": "created_at",
              "description": "OrderField is **repeated** query parameter to specify authorization payments order by.",
              "enum": [
                "id",
                "card_id",
                "merchant_name",
                "merchant_category_code",
                "merchant_city",
                "merchant_country_code",
                "response_code",
                "transaction_amount",
                "transaction_currency_code",
                "account_amount",
                "account_currency_code",
                "created_at"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (can be used in pair with to_date parameter).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (can be used with from_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAuthorizationsByProductIDResponse",
              "schema": {
                "$ref": "#/definitions/GetAuthorizationsByProductIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get product authorizations",
          "tags": [
            "Authorizations"
          ]
        }
      },
      "/v1/payments/transactions": {
        "get": {
          "description": "Get product transactions",
          "operationId": "GetTransactionsByProductID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "default": "created_at",
              "description": "OrderField is **repeated** query parameter to specify transaction payments order by.",
              "enum": [
                "id",
                "card_id",
                "merchant_name",
                "merchant_category_code",
                "merchant_city",
                "merchant_country_code",
                "transaction_amount",
                "transaction_currency_code",
                "account_amount",
                "account_currency_code",
                "created_at"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "default": "created_at",
              "description": "Field to get records by date: created_at, processed_at",
              "in": "query",
              "name": "date_field",
              "type": "string",
              "x-go-name": "DateField"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (can be used in pair with to_date parameter).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (can be used with from_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            }
          ],
          "responses": {
            "200": {
              "description": "GetTransactionsByProductIDResponse",
              "schema": {
                "$ref": "#/definitions/GetTransactionsByProductIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get product transactions",
          "tags": [
            "Transactions"
          ]
        }
      },
      "/v1/pending-orders": {
        "get": {
          "description": "Get pending orders",
          "operationId": "GetPendingOrders",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "default": "created_at",
              "description": "Field to sort by: masked_card_number, created_at, status",
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPendingOrdersResponse",
              "schema": {
                "$ref": "#/definitions/GetPendingOrdersResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get pending orders",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/persons": {
        "get": {
          "description": "Search persons. If no search parameters are provided, then returns only active persons.",
          "operationId": "SearchPersons",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person first name to search",
              "in": "query",
              "name": "first_name",
              "type": "string",
              "x-go-name": "FirstName"
            },
            {
              "description": "Person last name to search",
              "in": "query",
              "name": "last_name",
              "type": "string",
              "x-go-name": "LastName"
            },
            {
              "description": "Person personal number to search",
              "in": "query",
              "name": "personal_number",
              "type": "string",
              "x-go-name": "PersonalNumber"
            },
            {
              "description": "Person phone or mobile to search",
              "in": "query",
              "name": "mobile",
              "type": "string",
              "x-go-name": "Mobile"
            },
            {
              "description": "Person email to search",
              "in": "query",
              "name": "email",
              "type": "string",
              "x-go-name": "Email"
            },
            {
              "description": "External ID",
              "in": "query",
              "name": "external_id",
              "type": "string",
              "x-go-name": "ExternalID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "default": "first_name",
              "description": "Field to sort by: first_name, last_name, personal_number, mobile, email, status, residence_country_code, updated_at",
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": false,
              "description": "Return only active persons",
              "in": "query",
              "name": "is_active",
              "type": "boolean",
              "x-go-name": "IsActive"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            }
          ],
          "responses": {
            "200": {
              "description": "SearchPersonsResponse",
              "schema": {
                "$ref": "#/definitions/SearchPersonsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Search persons",
          "tags": [
            "Person"
          ]
        },
        "post": {
          "description": "Create person",
          "operationId": "CreatePerson",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreatePersonRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreatePersonResponse",
              "schema": {
                "$ref": "#/definitions/CreatePersonResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create person",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons-by-external-id/{external_id}": {
        "get": {
          "description": "Get person by externalID",
          "operationId": "GetPersonByExternalID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "External ID",
              "in": "path",
              "name": "external_id",
              "required": true,
              "type": "string",
              "x-go-name": "ExternalID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPersonByExternalIDResponse",
              "schema": {
                "$ref": "#/definitions/GetPersonByExternalIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get person by external ID",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}": {
        "delete": {
          "description": "Deactivate person",
          "operationId": "DeactivatePerson",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "DeactivatePersonResponse",
              "schema": {
                "$ref": "#/definitions/DeactivatePersonResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Deactivate person",
          "tags": [
            "Person"
          ]
        },
        "get": {
          "description": "Get person information",
          "operationId": "GetPerson",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPersonResponse",
              "schema": {
                "$ref": "#/definitions/GetPersonResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get person",
          "tags": [
            "Person"
          ]
        },
        "patch": {
          "description": "Update person patch",
          "operationId": "UpdatePersonPatch",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdatePersonPatchSwaggerModel"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdatePersonResponse",
              "schema": {
                "$ref": "#/definitions/UpdatePersonResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update person patch",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/3ds-settings": {
        "delete": {
          "description": "Delete person 3DS settings",
          "operationId": "DeletePerson3DSSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "summary": "Delete person 3DS settings",
          "tags": [
            "Person"
          ]
        },
        "get": {
          "description": "Get person 3DS settings",
          "operationId": "GetPerson3DSSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "Person3DSSettingsResponse",
              "schema": {
                "$ref": "#/definitions/Person3DSSettingsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "summary": "Get person 3DS settings",
          "tags": [
            "Person"
          ]
        },
        "patch": {
          "description": "Update person 3DS settings",
          "operationId": "UpdatePerson3DSSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardholder3DSSettingsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "Person3DSSettingsResponse",
              "schema": {
                "$ref": "#/definitions/Person3DSSettingsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "summary": "Update person 3DS settings",
          "tags": [
            "Person"
          ]
        },
        "post": {
          "description": "Create person 3DS settings",
          "operationId": "CreatePerson3DSSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateCardholder3DSSettingsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "Person3DSSettingsResponse",
              "schema": {
                "$ref": "#/definitions/Person3DSSettingsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "summary": "Create person 3DS settings",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/accounts": {
        "get": {
          "description": "Get person accounts",
          "operationId": "GetPersonAccounts",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (can be used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (can be used with from_record parameter in pair). \u003cbr\u003e\nIf not specified, default value 1000 is used.",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "Return only active accounts",
              "in": "query",
              "name": "is_active",
              "type": "boolean",
              "x-go-name": "IsActive"
            },
            {
              "description": "AccountStatuses is **repeated** query parameter to specify account statuses to return.",
              "enum": [
                "Active",
                "Closing",
                "Closed",
                "Blocked"
              ],
              "in": "query",
              "name": "account_statuses",
              "type": "string",
              "x-go-name": "AccountStatuses"
            },
            {
              "description": "AccountName is a query parameter to specify account name to return.",
              "in": "query",
              "maximum": 100,
              "name": "account_name",
              "type": "string",
              "x-go-name": "AccountName"
            },
            {
              "description": "Viban is a query parameter to specify account Viban to return.",
              "in": "query",
              "maximum": 34,
              "name": "viban",
              "type": "string",
              "x-go-name": "Viban"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPersonAccountsResponse",
              "schema": {
                "$ref": "#/definitions/GetPersonAccountsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get person accounts",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/activate": {
        "patch": {
          "description": "Activate person",
          "operationId": "ActivatePerson",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "ActivatePersonResponse",
              "schema": {
                "$ref": "#/definitions/ActivatePersonResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Activate person",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/activate-card": {
        "patch": {
          "description": "Activate card by last four digits. Card 3D Secure settings are required to activate card if product has 3D Secure enabled.",
          "operationId": "ActivateCardByLastFourDigits",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ActivateCardByLastFourDigitsRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "ActivateCardByLastFourDigitsResponse",
              "schema": {
                "$ref": "#/definitions/ActivateCardByLastFourDigitsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Activate card",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/additional-infos": {
        "get": {
          "description": "Get person additional infos",
          "operationId": "GetPersonAdditionalInfos",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPersonAdditionalInfosResponse",
              "schema": {
                "$ref": "#/definitions/GetPersonAdditionalInfosResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get person additional infos",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/additional-infos/{person_additional_info_id}": {
        "delete": {
          "description": "Delete person additional info",
          "operationId": "DeletePersonAdditionalInfo",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "Person additional info ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_additional_info_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonAdditionalInfoID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete person additional info",
          "tags": [
            "Person"
          ]
        },
        "get": {
          "description": "Get person additional info",
          "operationId": "GetPersonAdditionalInfo",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "Person additional info ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_additional_info_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonAdditionalInfoID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPersonAdditionalInfoResponse",
              "schema": {
                "$ref": "#/definitions/GetPersonAdditionalInfoResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get person additional info",
          "tags": [
            "Person"
          ]
        },
        "patch": {
          "description": "Update person additional info",
          "operationId": "UpdatePersonAdditionalInfo",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "Person additional info ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_additional_info_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonAdditionalInfoID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdatePersonAdditionalInfoRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdatePersonAdditionalInfoResponse",
              "schema": {
                "$ref": "#/definitions/UpdatePersonAdditionalInfoResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update person additional info",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/card-blocks": {
        "get": {
          "description": "Get cards block logs",
          "operationId": "GetCardsBlockLogs",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (can be used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (can be used with from_record parameter in pair). \u003cbr\u003e\nIf not specified, default value 1000 is used.",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardsBlockLogsResponse",
              "schema": {
                "$ref": "#/definitions/GetCardsBlockLogsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get cards block logs",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/cards": {
        "get": {
          "description": "Get person cards",
          "operationId": "GetPersonCards",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (can be used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (can be used with from_record parameter in pair). \u003cbr\u003e\nIf not specified, default value 1000 is used.",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "default": "masked_card_number",
              "description": "Field to sort by: masked_card_number, expiry_date, type, status",
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "CardStatuses is **repeated** query parameter to specify card statuses to return.",
              "enum": [
                "Created",
                "Ordered",
                "Personalized",
                "Dispatched",
                "Active",
                "Blocked",
                "Closing",
                "Closed",
                "Expired",
                "AwaitingRenewal"
              ],
              "in": "query",
              "name": "card_statuses",
              "type": "string",
              "x-go-name": "CardStatuses"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPersonCardsResponse",
              "schema": {
                "$ref": "#/definitions/GetPersonCardsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get person cards",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/fcm-tokens": {
        "post": {
          "description": "Registers FCM token received from Firebase to be able to send push notifications to device",
          "operationId": "RegisterFCMToken",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RegisterFCMTokenRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "RegisterFCMTokenResponse",
              "schema": {
                "$ref": "#/definitions/RegisterFCMTokenResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Register FCM Token",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/fcm-tokens-by-device-id/{device_id}": {
        "delete": {
          "description": "Delete FCM Token",
          "operationId": "RemoveFCMTokenByDeviceID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "Device ID",
              "in": "path",
              "name": "device_id",
              "required": true,
              "type": "string",
              "x-go-name": "DeviceID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete FCM Token",
          "tags": [
            "Person"
          ]
        },
        "get": {
          "description": "Get FCM Token",
          "operationId": "GetFCMTokenByDeviceID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "Device ID",
              "in": "path",
              "name": "device_id",
              "required": true,
              "type": "string",
              "x-go-name": "DeviceID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetFCMTokenResponse",
              "schema": {
                "$ref": "#/definitions/GetFCMTokenResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get FCM Token",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/fcm-tokens-by-device-id/{device_id}/push-notifications-enabled": {
        "patch": {
          "description": "Turn off or on push notifications for device",
          "operationId": "UpdateFCMTokenPushNotificationsEnabled",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "Device ID",
              "in": "path",
              "name": "device_id",
              "required": true,
              "type": "string",
              "x-go-name": "DeviceID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdatePushNotificationsEnabledRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateFCMTokenPushNotificationsEnabledResponse",
              "schema": {
                "$ref": "#/definitions/UpdateFCMTokenPushNotificationsEnabledResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update push notifications enabled",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/fees-statements": {
        "get": {
          "description": "Get fees statement",
          "operationId": "GetFeesStatement",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetFeesStatementResponse",
              "schema": {
                "$ref": "#/definitions/GetFeesStatementResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get fees statement",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/history": {
        "get": {
          "description": "Get person history",
          "operationId": "GetPersonHistory",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (can be used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (can be used with from_record parameter in pair). \u003cbr\u003e\nIf not specified, default value 1000 is used.",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nRequired if to_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nRequired if from_date is set.\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "type": "string",
              "x-go-name": "ToDate"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPersonHistoryResponse",
              "schema": {
                "$ref": "#/definitions/GetPersonHistoryResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get person history",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/onfido-check": {
        "post": {
          "description": "Create Onfido check",
          "operationId": "CreateOnfidoCheck",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "201": {
              "description": "CreateOnfidoCheckResponse",
              "schema": {
                "$ref": "#/definitions/CreateOnfidoCheckResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create Onfido check",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/onfido-sdk-token": {
        "post": {
          "description": "Generate Onfido SDK token. For Onfido SDK information please refer to: https://documentation.onfido.com/sdk/web/",
          "operationId": "GenerateOnfidoSDKToken",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "Person IP Address. Required if your Onfido integration versions less than: API v3.4, iOS SDK v25.1.1, Android SDK v12.3.0, Web SDK 8.3.0",
              "in": "query",
              "name": "ip_address",
              "type": "string",
              "x-go-name": "IPAddress"
            }
          ],
          "responses": {
            "201": {
              "description": "GenerateOnfidoSDKTokenResponse",
              "schema": {
                "$ref": "#/definitions/GenerateOnfidoSDKTokenResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Generate Onfido SDK token",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/push-notifications-enabled": {
        "patch": {
          "description": "Turn off or on push notifications for cardholder",
          "operationId": "UpdatePushNotificationsEnabled",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdatePushNotificationsEnabledRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdatePushNotificationsEnabledResponse",
              "schema": {
                "$ref": "#/definitions/UpdatePushNotificationsEnabledResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update push notifications enabled",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/persons/{person_id}/users": {
        "delete": {
          "description": "Delete person users",
          "operationId": "DeletePersonUsers",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "description": "User IDs",
              "in": "query",
              "items": {
                "format": "uuid4",
                "type": "string"
              },
              "name": "user_ids",
              "required": true,
              "type": "array",
              "x-go-name": "UserID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete person users",
          "tags": [
            "Person"
          ]
        },
        "get": {
          "description": "Get person users",
          "operationId": "GetPersonUsers",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "default": "first_name",
              "description": "Field to sort by: first_name, last_name, mobile, email",
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "GetPersonUsersResponse",
              "schema": {
                "$ref": "#/definitions/GetPersonUsersResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get person users",
          "tags": [
            "Person"
          ]
        },
        "post": {
          "description": "Create person user",
          "operationId": "CreatePersonUser",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Person ID",
              "format": "uuid4",
              "in": "path",
              "name": "person_id",
              "required": true,
              "type": "string",
              "x-go-name": "PersonID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreatePersonUserRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreatePersonUserResponse",
              "schema": {
                "$ref": "#/definitions/CreatePersonUserResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create person user",
          "tags": [
            "Person"
          ]
        }
      },
      "/v1/product-cards": {
        "get": {
          "description": "Get list of cards",
          "operationId": "GetCards",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "default": "embossing_name",
              "description": "OrderField is **repeated** query parameter to specify cards order by.",
              "enum": [
                "embossing_name",
                "masked_card_number",
                "status",
                "type",
                "personalization_product_code",
                "expiry_date",
                "updated_at",
                "block_type"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "default": false,
              "description": "Return only active cards",
              "in": "query",
              "name": "is_active",
              "type": "boolean",
              "x-go-name": "IsActive"
            },
            {
              "description": "CardStatuses is **repeated** query parameter to specify card statuses to return.",
              "enum": [
                "Created",
                "Ordered",
                "Personalized",
                "Dispatched",
                "Active",
                "Blocked",
                "Closing",
                "Closed",
                "Expired",
                "AwaitingRenewal"
              ],
              "in": "query",
              "name": "card_statuses",
              "type": "string",
              "x-go-name": "CardStatuses"
            },
            {
              "description": "BlockTypes is **repeated** query parameter to specify card block types to return.",
              "enum": [
                "BlockedByCardholder",
                "BlockedByCardholderViaPhone",
                "BlockedByClient",
                "BlockedByIssuer",
                "MaxInvalidTriesCVV2",
                "MaxInvalidTriesPIN",
                "Counterfeit",
                "Fraudulent",
                "Lost",
                "Stolen"
              ],
              "in": "query",
              "name": "block_types",
              "type": "string",
              "x-go-name": "BlockTypes"
            },
            {
              "description": "AccountIDs is **repeated** query parameter with card account IDs",
              "format": "uuid4",
              "in": "query",
              "name": "account_ids",
              "type": "string",
              "x-go-name": "AccountIDs"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardsResponse",
              "schema": {
                "$ref": "#/definitions/GetCardsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get list of cards",
          "tags": [
            "Card"
          ]
        }
      },
      "/v1/product-settings/about-company": {
        "get": {
          "description": "Returns information about company",
          "operationId": "GetCompanyInfo",
          "responses": {
            "200": {
              "description": "GetCompanyInfoByProductIDResponse",
              "schema": {
                "$ref": "#/definitions/GetCompanyInfoByProductIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Company info",
          "tags": [
            "Product"
          ]
        }
      },
      "/v1/product-settings/account-allowed-currencies": {
        "get": {
          "description": "Returns account allowed currencies for product",
          "operationId": "GetAccountAllowedCurrencies",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "GetAccountAllowedCurrenciesResponse",
              "schema": {
                "$ref": "#/definitions/GetAccountAllowedCurrenciesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Account allowed currencies",
          "tags": [
            "Product"
          ]
        }
      },
      "/v1/product-settings/account-limits": {
        "get": {
          "description": "Returns default \u0026 maximum account limits together with credit limit and program type set for your product.",
          "operationId": "AccountLimits",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "AccountLimitsByProductIDResponse",
              "schema": {
                "$ref": "#/definitions/AccountLimitsByProductIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Account limits",
          "tags": [
            "Product"
          ]
        }
      },
      "/v1/product-settings/allowed-card-delivery-country-codes": {
        "get": {
          "description": "Returns allowed card delivery countries for your product.",
          "operationId": "AllowedCardDeliveryCountryCodes",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "AllowedCardDeliveryCountryCodesByProductIDResponse",
              "schema": {
                "$ref": "#/definitions/AllowedCardDeliveryCountryCodesByProductIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Allowed card delivery countries",
          "tags": [
            "Product"
          ]
        }
      },
      "/v1/product-settings/card-limits": {
        "get": {
          "description": "Returns default \u0026 maximum card limits set for your product.",
          "operationId": "CardLimits",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "CardLimitsByProductIDResponse",
              "schema": {
                "$ref": "#/definitions/CardLimitsByProductIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Card limits",
          "tags": [
            "Product"
          ]
        }
      },
      "/v1/product-settings/embossing-name": {
        "get": {
          "description": "Embossing name product settings",
          "operationId": "GetEmbossingNameProductSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "GetEmbossingNameProductSettingsResponse",
              "schema": {
                "$ref": "#/definitions/GetEmbossingNameProductSettingsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Embossing name product settings",
          "tags": [
            "Product"
          ]
        }
      },
      "/v1/product-settings/mobile-application": {
        "get": {
          "description": "Mobile application product settings",
          "operationId": "GetMobileApplicationProductSettings",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "GetMobileApplicationProductSettingsResponse",
              "schema": {
                "$ref": "#/definitions/GetMobileApplicationProductSettingsResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Mobile application product settings",
          "tags": [
            "Product"
          ]
        }
      },
      "/v1/product-settings/personalization-product-codes": {
        "get": {
          "description": "Returns default and actual personalization product codes for your product.",
          "operationId": "PersonalizationProductCodes",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "PersonalizationProductCodesResponse",
              "schema": {
                "$ref": "#/definitions/PersonalizationProductCodesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Personalization product codes",
          "tags": [
            "Product"
          ]
        }
      },
      "/v1/product-settings/product-fees": {
        "get": {
          "description": "Returns product fees for your product.",
          "operationId": "ProductFees",
          "responses": {
            "200": {
              "description": "ProductFeesByProductIDResponse",
              "schema": {
                "$ref": "#/definitions/ProductFeesByProductIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Product fees",
          "tags": [
            "Product"
          ]
        }
      },
      "/v1/products/card-designs": {
        "get": {
          "description": "Returns card designs by personalization product codes",
          "operationId": "GetCardDesignsByPersonalizationProductCodes",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "PersonalizationProductCode **repeated**",
              "in": "query",
              "name": "personalization_product_code",
              "required": true,
              "type": "string",
              "x-go-name": "PersonalizationProductCode"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardDesignsByPersonalizationProductCodesResponse",
              "schema": {
                "$ref": "#/definitions/GetCardDesignsByPersonalizationProductCodesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Card designs by personalization product codes",
          "tags": [
            "Product"
          ]
        }
      },
      "/v1/reserved-settlement-balance": {
        "get": {
          "description": "Get reserved settlement balance",
          "operationId": "GetReservedSettlementBalance",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "GetReservedSettlementBalanceResponse",
              "schema": {
                "$ref": "#/definitions/GetReservedSettlementBalanceResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get reserved settlement balance",
          "tags": [
            "Settlement"
          ]
        }
      },
      "/v1/search": {
        "get": {
          "description": "Search works for accounts/persons/cards. Person search accepts person ID, personal number or last name as search value. Account search works only by account ID. Card search accepts masked card number or card ID as search value. Returns business error in case of search returned no results.",
          "operationId": "Search",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            },
            {
              "description": "Person search allows to order fields by: full_name, residency_country_code, mobile, status, personal_id\n\nCard search allows to order fields by: embossing_name, masked_card_number, status, type, personalization_product_code, expiry_date",
              "enum": [
                "full_name",
                "residency_country_code",
                "mobile",
                "status",
                "personal_id",
                "embossing_name",
                "masked_card_number",
                "type",
                "personalization_product_code",
                "expiry_date"
              ],
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderFieldName"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "Search value",
              "in": "query",
              "name": "value",
              "required": true,
              "type": "string",
              "x-go-name": "Value"
            }
          ],
          "responses": {
            "200": {
              "description": "SearchResponse",
              "schema": {
                "$ref": "#/definitions/SearchResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "summary": "Search",
          "tags": [
            "Other"
          ]
        }
      },
      "/v1/status": {
        "get": {
          "description": "Use this endpoint to check the current status of the API.",
          "operationId": "GetStatus",
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            }
          },
          "security": [
            {
              "none": []
            }
          ],
          "summary": "Get API status",
          "tags": [
            "Status"
          ]
        }
      },
      "/v1/templates": {
        "get": {
          "description": "Get list of templates",
          "operationId": "GetTemplates",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "default": "message_type",
              "description": "Field to sort by: message_type, delivery_type, language_code, body, subject, updated_at",
              "in": "query",
              "name": "order_field",
              "type": "string",
              "x-go-name": "OrderField"
            },
            {
              "default": "asc",
              "description": "Direction to sort by: asc or desc",
              "in": "query",
              "name": "order_direction",
              "type": "string",
              "x-go-name": "OrderDirection"
            },
            {
              "description": "FromRecord defines a beginning record number of requested data set (used with records_count parameter in pair)",
              "format": "int64",
              "in": "query",
              "minimum": 0,
              "name": "from_record",
              "required": true,
              "type": "integer",
              "x-go-name": "FromRecord"
            },
            {
              "description": "RecordsCount defines number of records of requested data set (used with from_record parameter in pair)",
              "format": "int64",
              "in": "query",
              "maximum": 1000,
              "minimum": 1,
              "name": "records_count",
              "required": true,
              "type": "integer",
              "x-go-name": "RecordsCount"
            }
          ],
          "responses": {
            "200": {
              "description": "GetTemplatesResponse",
              "schema": {
                "$ref": "#/definitions/GetTemplatesResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get list of templates",
          "tags": [
            "Templates"
          ]
        },
        "post": {
          "description": "Create template. Template must be unique.",
          "operationId": "CreateTemplate",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateTemplateRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreateTemplateResponse",
              "schema": {
                "$ref": "#/definitions/CreateTemplateResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create template",
          "tags": [
            "Templates"
          ]
        }
      },
      "/v1/templates/{template_id}": {
        "delete": {
          "description": "Delete template",
          "operationId": "DeleteTemplate",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Template ID",
              "format": "uuid4",
              "in": "path",
              "name": "template_id",
              "required": true,
              "type": "string",
              "x-go-name": "TemplateID"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Delete template",
          "tags": [
            "Templates"
          ]
        },
        "get": {
          "description": "Get template",
          "operationId": "GetTemplate",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Template ID",
              "format": "uuid4",
              "in": "path",
              "name": "template_id",
              "required": true,
              "type": "string",
              "x-go-name": "TemplateID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetTemplateResponse",
              "schema": {
                "$ref": "#/definitions/GetTemplateResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get template",
          "tags": [
            "Templates"
          ]
        },
        "patch": {
          "description": "Update template",
          "operationId": "UpdateTemplate",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Template ID",
              "format": "uuid4",
              "in": "path",
              "name": "template_id",
              "required": true,
              "type": "string",
              "x-go-name": "TemplateID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateTemplateRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateTemplateResponse",
              "schema": {
                "$ref": "#/definitions/UpdateTemplateResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update template",
          "tags": [
            "Templates"
          ]
        }
      },
      "/v1/test/authorizations": {
        "post": {
          "description": "Create authorization",
          "operationId": "CreateAuthorization",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "default": false,
              "description": "CreateMatchingTransactionAndPerformClearing defines whether to create matching transaction and perform clearing or not.",
              "in": "query",
              "name": "create_matching_transaction_and_perform_clearing",
              "type": "boolean",
              "x-go-name": "CreateMatchingTransactionAndPerformClearing"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateAuthorizationRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreateAuthorizationResponse",
              "schema": {
                "$ref": "#/definitions/CreateAuthorizationResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create authorization",
          "tags": [
            "Testing"
          ]
        }
      },
      "/v1/test/cards/{card_id}/3ds-otp": {
        "post": {
          "description": "Send 3DS OTP notification",
          "operationId": "Send3DSOTP",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Send3DSOTPRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/responses/ok"
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Send 3DS OTP",
          "tags": [
            "Testing"
          ]
        }
      },
      "/v1/test/cards/{card_id}/status": {
        "patch": {
          "description": "Update card status",
          "operationId": "UpdateCardStatus",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Card ID",
              "format": "uuid4",
              "in": "path",
              "name": "card_id",
              "required": true,
              "type": "string",
              "x-go-name": "CardID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateCardStatusRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "UpdateCardStatusResponse",
              "schema": {
                "$ref": "#/definitions/UpdateCardStatusResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Update card status",
          "tags": [
            "Testing"
          ]
        }
      },
      "/v1/test/no-access": {
        "get": {
          "description": "This endpoint is useful for testing the handling of no access error",
          "operationId": "NoAccess",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "403": {
              "$ref": "#/responses/forbidden"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "No Access",
          "tags": [
            "Testing"
          ]
        }
      },
      "/v1/test/ping": {
        "post": {
          "description": "This endpoint is useful for testing JWT tokens",
          "operationId": "TestPing",
          "parameters": [
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PingRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "PingResponse",
              "schema": {
                "$ref": "#/definitions/PingResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Ping",
          "tags": [
            "Testing"
          ]
        }
      },
      "/v1/test/transactions": {
        "post": {
          "description": "Create transaction",
          "operationId": "CreateTransaction",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateTransactionRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "201": {
              "description": "CreateTransactionResponse",
              "schema": {
                "$ref": "#/definitions/CreateTransactionResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Create transaction",
          "tags": [
            "Testing"
          ]
        }
      },
      "/v1/tokens/{token_id}": {
        "get": {
          "description": "Get token by token ID",
          "operationId": "TokenByID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Token ID",
              "format": "uuid4",
              "in": "path",
              "name": "token_id",
              "required": true,
              "type": "string",
              "x-go-name": "TokenID"
            }
          ],
          "responses": {
            "200": {
              "description": "TokenByIDResponse",
              "schema": {
                "$ref": "#/definitions/TokenByIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get token by token ID",
          "tags": [
            "Token"
          ]
        }
      },
      "/v1/tokens/{token_id}/activate": {
        "post": {
          "description": "Activate token",
          "operationId": "ActivateToken",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Token ID",
              "format": "uuid4",
              "in": "path",
              "name": "token_id",
              "required": true,
              "type": "string",
              "x-go-name": "TokenID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ActivateTokenRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "ActivateTokenResponse",
              "schema": {
                "$ref": "#/definitions/ActivateTokenResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Activate token",
          "tags": [
            "Token"
          ]
        }
      },
      "/v1/tokens/{token_id}/deactivate": {
        "post": {
          "description": "Deactivate token",
          "operationId": "DeactivateToken",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Token ID",
              "format": "uuid4",
              "in": "path",
              "name": "token_id",
              "required": true,
              "type": "string",
              "x-go-name": "TokenID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DeactivateTokenRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "DeactivateTokenResponse",
              "schema": {
                "$ref": "#/definitions/DeactivateTokenResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Deactivate token",
          "tags": [
            "Token"
          ]
        }
      },
      "/v1/tokens/{token_id}/resume": {
        "post": {
          "description": "Resume token",
          "operationId": "ResumeToken",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Token ID",
              "format": "uuid4",
              "in": "path",
              "name": "token_id",
              "required": true,
              "type": "string",
              "x-go-name": "TokenID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ResumeTokenRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "ResumeTokenResponse",
              "schema": {
                "$ref": "#/definitions/ResumeTokenResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Resume token",
          "tags": [
            "Token"
          ]
        }
      },
      "/v1/tokens/{token_id}/suspend": {
        "post": {
          "description": "Suspend token",
          "operationId": "SuspendToken",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Token ID",
              "format": "uuid4",
              "in": "path",
              "name": "token_id",
              "required": true,
              "type": "string",
              "x-go-name": "TokenID"
            },
            {
              "in": "body",
              "name": "request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SuspendTokenRequest"
              },
              "x-go-name": "Request"
            }
          ],
          "responses": {
            "200": {
              "description": "SuspendTokenResponse",
              "schema": {
                "$ref": "#/definitions/SuspendTokenResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "415": {
              "$ref": "#/responses/unsupportedMediaType"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Suspend token",
          "tags": [
            "Token"
          ]
        }
      },
      "/v1/transactions/summary": {
        "get": {
          "description": "Transactions summary",
          "operationId": "TransactionsSummary",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "FromDate defines a beginning date of requested data set (used with to_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "from_date",
              "required": true,
              "type": "string",
              "x-go-name": "FromDate"
            },
            {
              "description": "ToDate defines an end date of requested data set (used with from_date parameter in pair).\nTime must be in 2006-01-02T15:04:05Z format",
              "format": "date-time",
              "in": "query",
              "name": "to_date",
              "required": true,
              "type": "string",
              "x-go-name": "ToDate"
            }
          ],
          "responses": {
            "200": {
              "description": "TransactionsSummaryResponse",
              "schema": {
                "$ref": "#/definitions/TransactionsSummaryResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Transactions summary",
          "tags": [
            "Transactions"
          ]
        }
      },
      "/v1/transactions/{transaction_id}": {
        "get": {
          "description": "Get transaction information",
          "operationId": "GetTransaction",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Transaction ID",
              "format": "uuid4",
              "in": "path",
              "name": "transaction_id",
              "required": true,
              "type": "string",
              "x-go-name": "TransactionID"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "GetTransactionResponse",
              "schema": {
                "$ref": "#/definitions/GetTransactionResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get transaction",
          "tags": [
            "Transactions"
          ]
        }
      },
      "/v1/transactions/{transaction_id}/fees": {
        "get": {
          "description": "Get fees by transaction ID",
          "operationId": "GetFeesByTransactionID",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "Transaction ID",
              "format": "uuid4",
              "in": "path",
              "name": "transaction_id",
              "required": true,
              "type": "string",
              "x-go-name": "TransactionID"
            },
            {
              "description": "Fee types is a **repeated** query parameter to specify fee types to return.",
              "in": "query",
              "name": "fee_types",
              "type": "string",
              "x-go-name": "FeeTypes"
            },
            {
              "description": "Filter by Company ID, cannot be used together with Person ID",
              "format": "uuid4",
              "in": "query",
              "name": "company_id",
              "type": "string",
              "x-go-name": "CompanyID"
            },
            {
              "description": "Filter by Person ID, cannot be used together with Company ID",
              "format": "uuid4",
              "in": "query",
              "name": "person_id",
              "type": "string",
              "x-go-name": "PersonID"
            }
          ],
          "responses": {
            "200": {
              "description": "FeesByTransactionIDResponse",
              "schema": {
                "$ref": "#/definitions/FeesByTransactionIDResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get fees by transaction ID",
          "tags": [
            "Fee"
          ]
        }
      },
      "/v2/cards-by-hashed-card-number/{sha}": {
        "get": {
          "description": "Get card by SHA hashed card number",
          "operationId": "GetCardBySHACardNumber",
          "parameters": [
            {
              "description": "Product, which this request belongs to (product code is defined by Wallester and specific for each client's product)",
              "in": "header",
              "name": "X-Product-Code",
              "required": true,
              "type": "string",
              "x-go-name": "ProductCode"
            },
            {
              "description": "Type of the source system, possible values are Backend or SelfService",
              "enum": [
                "Backend",
                "SelfService"
              ],
              "in": "header",
              "name": "X-Audit-Source-Type",
              "required": true,
              "type": "string",
              "x-go-name": "AuditSourceType"
            },
            {
              "description": "ID of the user who initiated the request",
              "in": "header",
              "name": "X-Audit-User-Id",
              "required": true,
              "type": "string",
              "x-go-name": "AuditUserID"
            },
            {
              "description": "JWT Token, in \"Authorization: Bearer JWT_TOKEN\" format",
              "in": "header",
              "name": "Authorization",
              "required": true,
              "type": "string"
            },
            {
              "description": "SHA hashed card number",
              "in": "path",
              "name": "sha",
              "required": true,
              "type": "string",
              "x-go-name": "SHA"
            }
          ],
          "responses": {
            "200": {
              "description": "GetCardBySHACardNumberResponse",
              "schema": {
                "$ref": "#/definitions/GetCardBySHACardNumberResponse"
              }
            },
            "400": {
              "$ref": "#/responses/badRequest"
            },
            "401": {
              "$ref": "#/responses/unauthorized"
            },
            "403": {
              "$ref": "#/responses/forbidden"
            },
            "422": {
              "$ref": "#/responses/unprocessableEntity"
            },
            "500": {
              "$ref": "#/responses/internalServerError"
            }
          },
          "security": [
            {
              "JWT": []
            }
          ],
          "summary": "Get card by SHA hashed card number",
          "tags": [
            "Card"
          ]
        }
      }
    },
    "produces": [
      "application/json"
    ],
    "responses": {
      "badRequest": {
        "description": "Request failed.",
        "schema": {
          "$ref": "#/definitions/BadRequest"
        }
      },
      "empty": {
        "description": "Empty response."
      },
      "forbidden": {
        "description": "Authorization has been denied for this request.",
        "schema": {
          "$ref": "#/definitions/Forbidden"
        }
      },
      "internalServerError": {
        "description": "Internal server error.",
        "schema": {
          "$ref": "#/definitions/InternalServerError"
        }
      },
      "ok": {
        "description": "OK."
      },
      "serviceUnavailable": {
        "description": "Service is unavailable.",
        "schema": {
          "$ref": "#/definitions/ServiceUnavailable"
        }
      },
      "unauthorized": {
        "description": "Authentication has failed for this request.",
        "schema": {
          "$ref": "#/definitions/ResponseError"
        }
      },
      "unprocessableEntity": {
        "description": "Model validation failed.",
        "schema": {
          "$ref": "#/definitions/UnprocessableEntity"
        }
      },
      "unsupportedMediaType": {
        "description": "Media type is unsupported.",
        "schema": {
          "$ref": "#/definitions/UnsupportedMediaType"
        }
      }
    },
    "schemes": [
      "https"
    ],
    "swagger": "2.0",
    "tags": [
      {
        "description": "## Introduction\n\nThis document describes how the **Client** can integrate with the **Wallester** system to receive events in real-time and do custom business logic in **Client’s** system based on the received data.\n\n**Wallester** sends events using [Webhooks](https://hookdeck.com/webhooks/guides/what-are-webhooks-how-they-work#consuming-a-webhook) based communication, where **Client** has an HTTP server and **Wallester** acts as a client. **Wallester** does a HTTP POST request to a URL of **Client** choice in a JSON format.\n\nAlong with the event, data about the object is transferred, which is referred to as the payload. The payload can be extended with new optional fields at any time, therefore **Client** should be able to receive and process fields of any type and not add strict validation.\n\n## Communication Format\n\nTo use the **Wallester** notification system, **Client** must share the following information:\n1. Basic authentication credentials (Username \u0026 Password)\n2. HTTP server URL\n3. Type of events to be enabled\n\n## HTTP\n\nHTTP requests are protected with HTTP Basic authentication. To unauthenticated requests, the external system should return a response with a HTTP 401 Unauthorized status.\n\n![Request-response scheme](img/request-response.png)\n\nThe **Client** needs to whitelist the **Wallester** IP addresses in order to allow requests to pass through the firewall.\n\n**Production:**\n- Contact our Support team [support@wallester.com](mailto:support@wallester.com)\n\n**Sandbox:**\n- Contact our Support team [support@wallester.com](mailto:support@wallester.com)\n\n## Guaranteed delivery\n\nNotifications can be configured with guaranteed delivery feature. Notification will be sent again in case of an unexpected response status code (not HTTP code 200) or a timeout for any of the involved notification types, the Retry logic will apply.\n\nThe feature is available for the following Notification Event types:\n\n- Authorization notification\n- Create card\n- Fee\n- Authorization release\n- Transaction clearing\n- KYC Check\n- Person KYC status change (new format)\n- Apple pay orange flow notifications\n\n**Retry logic:**\n\n\u003ctable\u003e\n\u003ctr\u003e\u003cth\u003eRetry\u003c/th\u003e\u003cth\u003eApproximate time after the first failure\u003c/th\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e1st retry\u003c/td\u003e\u003ctd\u003e2 seconds\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e2nd retry\u003c/td\u003e\u003ctd\u003e5 seconds\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e3rd retry\u003c/td\u003e\u003ctd\u003e10 seconds\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e4th retry\u003c/td\u003e\u003ctd\u003e10 minutes\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e5th retry\u003c/td\u003e\u003ctd\u003e30 minutes\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e6th retry\u003c/td\u003e\u003ctd\u003e1 hour\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e7th retry\u003c/td\u003e\u003ctd\u003e3 hours\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e8th retry\u003c/td\u003e\u003ctd\u003e6 hours\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e9th retry\u003c/td\u003e\u003ctd\u003e12 hours\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e10th retry\u003c/td\u003e\u003ctd\u003e24 hours\u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e\n\nDepending on the technical requirements, a specific message delivery type should be chosen:\n1. **Limited** - events will be retried 10 times only; retry logic intervals are applied;\n2. **Mandatory** - events will be retried until Wallester receives a successful response; retry logic intervals are applied; after the 10th try message will be resent every 24 hours.\n\nThe diagram below is given for the visual flow representation:\n\n![Diagram of Notification Sending Process](img/send-notifications-diagram.png)\n\n## Events\n\n### 1. Authorization\n\nGiven events allows the Client to receive information for all card related authorizations and binded notifications, initiated by Cardholder or Merchant. Intent of such notifications is purely informative.\n\n1.1. [Authorization](#operation/Authorization)\n\n1.2. [Reversal authorization](#operation/ReversalAuthorization)\n\n1.3. [Release authorization](#operation/ReleaseAuthorization)\n\n### 1.4. Decision request\n\nFollowing events might be used in case when **Client** would like to get access to authorization approval logic. There are a few specific decision requests: Balance Inquiry and Partial payment. Those require more advanced behavior than regular payment authorizations.\n\nDue to strict card schema requirements, a response must be sent back to **Wallester** within 1 second or less.\n\nIf **Client** does not reply within the expected period or there are any communication issues between **Client** and **Wallester** (unresolvable within a given time), **Wallester** will use **default behavior defined by Client** (approve or decline).\n\n1.4.1. [Decision request: Authorization](#operation/DecisionRequestAuthorization)\n\n1.4.2. [Decision request: Balance inquiry authorization](#operation/DecisionRequestBalanceInquiryAuthorization)\n\n1.4.3. [Decision request: Partial Authorization](#operation/DecisionRequestPartialAuthorization)\n\n#### Response codes\n\nThis section describes all possible response codes that can be used in response to a decision request. It is strongly recommended to use all available options and return the correct reason for each decision.\n\n\u003ctable\u003e\u003ctr\u003e\u003cth\u003eResponse Code\u003c/th\u003e\u003cth\u003eDescription\u003c/th\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eApproved\u003c/td\u003e\u003ctd\u003eApprove.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eApprovedForPartialAmount\u003c/td\u003e\u003ctd\u003eApprove for a partial amount. See Partial authorization for more details.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eClientSystemMalfunction\u003c/td\u003e\u003ctd\u003eClient system is experiencing downtime.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eDeclinedByClient\u003c/td\u003e\u003ctd\u003eDecline.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eDoNotHonour\u003c/td\u003e\u003ctd\u003eDecline due to potential fraud or other system rules.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eNotSufficientFunds\u003c/td\u003e\u003ctd\u003eInsufficient funds on the cardholder balance.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eTransactionNotPermittedToCardholder\u003c/td\u003e\u003ctd\u003ePayment not allowed for the cardholder.\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\n### 2. Transaction\n\n2.1. [Transaction clearing](#operation/TransactionClearing)\n\n### 3. Account adjustment\n\n3.1. [Incoming payment](#operation/IncomingPayment)\n\n### 4. Fee\n\nFee types and events are configured in the Wallester system, which makes it possible to configure notifications only for a specific fee or event type. Only a complete event is available at the moment.\n\nPossible event types:\n- **create** (Event notification is triggered when a new fee is created, except one that is created in Completed status and is not related to authorization.)\n- **update** (Event notification is triggered when a fee amount changes. For example, during clearing the amount is recalculated.)\n- **cancel** (Event notification is triggered when a fee is canceled. For example, the authorization has expired and related fee is canceled)\n- **complete** (Event notification is triggered when a new fee is created in Completed status or fee status has changed to Completed. For example, the CardIssuanceFee is created in Completed status or fee status has changed to Completed after clearing.)\n\n4.1. [Complete fee](#operation/CompleteFee)\n\n4.2. [Create fee](#operation/CreateFee)\n\n4.3. [Update fee](#operation/UpdateFee)\n\n4.4. [Cancel fee](#operation/CancelFee)\n\n### 5. Tokenization\n\n5.1. Apple pay incentive notifications\n\n 5.1.1. [Apple Pay incentive notification incomplete provisioning](#operation/ApplePayIncentiveNotificationIncompleteProvisioning)\n\n 5.1.2. [Apple Pay incentive notification successful transaction](#operation/ApplePayIncentiveNotificationSuccessfulTransaction)\n\n5.2. [Apple pay orange flow](#operation/ApplePayOrangeFlow)\n\n### 6. Person\n\n6.1. [KYC status change](#operation/KYCStatusChange)\n\n### 7. Card\n\nCard lifecycle representation:\n\n![Card lifecycle representation](img/card-lifecycle-representation.png)\n\n7.1. [Create card](#operation/CreateCardEvent)\n\n7.2. [Ordered card](#operation/OrderedCardEvent)\n\n7.3. [Personalize card](#operation/PersonalizeCardEvent)\n\n7.4. [Dispatch card](#operation/DispatchCardEvent)\n\n7.5. [Activate card](#operation/ActivateCardEvent)\n\n7.6. [Block card](#operation/BlockCardEvent)\n\n7.7. Close card\n\nEvent notification is triggered when a new card is closed. The status is applicable for all card types.\n- 7.7.1. [Closing](#operation/ClosingCardEvent)\n- 7.7.2. [Closed](#operation/ClosedCardEvent)\n\n7.8. [Expire card](#operation/ExpireCardEvent)\n\n7.9. [Renew card](#operation/RenewCardEvent)\n\n### 8. 3D Secure\n\n8.1. [Event notification is triggered when a new 3DS OTP request is received. By default, the message is sent to the cardholder via SMS, however when this event is enabled, the message will be forwarded to a server defined by the Client instead.](#operation/ThreeDSecureOTP)\n\n8.2. 3D secure authentication\n\n**Currently, this topic only implies Out of Band authentication. This is the initial version that can be modified in the future, therefore make sure to not add strict validation.**\n\n1. **Wallester** will send the [Initiate Action](#operation/InitiateAction) event to Client, providing information about cardholder and purchase.\n\n2. **Client** will send a notification to the cardholder’s device to wake the mobile application.\n\n3. Cardholder will authenticate within **Client** App (via out of band).\n\n4. **Wallester** will send the [Validate](#operation/ThreeDSValidate) event to the **Client** asking for the results (this recurs every 2 seconds after each Pending Status is received).\n\n5. **Client** will verify whether the cardholder has confirmed the purchase.\n\n**Wallester** expects to receive response from **Client** in less than 500 ms per each event.\n\n![3Ds Out of Band authentication](img/3ds-out-of-band-authentication.jpg)\n- 8.2.1. [Initiate action](#operation/InitiateAction)\n- 8.2.2. [Validate](#operation/ThreeDSValidate)\n\n### 9. KYC Check\n\n9.1. [KYC Check](#operation/KYCCheck)\n\n",
        "name": "Webhooks"
      }
    ]
  }